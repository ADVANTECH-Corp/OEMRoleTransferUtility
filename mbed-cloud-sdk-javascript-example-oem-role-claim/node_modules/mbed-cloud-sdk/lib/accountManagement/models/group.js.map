{"version":3,"sources":["accountManagement/models/group.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;AAEF,oDAAoD;AAOpD;;GAEG;AACH;IA2BI,eAAY,IAAoB,EAAU,IAA2B;QAA3B,SAAI,GAAJ,IAAI,CAAuB;QACjE,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;QACL,CAAC;IACL,CAAC;IAcM,yBAAS,GAAhB,UAAiB,OAAqB,EAAE,QAAyC;QAAjF,iBAUC;QATG,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAChC,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,EAAE,CAAC;QACjB,CAAC;QAED,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAI,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QACrD,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAcM,2BAAW,GAAlB,UAAmB,OAAqB,EAAE,QAA2C;QAArF,iBAUC;QATG,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAChC,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,EAAE,CAAC;QACjB,CAAC;QAED,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAI,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QACvD,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IACL,YAAC;AAAD,CAlFA,AAkFC,IAAA;AAlFY,sBAAK","file":"group.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { asyncStyle } from \"../../common/functions\";\nimport { CallbackFn, ListOptions } from \"../../common/interfaces\";\nimport { ListResponse } from \"../../common/listResponse\";\nimport { AccountManagementApi } from \"../accountManagementApi\";\nimport { User } from \"./user\";\nimport { ApiKey } from \"./apiKey\";\n\n/**\n * Group\n */\nexport class Group {\n\n    /**\n     * The UUID of the group.\n     */\n    public readonly id: string;\n    /**\n     * The UUID of the account this group belongs to.\n     */\n    public readonly accountId: string;\n    /**\n     * The name of the group.\n     */\n    public readonly name: string;\n    /**\n     * The number of users in this group.\n     */\n    public readonly userCount: number;\n    /**\n     * The number of API keys in this group.\n     */\n    public readonly apiKeyCount: number;\n    /**\n     * Creation time.\n     */\n    public readonly createdAt?: Date;\n\n    constructor(init: Partial<Group>, private _api?: AccountManagementApi) {\n        for (const key in init) {\n            if (init.hasOwnProperty(key)) {\n                this[key] = init[key];\n            }\n        }\n    }\n\n    /**\n     * List users of this group\n     * @param options filter options\n     * @returns Promise of listResponse\n     */\n    public listUsers(options?: ListOptions): Promise<ListResponse<User>>;\n    /**\n     * List users of this group\n     * @param options filter options\n     * @param callback A function that is passed the arguments (error, listResponse)\n     */\n    public listUsers(options?: ListOptions, callback?: CallbackFn<ListResponse<User>>): void;\n    public listUsers(options?: ListOptions, callback?: CallbackFn<ListResponse<User>>): Promise<ListResponse<User>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return asyncStyle(done => {\n            this._api.listGroupUsers(this.id, options, done);\n        }, callback);\n    }\n\n    /**\n     * List API keys of this group\n     * @param options filter options\n     * @returns Promise of listResponse\n     */\n    public listApiKeys(options?: ListOptions): Promise<ListResponse<ApiKey>>;\n    /**\n     * List API keys of this group\n     * @param options filter options\n     * @param callback A function that is passed the arguments (error, listResponse)\n     */\n    public listApiKeys(options?: ListOptions, callback?: CallbackFn<ListResponse<ApiKey>>): void;\n    public listApiKeys(options?: ListOptions, callback?: CallbackFn<ListResponse<ApiKey>>): Promise<ListResponse<ApiKey>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return asyncStyle(done => {\n            this._api.listGroupApiKeys(this.id, options, done);\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../../src"}