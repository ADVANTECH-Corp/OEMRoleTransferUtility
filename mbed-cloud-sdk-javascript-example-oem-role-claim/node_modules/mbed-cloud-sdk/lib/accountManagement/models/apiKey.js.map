{"version":3,"sources":["accountManagement/models/apiKey.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;AAEF,oDAAgE;AAOhE;;GAEG;AACH;IAuBI,gBAAY,IAAqB,EAAU,IAA2B;QAA3B,SAAI,GAAJ,IAAI,CAAuB;QAClE,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;QACL,CAAC;IACL,CAAC;IAYM,2BAAU,GAAjB,UAAkB,QAAmC;QAArD,iBAaC;QAZG,MAAM,CAAC,sBAAU,CAAC,UAAA,SAAS;YACvB,KAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAC1C,CAAC,EAAE,UAAC,IAAI,EAAE,IAAI;YACV,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,KAAK;oBAC3B,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC9C,CAAC,CAAC,CAAC;YACP,CAAC;YAED,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACvB,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAYM,yBAAQ,GAAf,UAAgB,QAA2B;QAA3C,iBAKC;QAJG,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAC3C,KAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAYM,uBAAM,GAAb,UAAc,QAA6B;QAA3C,iBAIC;QAHG,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAI,EAAE,IAAI,CAAC,CAAC;QACvC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAYM,uBAAM,GAAb,UAAc,QAA2B;QAAzC,iBAIC;QAHG,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IACL,aAAC;AAAD,CAxGA,AAwGC,IAAA;AAxGY,wBAAM","file":"apiKey.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { asyncStyle, apiWrapper } from \"../../common/functions\";\nimport { CallbackFn } from \"../../common/interfaces\";\nimport { AddApiKeyObject } from \"../types\";\nimport { AccountManagementApi } from \"../accountManagementApi\";\nimport { User } from \"./user\";\nimport { Group } from \"./group\";\n\n/**\n * API Key\n */\nexport class ApiKey {\n\n    /**\n     * The UUID of the API key.\n     */\n    public readonly id: string;\n    /**\n     * The API key.\n     */\n    public readonly key: string;\n    /**\n     * Creation time.\n     */\n    public readonly createdAt?: Date;\n    /**\n     * The timestamp of the API key creation in the storage, in milliseconds.\n     */\n    public readonly creationTime?: number;\n    /**\n     * The timestamp of the latest API key usage, in milliseconds.\n     */\n    public readonly lastLoginTime?: number;\n\n    constructor(init: Partial<ApiKey>, private _api?: AccountManagementApi) {\n        for (const key in init) {\n            if (init.hasOwnProperty(key)) {\n                this[key] = init[key];\n            }\n        }\n    }\n\n    /**\n     * List the groups this API key belongs to\n     * @returns Promise containing groups\n     */\n    public listGroups(): Promise<Array<Group>>;\n    /**\n     * List the groups this API key belongs to\n     * @param callback A function that is passed the return arguments (error, groups)\n     */\n    public listGroups(callback: CallbackFn<Array<Group>>): void;\n    public listGroups(callback?: CallbackFn<Array<Group>>): Promise<Array<Group>> {\n        return apiWrapper(resultsFn => {\n            this._api.listGroups(null, resultsFn);\n        }, (data, done) => {\n            let groups = [];\n            if (data.data && data.data.length) {\n                groups = data.data.filter(group => {\n                    return this.groups.indexOf(group.id) > -1;\n                });\n            }\n\n            done(null, groups);\n        }, callback);\n    }\n\n    /**\n     * Get details of the key owner\n     * @returns Promise containing the user\n     */\n    public getOwner(): Promise<User>;\n    /**\n     * Get details of the key owner\n     * @param callback A function that is passed the return arguments (error, user)\n     */\n    public getOwner(callback: CallbackFn<User>): void;\n    public getOwner(callback?: CallbackFn<User>): Promise<User> {\n        return asyncStyle(done => {\n            if (!this.ownerId) return done(null, null);\n            this._api.getUser(this.ownerId, done);\n        }, callback);\n    }\n\n    /**\n     * Updates an API key\n     * @returns Promise containing API key\n     */\n    public update(): Promise<ApiKey>;\n    /**\n     * Updates an API key\n     * @param callback A function that is passed the return arguments (error, API key)\n     */\n    public update(callback: CallbackFn<ApiKey>): void;\n    public update(callback?: CallbackFn<ApiKey>): Promise<ApiKey> {\n        return asyncStyle(done => {\n            this._api.updateApiKey(this, done);\n        }, callback);\n    }\n\n    /**\n     * Delete the API key\n     * @returns Promise containing any error\n     */\n    public delete(): Promise<void>;\n    /**\n     * Delete the API key\n     * @param callback A function that is passed any error\n     */\n    public delete(callback: CallbackFn<void>): void;\n    public delete(callback?: CallbackFn<void>): Promise<void> {\n        return asyncStyle(done => {\n            this._api.deleteApiKey(this.id, done);\n        }, callback);\n    }\n}\nexport interface ApiKey extends AddApiKeyObject {}\n"],"sourceRoot":"../../../src"}