{"version":3,"sources":["deviceDirectory/deviceDirectoryApi.ts"],"names":[],"mappings":"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","file":"deviceDirectoryApi.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { asyncStyle, apiWrapper, encodeInclude, encodeFilter } from \"../common/functions\";\nimport { ConnectionOptions, CallbackFn } from \"../common/interfaces\";\nimport { ListResponse } from \"../common/listResponse\";\nimport { AddDeviceObject, UpdateDeviceObject, AddQueryObject, UpdateQueryObject, DeviceListOptions, QueryListOptions, DeviceEventListOptions } from \"./types\";\nimport { Device } from \"./models/device\";\nimport { DeviceAdapter } from \"./models/deviceAdapter\";\nimport { Query } from \"./models/query\";\nimport { QueryAdapter } from \"./models/queryAdapter\";\nimport { DeviceEvent } from \"./models/deviceEvent\";\nimport { DeviceEventAdapter } from \"./models/deviceEventAdapter\";\nimport { Endpoints } from \"./endpoints\";\nimport { Filters } from \"./filters\";\nimport { ApiMetadata } from \"../common/apiMetadata\";\n\n/**\n * ## Device Directory API\n *\n * This API is initialized with [ConnectionOptions](../interfaces/connectionoptions.html).\n *\n * To create an instance of this API in [Node.js](https://nodejs.org):\n *\n * ```JavaScript\n * var MbedCloudSDK = require(\"mbed-cloud-sdk\");\n *\n * var devices = new MbedCloudSDK.DeviceDirectoryApi({\n *     apiKey: \"<Mbed Cloud API Key>\"\n * });\n * ```\n *\n * To create an instance of this API in the browser:\n *\n * ```html\n * <script src=\"<mbed-cloud-sdk>/bundles/device-directory.min.js\"></script>\n *\n * <script>\n *     var devices = new MbedCloudSDK.DeviceDirectoryApi({\n *         apiKey: \"<Mbed Cloud API Key>\"\n *     });\n * </script>\n * ```\n */\nexport class DeviceDirectoryApi {\n\n    private _endpoints: Endpoints;\n\n    /**\n     * @param options connection objects\n     */\n    constructor(options: ConnectionOptions) {\n        this._endpoints = new Endpoints(options);\n    }\n\n    /**\n     * Gets a list of devices\n     *\n     * Example:\n     * ```JavaScript\n     * devices.listDevices({\n     *     filter: {\n     *         state: { $eq: \"bootstrapped\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * })\n     * .then(devices => {\n     *     // Utilize devices here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options list options\n     * @returns Promise of devices\n     */\n    public listDevices(options?: DeviceListOptions): Promise<ListResponse<Device>>;\n    /**\n     * Gets a list of devices\n     *\n     * Example:\n     * ```JavaScript\n     * devices.listDevices({\n     *     filter: {\n     *         state: { $eq: \"bootstrapped\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * }, function(error, devices) {\n     *     if (error) throw error;\n     *     // Utilize devices here\n     * });\n     * ```\n     *\n     * @param options list options\n     * @param callback A function that is passed the arguments (error, devices)\n     */\n    public listDevices(options?: DeviceListOptions, callback?: CallbackFn<ListResponse<Device>>): void;\n    public listDevices(options?: any, callback?: CallbackFn<ListResponse<Device>>): Promise<ListResponse<Device>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, after, order, include, filter } = options;\n            this._endpoints.directory.deviceList(limit, order, after, encodeFilter(filter, Filters.DEVICE_FILTER_MAP, Filters.NESTED_FILTERS), encodeInclude(include), resultsFn);\n        }, (data, done) => {\n            const devices = data.data.map(device => {\n                return DeviceAdapter.map(device, this);\n            });\n\n            done(null, new ListResponse<Device>(data, devices));\n        }, callback);\n    }\n\n    /**\n     * Gets details of a device\n     *\n     * Example:\n     * ```JavaScript\n     * devices.getDevice('015c5ed320c0000000000001001000f0')\n     * .then(device => {\n     *     // Utilize device here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @returns Promise of device\n     */\n    public getDevice(deviceId: string): Promise<Device>;\n    /**\n     * Gets details of a device\n     *\n     * Example:\n     * ```JavaScript\n     * devices.getDevice('015c5ed320c0000000000001001000f0', function(error, device) {\n     *     if (error) throw error;\n     *     // Utilize device here\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param callback A function that is passed the arguments (error, device)\n     */\n    public getDevice(deviceId: string, callback: CallbackFn<Device>): void;\n    public getDevice(deviceId: string, callback?: CallbackFn<Device>): Promise<Device> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.directory.deviceRetrieve(deviceId, resultsFn);\n        }, (data, done) => {\n            const device = DeviceAdapter.map(data, this);\n            done(null, device);\n        }, callback);\n    }\n\n    /**\n     * Add a device\n     *\n     * Example:\n     * ```JavaScript\n     * devices.addDevice({\n     *     certificateFingerprint: '07:7A:EB:67:37:42:4D:11:5C:3E:99:07:1E:EB:44:...',\n     *     certificateIssuerId: '015c3c457b2002420a01041603c00000',\n     *     name: 'newDeviceName'\n     * })\n     * .then(device => {\n     *     // Utilize device here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param device Device details\n     * @returns Promise of device\n     */\n    public addDevice(device: AddDeviceObject): Promise<Device>;\n    /**\n     * Add a device\n     *\n     * Example:\n     * ```JavaScript\n     * devices.addDevice({\n     *     certificateFingerprint: '07:7A:EB:67:37:42:4D:11:5C:3E:99:07:1E:EB:44:...',\n     *     certificateIssuerId: '015c3c457b2002420a01041603c00000',\n     *     name: 'newDeviceName'\n     * }, function(error, device) {\n     *     if (error) throw error;\n     *     // Utilize device here\n     * });\n     * ```\n     *\n     * @param device Device details\n     * @param callback A function that is passed the arguments (error, device)\n     */\n    public addDevice(device: AddDeviceObject, callback: CallbackFn<Device>): void;\n    public addDevice(device: AddDeviceObject, callback?: CallbackFn<Device>): Promise<Device> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.directory.deviceCreate(DeviceAdapter.addMap(device), resultsFn);\n        }, (data, done) => {\n            const result = DeviceAdapter.map(data, this);\n            done(null, result);\n        }, callback);\n    }\n\n    /**\n     * Update a device\n     *\n     * Example:\n     * ```JavaScript=\n     * devices.updateDevice({\n     *     id: '015c5ed320c0000000000001001000f0',\n     *     name: 'Updated name',\n     *     description: 'Updated description',\n     *     customAttributes: {\n     *         attr1: 'Use json structure',\n     *         attr2: 'Can use 5 entries in the JSON struct'\n     *     }\n     * })\n     * .then(device => {\n     *     // Utilize device here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param device Device details\n     * @returns Promise of device\n     */\n    public updateDevice(device: UpdateDeviceObject): Promise<Device>;\n    /**\n     * Update a device\n     *\n     * Example:\n     * ```JavaScript\n     * devices.updateDevice({\n     *     id: '015c5ed320c0000000000001001000f0',\n     *     name: 'Updated name',\n     *     description: 'Updated description',\n     *     customAttributes: {\n     *         attr1: 'Use json structure',\n     *         attr2: 'Can use 5 entries in the JSON struct'\n     *     }\n     * }, function(error, device) {\n     *     if (error) throw error;\n     *     // Utilize device here\n     * });\n     * ```\n     *\n     * @param device Device details\n     * @param callback A function that is passed the arguments (error, device)\n     */\n    public updateDevice(device: UpdateDeviceObject, callback: CallbackFn<Device>): void;\n    public updateDevice(device: UpdateDeviceObject, callback?: CallbackFn<Device>): Promise<Device> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.directory.deviceUpdate(device.id, DeviceAdapter.updateMap(device), resultsFn);\n        }, (data, done) => {\n            const result = DeviceAdapter.map(data, this);\n            done(null, result);\n        }, callback);\n    }\n\n    /**\n     * Delete a device\n     *\n     * Example:\n     * ```JavaScript\n     * devices.deleteDevice('015c5ed320c0000000000001001000f0')\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @returns Promise containing any error\n     */\n    public deleteDevice(deviceId: string): Promise<void>;\n    /**\n     * Delete a device\n     *\n     * Example:\n     * ```JavaScript\n     * devices.deleteDevice('015c5ed320c0000000000001001000f0', function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param callback A function that is passed any error\n     */\n    public deleteDevice(deviceId: string, callback: CallbackFn<void>): void;\n    public deleteDevice(deviceId: string, callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.directory.deviceDestroy(deviceId, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * List queries\n     *\n     * Example:\n     * ```JavaScript\n     * devices.listQueries({limit: 5})\n     * .then(queries => {\n     *     // Utilize queries here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options list options\n     * @param callback A function containing a list response\n     * @returns Promise containing a list response\n     */\n    public listQueries(options?: QueryListOptions): Promise<ListResponse<Query>>;\n    /**\n     * List queries\n     *\n     * Example:\n     * ```JavaScript\n     * devices.listQueries({limit: 5}, function(error, queries) {\n     *     if (error) throw error;\n     *     // Utilize queries here\n     * });\n     * ```\n     *\n     * @param options list options\n     * @param callback A function containing a list response\n     * @returns Promise containing a list response\n     */\n    public listQueries(options?: QueryListOptions, callback?: CallbackFn<ListResponse<Query>>): void;\n    public listQueries(options?: any, callback?: CallbackFn<ListResponse<Query>>): Promise<ListResponse<Query>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, order, after, include, filter } = options;\n            this._endpoints.directory.deviceQueryList(limit, order, after, encodeFilter(filter, Filters.EMPTY_FILTER_MAP), encodeInclude(include), resultsFn);\n        }, (data, done) => {\n            let queries: Array<Query>;\n            if (data.data && data.data.length) {\n                queries = data.data.map(query => {\n                    return QueryAdapter.map(query, this);\n                });\n            }\n\n            const response = new ListResponse(data, queries);\n            done(null, response);\n        }, callback);\n    }\n\n    /**\n     * Get a query\n     *\n     * Example:\n     * ```JavaScript\n     * devices.getQuery('015c45eb321700000000000100100155')\n     * .then(query => {\n     *     // Utilize query here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param queryId query ID\n     * @param callback A function that is passed the arguments (error, query)\n     * @returns Promise of query\n     */\n    public getQuery(queryId: string): Promise<Query>;\n    /**\n     * Get a query\n     *\n     * Example:\n     * ```JavaScript\n     * devices.getQuery('015c45eb321700000000000100100155', function(error, query) {\n     *     if (error) throw error;\n     *     // Utilize query here\n     * });\n     * ```\n     *\n     * @param queryId query ID\n     * @param callback A function that is passed the arguments (error, query)\n     * @returns Promise of query\n     */\n    public getQuery(queryId: string, callback: CallbackFn<Query>): void;\n    public getQuery(queryId: string, callback?: CallbackFn<Query>): Promise<Query> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.directory.deviceQueryRetrieve(queryId, resultsFn);\n        }, (data, done) => {\n            const query = QueryAdapter.map(data, this);\n            done(null, query);\n        }, callback);\n    }\n\n    /**\n     * Add a query\n     *\n     * Example:\n     * ```JavaScript\n     * devices.addQuery({\n     *     name: 'TestFilter',\n     *     description: 'Description here',\n     *     filter: {\n     *         state: { $eq: \"bootstrapped\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * })\n     * .then(query => {\n     *     // Utilize query here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param query The query\n     * @returns Promise of query\n     */\n    public addQuery(query: AddQueryObject): Promise<Query>;\n    /**\n     * Add a query\n     *\n     * Example:\n     * ```JavaScript\n     * devices.addQuery({\n     *     name: 'TestFilter',\n     *     description: 'Description here',\n     *     filter: {\n     *         state: { $eq: \"bootstrapped\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * }, function(error, query) {\n     *     if (error) throw error;\n     *     // Utilize query here\n     * });\n     * ```\n     *\n     * @param query The query\n     * @param callback A function that is passed the arguments (error, query)\n     */\n    public addQuery(query: AddQueryObject, callback: CallbackFn<Query>): void;\n    public addQuery(query: AddQueryObject, callback?: CallbackFn<Query>): Promise<Query> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.directory.deviceQueryCreate(QueryAdapter.addMap(query), resultsFn);\n        }, (data, done) => {\n            const result = QueryAdapter.map(data, this);\n            done(null, result);\n        }, callback);\n    }\n\n    /**\n     * Update a query\n     *\n     * Example:\n     * ```JavaScript\n     * devices.updateQuery({\n     *     name: 'TestFilter',\n     *     id: '015c45eb321700000000000100100155',\n     *     filter: {\n     *         state: { $eq: \"bootstrapped\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * })\n     * .then(query => {\n     *     // Utilize query here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param query The query to update\n     * @returns Promise of query\n     */\n    public updateQuery(query: UpdateQueryObject): Promise<Query>;\n    /**\n     * Update a query\n     *\n     * Example:\n     * ```JavaScript\n     * devices.updateQuery({\n     *     name: 'TestFilter',\n     *     id: '015c45eb321700000000000100100155',\n     *     filter: {\n     *         state: { $eq: \"bootstrapped\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * }, function(error, query) {\n     *     if (error) throw error;\n     *     // Utilize query here\n     * });\n     * ```\n     *\n     * @param query The query to update\n     * @param callback A function that is passed the arguments (error, query)\n     */\n    public updateQuery(query: UpdateQueryObject, callback: CallbackFn<Query>): void;\n    public updateQuery(query: UpdateQueryObject, callback?: CallbackFn<Query>): Promise<Query> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.directory.deviceQueryUpdate(query.id, QueryAdapter.updateMap(query), resultsFn);\n        }, (data, done) => {\n            const result = QueryAdapter.map(data, this);\n            done(null, result);\n        }, callback);\n    }\n\n    /**\n     * Delete a query\n     *\n     * Example:\n     * ```JavaScript\n     * devices.deleteQuery('015c45eb321700000000000100100155')\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param queryId query ID\n     * @returns Promise containing any error\n     */\n    public deleteQuery(queryId: string): Promise<void>;\n    /**\n     * Delete a query\n     *\n     * Example:\n     * ```JavaScript\n     * devices.deleteQuery('015c45eb321700000000000100100155', function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param queryId query ID\n     * @param callback A function that is passed any error\n     */\n    public deleteQuery(queryId: string, callback: CallbackFn<void>): void;\n    public deleteQuery(queryId: string, callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.directory.deviceQueryDestroy(queryId, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * List device events\n     *\n     * Example:\n     * ```JavaScript\n     * devices.listDeviceEvents({\n     *     limit: 50,\n     *     filter: {\n     *         deviceId: { $eq: \"015c45eb321700000000000100100155\" },\n     *         eventDate: { $gte: new Date(\"01-01-2016\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * })\n     * .then(deviceevents => {\n     *     // Utilize deviceevents here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options filter options\n     * @returns Promise of listResponse\n     */\n    public listDeviceEvents(options?: DeviceEventListOptions): Promise<ListResponse<DeviceEvent>>;\n    /**\n     * List device events\n     *\n     * Example:\n     * ```JavaScript\n     * devices.listDeviceEvents({\n     *     limit: 50,\n     *     filter: {\n     *         deviceId: { $eq: \"015c45eb321700000000000100100155\" },\n     *         eventDate: { $gte: new Date(\"01-01-2016\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * }, function(error, deviceevents) {\n     *     if (error) throw error;\n     *     // Utilize deviceevents here\n     * });\n     * ```\n     *\n     * @param options filter options\n     * @param callback A function that is passed the return arguments (error, listResponse)\n     */\n    public listDeviceEvents(options?: DeviceEventListOptions, callback?: CallbackFn<ListResponse<DeviceEvent>>): void;\n    public listDeviceEvents(options?: any, callback?: CallbackFn<ListResponse<DeviceEvent>>): Promise<ListResponse<DeviceEvent>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, order, after, include, filter } = options as DeviceEventListOptions;\n            this._endpoints.directory.deviceLogList(limit, order, after, encodeFilter(filter, Filters.DEVICE_EVENT_FILTER_MAP), encodeInclude(include), resultsFn);\n        }, (data, done) => {\n            let list: Array<DeviceEvent>;\n            if (data.data && data.data.length) {\n                list = data.data.map(event => {\n                    return DeviceEventAdapter.map(event);\n                });\n            }\n\n            done(null, new ListResponse<DeviceEvent>(data, list));\n        }, callback);\n    }\n\n    /**\n     * Get a single device event\n     *\n     * Example:\n     * ```JavaScript\n     * devices.getDeviceEvent('015c45eb321700000000000100100155')\n     * .then(deviceevent => {\n     *     // Utilize deviceevent here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceEventId device event ID\n     * @returns Promise of device event\n     */\n    public getDeviceEvent(deviceEventId: string): Promise<DeviceEvent>;\n    /**\n     * Get a single device event\n     *\n     * Example:\n     * ```JavaScript\n     * devices.getDeviceEvent('015c45eb321700000000000100100155', function(error, deviceevent) {\n     *     if (error) throw error;\n     *     // Utilize deviceevent here\n     * });\n     * ```\n     *\n     * @param deviceEventId device event ID\n     * @param callback A function that is passed the return arguments (error, device event)\n     */\n    public getDeviceEvent(deviceEventId: string, callback: CallbackFn<DeviceEvent>): void;\n    public getDeviceEvent(deviceEventId: string, callback?: CallbackFn<DeviceEvent>): Promise<DeviceEvent> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.directory.deviceLogRetrieve(deviceEventId, resultsFn);\n        }, (data, done) => {\n            const event = DeviceEventAdapter.map(data);\n            done(null, event);\n        }, callback);\n    }\n\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @returns Promise of meta data\n     */\n    public getLastApiMetadata(): Promise<ApiMetadata>;\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @param callback A function that is passed the arguments (error, meta data)\n     */\n    public getLastApiMetadata(callback: CallbackFn<ApiMetadata>): void;\n    public getLastApiMetadata(callback?: CallbackFn<ApiMetadata>): Promise<ApiMetadata> {\n        return asyncStyle(done => {\n            done(null, this._endpoints.getLastMeta());\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}