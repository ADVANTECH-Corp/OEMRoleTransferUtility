{"version":3,"sources":["connect/connectApi.ts"],"names":[],"mappings":"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","file":"connectApi.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport superagent = require(\"superagent\");\nimport { EventEmitter } from \"events\";\nimport { ListResponse } from \"../common/listResponse\";\nimport { asyncStyle, apiWrapper, decodeBase64 } from \"../common/functions\";\nimport { CallbackFn } from \"../common/interfaces\";\nimport { SDKError } from \"../common/sdkError\";\nimport { Endpoints } from \"./endpoints\";\nimport { ConnectOptions, NotificationObject, NotificationOptions, PresubscriptionObject } from \"./types\";\nimport { Webhook } from \"./models/webhook\";\nimport { WebhookAdapter } from \"./models/webhookAdapter\";\nimport { PresubscriptionAdapter } from \"./models/presubscriptionAdapter\";\nimport { Resource } from \"./models/resource\";\nimport { ResourceAdapter } from \"./models/resourceAdapter\";\nimport { ConnectedDevice } from \"./models/connectedDevice\";\nimport { DeviceEventAdapter } from \"./models/deviceEventAdapter\";\nimport { MetricsListOptions, MetricsStartEndListOptions, MetricsPeriodListOptions } from \"./types\";\nimport { Metric } from \"./models/metric\";\nimport { MetricAdapter } from \"./models/metricAdapter\";\nimport { ApiMetadata } from \"../common/apiMetadata\";\nimport { DeviceListOptions } from \"../deviceDirectory/types\";\nimport { DeviceDirectoryApi } from \"../deviceDirectory/deviceDirectoryApi\";\nimport { executeForAll } from \"../common/pagination\";\n\n/**\n * ## Connect API\n *\n * This API is initialized with [ConnectionOptions](../interfaces/connectionoptions.html).\n *\n * To create an instance of this API in [Node.js](https://nodejs.org):\n *\n * ```JavaScript\n * var MbedCloudSDK = require(\"mbed-cloud-sdk\");\n *\n * var connect = new MbedCloudSDK.ConnectApi({\n *     apiKey: \"<Mbed Cloud API Key>\"\n * });\n * ```\n *\n * To create an instance of this API in the browser:\n *\n * ```html\n * <script src=\"<mbed-cloud-sdk>/bundles/connect.min.js\"></script>\n *\n * <script>\n *     var connect = new MbedCloudSDK.ConnectApi({\n *         apiKey: \"<Mbed Cloud API Key>\"\n *     });\n * </script>\n * ```\n *\n * ### Notification channels\n *\n * Some methods on connected device resources (e.g. `resource.getValue()`) and most events (e.g. `resource.on(\"notification\")`) require a notification channel to be set up before they will work.\n *\n * There are two options for setting up a notification channel:\n *  * Use pull notifications by using `startNotifications()` (the default which starts automatically)\n *  * Register a callback server or _webhook_ using `updateWebhook()`\n *\n * The `webhook` and `pull-notifications` examples show how this can be done.\n */\nexport class ConnectApi extends EventEmitter {\n\n    /**\n     * Resource notification event\n     * @event\n     */\n    public static EVENT_NOTIFICATION: string = \"notification\";\n\n    /**\n     * List of new devices that have registered (with resources)\n     * @event\n     */\n    public static EVENT_REGISTRATION: string = \"registration\";\n\n    /**\n     * List of devices that have updated registration\n     * @event\n     */\n    public static EVENT_REREGISTRATION: string = \"reregistration\";\n\n    /**\n     * List of devices that were removed in a controlled manner\n     * @event\n     */\n    public static EVENT_DEREGISTRATION: string = \"deregistration\";\n\n    /**\n     * List of devices that were removed because the registration has expired\n     * @event\n     */\n    public static EVENT_EXPIRED: string = \"expired\";\n\n    private readonly ASYNC_KEY = \"async-response-id\";\n\n    private _deviceDirectory: DeviceDirectoryApi;\n    private _endpoints: Endpoints;\n    private _pollRequest: superagent.SuperAgentRequest | boolean;\n    private _handleNotifications: boolean = false;\n    private _asyncFns: { [key: string]: (error: any, data: any) => any; } = {};\n    private _notifyFns: { [key: string]: (data: any) => any; } = {};\n\n    /**\n     * Whether the user will handle notifications\n     * This suppresses pull notifications for when another method is being used (such as webhooks)\n     */\n    public get handleNotifications(): boolean {\n        return this._handleNotifications;\n    }\n    public set handleNotifications(value: boolean) {\n        if (value === true) {\n            this.stopNotifications();\n        }\n        this._handleNotifications = value;\n    }\n\n    /**\n     * @param options connection objects\n     */\n    constructor(options: ConnectOptions) {\n        super();\n        this._endpoints = new Endpoints(options);\n        this._deviceDirectory = new DeviceDirectoryApi(options);\n        this._handleNotifications = options.handleNotifications;\n    }\n\n    private normalizePath(path?: string): string {\n        if (path && path.charAt(0) === \"/\") {\n            return path.substr(1);\n        }\n\n        return path;\n    }\n\n    private handleAsync<T>(data: any, done: (error: SDKError, result: T) => void): void {\n        try {\n            const asyncID = data[this.ASYNC_KEY];\n            if (asyncID) {\n                this._asyncFns[asyncID] = done;\n                return;\n            }\n        // tslint:disable-next-line:no-empty\n        } catch (_e) {}\n\n        // Cached value may be returned\n        done(null, data);\n    }\n\n    /**\n     * Allows a notification to be injected into the notifications system\n     *\n     * `handleNotifications` needs to be set to true for this to work with web hook async responses\n     *\n     * Example: (The following pushes a notification to the event emitter, which can be read back by using the `.on` function.\n     * Note that the payload is encoded in Base64)\n     *\n     * ```JavaScript\n     * var deviceID = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * var payload = \"Q2hhbmdlIG1lIQ==\";\n     *\n     * var notification = {notifications: [{ep: deviceID, path: resourceURI, payload: payload}]};\n     * connectApi.notify(notification);\n     *\n     * connectApi.on(mbed.ConnectApi.EVENT_NOTIFICATION, function(notification) {\n     *     // Do something with the notification\n     *     console.log(notification);\n     * });\n     * ```\n     * Console log:\n     * ```json\n     * { id: '015bb66a92a30000000000010010006d', path: '3200/0/5500', payload: 'Change me!'}\n     * ```\n     *\n     * @param data The notification data to inject\n     */\n    public notify(data: NotificationObject) {\n\n        // Data can be null\n        if (!data) return;\n\n        if (data.notifications) {\n            data.notifications.forEach(notification => {\n                const body = notification.payload ? decodeBase64(notification.payload, notification.ct) : null;\n                const path = `${notification.ep}${notification.path}`;\n                const fn = this._notifyFns[path];\n                if (fn) fn(body);\n\n                this.emit(ConnectApi.EVENT_NOTIFICATION, {\n                    id: notification.ep,\n                    path: notification.path,\n                    payload: body\n                });\n            });\n        }\n\n        if (data.registrations) {\n            data.registrations.forEach(device => {\n                this.emit(ConnectApi.EVENT_REGISTRATION, DeviceEventAdapter.map(device, this));\n            });\n        }\n\n        if (data[\"reg-updates\"]) {\n            data[\"reg-updates\"].forEach(device => {\n                this.emit(ConnectApi.EVENT_REREGISTRATION, DeviceEventAdapter.map(device, this));\n            });\n        }\n\n        if (data[\"de-registrations\"]) {\n            data[\"de-registrations\"].forEach(deviceId => {\n                this.emit(ConnectApi.EVENT_DEREGISTRATION, deviceId);\n            });\n        }\n\n        if (data[\"registrations-expired\"]) {\n            data[\"registrations-expired\"].forEach(deviceId => {\n                this.emit(ConnectApi.EVENT_EXPIRED, deviceId);\n            });\n        }\n\n        if (data[\"async-responses\"]) {\n            data[\"async-responses\"].forEach(response => {\n                const asyncID = response.id;\n                const fn = this._asyncFns[asyncID];\n                if (fn) {\n                    if (response.status >= 400) {\n                        const error = new SDKError(response.error || response.status, null, null, response.status);\n                        fn(error, null);\n                    } else {\n                        const body = response.payload ? decodeBase64(response.payload, response.ct) : null;\n                        fn(null, body);\n                    }\n                    delete this._asyncFns[asyncID];\n                }\n            });\n        }\n    }\n\n    /**\n     * Begins pull notifications\n     *\n     * If an external callback is not setup (using update_webhook), then calling this function is mandatory.\n     *\n     * Example:\n     * ```JavaScript\n     * connect.startNotifications()\n     * .then(() => {\n     *     console.log('Mbed Cloud SDK listening for notifications');\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options notification options\n     * @returns Promise containing any error\n     */\n    public startNotifications(options?: NotificationOptions): Promise<void>;\n    /**\n     * Begins pull notifications\n     *\n     * If an external callback is not setup (using update_webhook), then calling this function is mandatory.\n     *\n     * Example:\n     * ```JavaScript\n     * connect.startNotifications(function(error) {\n     *     if (error) return console.log(error);\n     *     console.log('Mbed Cloud SDK listening for notifications');\n     * });\n     * ```\n     *\n     * @param options notification options\n     * @param callback A function that is passed any error\n     */\n    public startNotifications(options?: NotificationOptions, callback?: CallbackFn<void>): void;\n    public startNotifications(options?: any, callback?: CallbackFn<void>): Promise<void> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return asyncStyle(done => {\n            // Don't start notifications if they are handled elsewhere or already running\n            if (this._handleNotifications || this._pollRequest) return done(null, null);\n\n            this._pollRequest = true;\n            const { interval, requestCallback, forceClear } = options;\n\n            function poll() {\n                this._pollRequest = this._endpoints.notifications.v2NotificationPullGet((error, data) => {\n\n                    if (error) return;\n                    this.notify(data);\n                    if (requestCallback && data[\"async-responses\"]) requestCallback(error, data[\"async-responses\"]);\n\n                    setTimeout(poll.bind(this), interval || 500);\n                });\n            }\n\n            function start() {\n                poll.call(this);\n                done(null, null);\n            }\n\n            if (forceClear) return this.deleteWebhook(start.bind(this));\n\n            this.getWebhook((error, webhook) => {\n                if (error) return done(error, null);\n                if (webhook) return done(new SDKError(`Webhook already exists at ${webhook.url}`), null);\n                start.call(this);\n            });\n        }, callback);\n    }\n\n    /**\n     * Stops pull notifications\n     *\n     * Example:\n     * ```JavaScript\n     * connect.stopNotifications()\n     * .then(() => {\n     *     console.log('Mbed Cloud SDK stopped listening for notifications');\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @returns Promise containing any error\n     */\n    public stopNotifications(): Promise<void>;\n    /**\n     * Stops pull notifications\n     *\n     * Example:\n     * ```JavaScript\n     * connect.stopNotifications(function(error) {\n     *     if (error) throw error;\n     *     console.log('Mbed Cloud SDK stopped listening for notifications');\n     * });\n     * ```\n     *\n     * @param callback A function that is passed any error\n     */\n    public stopNotifications(callback: CallbackFn<void>): void;\n    public stopNotifications(callback?: CallbackFn<void>): Promise<void> {\n        return asyncStyle(done => {\n            this._endpoints.notifications.v2NotificationPullDelete(() => {\n                if (this._pollRequest) {\n                    // tslint:disable-next-line:no-string-literal\n                    if (this._pollRequest[\"abort\"]) this._pollRequest[\"abort\"]();\n                    this._pollRequest = null;\n                }\n\n                done(null, null);\n            });\n        }, callback);\n    }\n\n    /**\n     * Get the current callback URL if it exists\n     *\n     * Example:\n     * ```JavaScript\n     * connect.getWebhook()\n     * .then(webhook => {\n     *     // Utilize webhook here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @returns Promise containing the webhook data\n     */\n    public getWebhook(): Promise<Webhook>;\n    /**\n     * Get the current callback URL if it exists\n     *\n     * Example:\n     * ```JavaScript\n     * connect.getWebhook(function(error, webhook) {\n     *     if (error) throw error;\n     *     // Utilize webhook here\n     * });\n     * ```\n     *\n     * @param callback A function that is passed the arguments (error, webhook)\n     */\n    public getWebhook(callback: CallbackFn<Webhook>): void;\n    public getWebhook(callback?: CallbackFn<Webhook>): Promise<Webhook> {\n        return asyncStyle(done => {\n            this._endpoints.notifications.v2NotificationCallbackGet((error, data) => {\n\n                if (error) {\n                    if (error.code === 404) {\n                        // No webhook\n                        return done(null, null);\n                    }\n                    return done(error);\n                }\n\n                const webhook = WebhookAdapter.map(data);\n                done(null, webhook);\n            });\n        }, callback);\n    }\n\n    /**\n     * Register new webhook for incoming subscriptions.\n     *\n     * If a webhook is already set, this will do an overwrite.\n     *\n     * Example:\n     * ```JavaScript\n     * connect.updateWebhook(url)\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param url The URL to which the notifications must be sent\n     * @param headers Any headers (key/value) that must be sent with the request\n     * @param forceClear Whether to clear any existing notification channel\n     * @returns Promise containing any error\n     */\n    public updateWebhook(url: string, headers?: { [key: string]: string; }, forceClear?: boolean): Promise<void>;\n    /**\n     * Register new webhook for incoming subscriptions.\n     *\n     * If a webhook is already set, this will do an overwrite.\n     *\n     * Example:\n     * ```JavaScript\n     * connect.updateWebhook(url, function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param url The URL to which the notifications must be sent\n     * @param headers Any headers (key/value) that must be sent with the request\n     * @param forceClear Whether to clear any existing notification channel\n     * @param callback A function that is passed any error\n     */\n    public updateWebhook(url: string, headers?: { [key: string]: string; }, forceClear?: boolean, callback?: CallbackFn<void>): void;\n    public updateWebhook(url: string, headers?: any, forceClear?: any, callback?: CallbackFn<void>): Promise<void> {\n        headers = headers || {};\n        forceClear = forceClear || false;\n        if (typeof forceClear === \"function\") {\n            callback = forceClear;\n            forceClear = false;\n        }\n        if (typeof headers === \"function\") {\n            callback = headers;\n            headers = {};\n        }\n\n        return asyncStyle(done => {\n\n            function update() {\n                this._endpoints.notifications.v2NotificationCallbackPut({\n                    url: url,\n                    headers: headers\n                }, error => {\n                    if (error) return done(error);\n                    done(null, null);\n                });\n            }\n\n            if (forceClear) {\n                this._handleNotifications = true;\n                this.stopNotifications(update.bind(this));\n            // } else if (this._pollRequest) {\n            //    return done(new SDKError(\"Pull notifications are already running\"), null);\n            } else {\n                update.call(this);\n            }\n        }, callback);\n    }\n\n    /**\n     * Deletes the callback data (effectively stopping Mbed Cloud Connect from putting notifications)\n     *\n     * If no webhook is registered, an exception (404) will be raised.\n     *\n     * Note that every registered subscription will be deleted as part of deregistering a webhook.\n     *\n     * Example:\n     * ```JavaScript\n     * connect.deleteWebhook()\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @returns Promise containing any error\n     */\n    public deleteWebhook(): Promise<void>;\n    /**\n     * Deletes the callback data (effectively stopping Mbed Cloud Connect from putting notifications)\n     *\n     * If no webhook is registered, an exception (404) will be raised.\n     *\n     * Note that every registered subscription will be deleted as part of deregistering a webhook.\n     *\n     * Example:\n     * ```JavaScript\n     * connect.deleteWebhook(function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param callback A function that is passed any error\n     */\n    public deleteWebhook(callback: CallbackFn<void>): void;\n    public deleteWebhook(callback?: CallbackFn<void>): Promise<void> {\n        return asyncStyle(done => {\n            this._endpoints.notifications.v2NotificationCallbackDelete(() => {\n                done(null, null);\n            });\n        }, callback);\n    }\n\n    /**\n     * Gets a list of pre-subscription data\n     *\n     * Example:\n     * ```JavaScript\n     * connect.listPresubscriptions()\n     * .then(presubscriptions => {\n     *     // Utilize presubscriptions here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @returns Promise containing pre-subscriptions\n     */\n    public listPresubscriptions(): Promise<Array<PresubscriptionObject>>;\n    /**\n     * Gets a list of pre-subscription data\n     *\n     * Example:\n     * ```JavaScript\n     * connect.listPresubscriptions(function(error, presubscriptions) {\n     *     if (error) throw error;\n     *     // Utilize presubscriptions here\n     * });\n     * ```\n     *\n     * @param callback A function that is passed (error, pre-subscriptions)\n     */\n    public listPresubscriptions(callback: CallbackFn<Array<PresubscriptionObject>>): void;\n    public listPresubscriptions(callback?: CallbackFn<Array<PresubscriptionObject>>): Promise<Array<PresubscriptionObject>> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.subscriptions.v2SubscriptionsGet(resultsFn);\n        }, (data, done) => {\n            const presubs = data.map(PresubscriptionAdapter.map);\n            done(null, presubs);\n        }, callback);\n    }\n\n    /**\n     * Update pre-subscription data\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceID = \"015bb66a92a30000000000010010006d\";\n     * var subscriptions = [{deviceId: deviceID}];\n     * connect.updatePresubscriptions(subscriptions)\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param subscriptions The pre-subscription data array. If you send an empty array, the pre-subscription data will be removed\n     * @returns Promise containing any error\n     */\n    public updatePresubscriptions(subscriptions: Array<PresubscriptionObject>): Promise<void>;\n    /**\n     * Update pre-subscription data\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceID = \"015bb66a92a30000000000010010006d\";\n     * var subscriptions = [{deviceId: deviceID}];\n     * connect.updatePresubscriptions(subscriptions, function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param subscriptions The pre-subscription data array. If you send an empty array, the pre-subscription data will be removed\n     * @param callback A function that is passed any error\n     */\n    public updatePresubscriptions(subscriptions: Array<PresubscriptionObject>, callback: CallbackFn<void>): void;\n    public updatePresubscriptions(subscriptions: Array<PresubscriptionObject>, callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            const presubs = subscriptions.map(PresubscriptionAdapter.reverseMap);\n            this._endpoints.subscriptions.v2SubscriptionsPut(presubs, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * Deletes pre-subscription data\n     *\n     * Example:\n     * ```JavaScript\n     * connect.deletePresubscriptions()\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @returns Promise containing any error\n     */\n    public deletePresubscriptions(): Promise<void>;\n    /**\n     * Deletes pre-subscription data\n     *\n     * Example:\n     * ```JavaScript\n     * connect.deletePresubscriptions(function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param callback A function that is passed any error\n     */\n    public deletePresubscriptions(callback: CallbackFn<void>): void;\n    public deletePresubscriptions(callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.subscriptions.v2SubscriptionsPut([], resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * Removes all subscriptions for all devices.\n     *\n     * Warning: This could be slow for large numbers of connected devices.\n     * If possible, explicitly delete subscriptions known to have been created.\n     *\n     * Example:\n     * ```JavaScript\n     * connect.deleteSubscriptions()\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @returns Promise containing any error\n     */\n    public deleteSubscriptions(): Promise<void>;\n    /**\n     * Removes all subscriptions for all devices.\n     *\n     * Warning: This could be slow for large numbers of connected devices.\n     * If possible, explicitly delete subscriptions known to have been created.\n     *\n     * Example:\n     * ```JavaScript\n     * connect.deleteSubscriptions(function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param callback A function that is passed any error\n     */\n    public deleteSubscriptions(callback: CallbackFn<void>): void;\n    public deleteSubscriptions(callback?: CallbackFn<void>): Promise<void> {\n        return asyncStyle(done => {\n            executeForAll(this.listConnectedDevices.bind(this), this.deleteDeviceSubscriptions.bind(this))\n                .then(() => done(null), done);\n        }, callback);\n    }\n\n    /**\n     * List connected devices\n     *\n     * Example:\n     * ```JavaScript\n     * connect.listConnectedDevices({\n     *     filter: {\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * })\n     * .then(devices => {\n     *     // Utilize devices here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options list options\n     * @returns Promise of connected devices\n     */\n    public listConnectedDevices(options?: DeviceListOptions): Promise<ListResponse<ConnectedDevice>>;\n    /**\n     * List connected devices\n     *\n     * Example:\n     * ```JavaScript\n     * connect.listConnectedDevices({\n     *     filter: {\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * }, function(error, devices) {\n     *     if (error) throw error;\n     *     // Utilize devices here\n     * });\n     * ```\n     *\n     * @param options list options\n     * @param callback A function that is passed the arguments (error, devices)\n     */\n    public listConnectedDevices(options?: DeviceListOptions, callback?: CallbackFn<ListResponse<ConnectedDevice>>): void;\n    public listConnectedDevices(options?: any, callback?: CallbackFn<ListResponse<ConnectedDevice>>): Promise<ListResponse<ConnectedDevice>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        // Grab all connected devices\n        options.filter = options.filter || {};\n        options.filter.state = \"registered\";\n\n        return apiWrapper(resultsFn => {\n            this._deviceDirectory.listDevices(options, resultsFn);\n        }, (data, done) => {\n            const devices = data.data.map(device => {\n                return new ConnectedDevice(device, this);\n            });\n\n            done(null, new ListResponse<ConnectedDevice>(data, devices));\n        }, callback);\n    }\n\n    /**\n     * List a device's subscriptions\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * connect.listDeviceSubscriptions(deviceId)\n     * .then(subscriptions => {\n     *     // Utilize subscriptions here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @returns Promise containing the subscriptions\n     */\n    public listDeviceSubscriptions(deviceId: string): Promise<string>;\n    /**\n     * List a device's subscriptions\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * connect.listDeviceSubscriptions(deviceId, function(error, subscriptions) {\n     *     if (error) throw error;\n     *     // Utilize subscriptions here\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param callback A function that is passed (error, subscriptions)\n     */\n    public listDeviceSubscriptions(deviceId: string, callback: CallbackFn<string>): void;\n    public listDeviceSubscriptions(deviceId: string, callback?: CallbackFn<string>): Promise<string> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.subscriptions.v2SubscriptionsDeviceIdGet(deviceId, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * Removes a device's subscriptions\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * connect.deleteDeviceSubscriptions(deviceId)\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @returns Promise containing any error\n     */\n    public deleteDeviceSubscriptions(deviceId: string): Promise<void>;\n    /**\n     * Removes a device's subscriptions\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * connect.deleteDeviceSubscriptions(deviceId, function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param callback A function that is passed any error\n     */\n    public deleteDeviceSubscriptions(deviceId: string, callback: CallbackFn<void>): void;\n    public deleteDeviceSubscriptions(deviceId: string, callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.subscriptions.v2SubscriptionsDeviceIdDelete(deviceId, resultsFn);\n        }, (data, done) => {\n            Object.keys(this._notifyFns).forEach(key => {\n                if (key.indexOf(`${deviceId}/`) === 0) {\n                    delete this._notifyFns[key];\n                }\n            });\n\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * List device's resources\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * connect.listResources(deviceId)\n     * .then(resources => {\n     *     for (var resource in resources) {\n     *         // Utilize resource here\n     *         console.log(resources[resource]);\n     *     }\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @returns Promise of device resources\n     */\n    public listResources(deviceId: string): Promise<Array<Resource>>;\n    /**\n     * List device's resources\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * connect.listResources(deviceId, function(error, resources) {\n     *     if (error) throw error;\n     *     for (var resource in resources) {\n     *         // Utilize resource here\n     *         console.log(resources[resource]);\n     *     }\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param callback A function that is passed the arguments (error, resources)\n     */\n    public listResources(deviceId: string, callback: CallbackFn<Array<Resource>>): void;\n    public listResources(deviceId: string, callback?: CallbackFn<Array<Resource>>): Promise<Array<Resource>> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.endpoints.v2EndpointsDeviceIdGet(deviceId, resultsFn);\n        }, (data, done) => {\n            const resources = data.map(resource => {\n                return ResourceAdapter.map(resource, deviceId, this);\n            });\n\n            done(null, resources);\n        }, callback);\n    }\n\n    /**\n     * Get a resource\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * connect.getResource(deviceId, resourceURI)\n     * .then(resource => {\n     *     // Utilize resource here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Path of the resource to get\n     * @returns Promise of device resource\n     */\n    public getResource(deviceId: string, resourcePath: string): Promise<Resource>;\n    /**\n     * Get a resource\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * connect.getResource(deviceId, resourceURI, function(error, resource) {\n     *     if (error) throw error;\n     *     // Utilize resource here\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Path of the resource to get\n     * @param callback A function that is passed the arguments (error, resource)\n     */\n    public getResource(deviceId: string, resourcePath: string, callback?: CallbackFn<Resource>): void;\n    public getResource(deviceId: string, resourcePath: string, callback?: CallbackFn<Resource>): Promise<Resource> {\n        resourcePath = this.normalizePath(resourcePath);\n\n        return apiWrapper(resultsFn => {\n            this._endpoints.endpoints.v2EndpointsDeviceIdGet(deviceId, resultsFn);\n        }, (data, done) => {\n            const found = data.find(resource => {\n                return this.normalizePath(resource.uri) === resourcePath;\n            });\n\n            if (!found) {\n                return done(new SDKError(\"Resource not found\"), null);\n            }\n\n            done(null, ResourceAdapter.map(found, deviceId, this));\n        }, callback);\n    }\n\n    /**\n     * Gets the value of a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * connect.getResourceValue(deviceId, resourceURI)\n     * .then(data => {\n     *     // Utilize data here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Resource path\n     * @param cacheOnly If true, the response will come only from the cache\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The requested mime type format of the value\n     * @returns Promise of resource value\n     */\n    public getResourceValue(deviceId: string, resourcePath: string, cacheOnly?: boolean, noResponse?: boolean, mimeType?: string): Promise<string | number | void>;\n    /**\n     * Gets the value of a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * connect.getResourceValue(deviceId, resourceURI, function(error, data) {\n     *     if (error) throw error;\n     *     // Utilize data here\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Resource path\n     * @param cacheOnly If true, the response will come only from the cache\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The requested mime type format of the value\n     * @param callback A function that is passed the arguments (error, value)\n     */\n    public getResourceValue(deviceId: string, resourcePath: string, cacheOnly?: boolean, noResponse?: boolean, mimeType?: string, callback?: CallbackFn<string | number | void>): void;\n    public getResourceValue(deviceId: string, resourcePath: string, cacheOnly?: any, noResponse?: any, mimeType?: any, callback?: CallbackFn<string | number | void>): Promise<string | number | void> {\n        resourcePath = this.normalizePath(resourcePath);\n\n        cacheOnly = cacheOnly || false;\n        noResponse = noResponse || false;\n        if (typeof mimeType === \"function\") {\n            callback = mimeType;\n            mimeType = null;\n        }\n        if (typeof noResponse === \"function\") {\n            callback = noResponse;\n            noResponse = false;\n        }\n        if (typeof cacheOnly === \"function\") {\n            callback = cacheOnly;\n            cacheOnly = false;\n        }\n\n        return apiWrapper(resultsFn => {\n            this.startNotifications(null, error => {\n                if (error) return resultsFn(error, null);\n                this._endpoints.resources.v2EndpointsDeviceIdResourcePathGet(deviceId, resourcePath, cacheOnly, noResponse, resultsFn, {\n                    acceptHeader: mimeType\n                });\n            });\n        }, this.handleAsync.bind(this), callback);\n    }\n\n    /**\n     * Sets the value of a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * var payload = \"ChangeMe!\";\n     * connect.setResourceValue(deviceId, resourceURI, payload)\n     * .then(response => {\n     *     // Utilize response here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Resource path\n     * @param value The value of the resource\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The mime type format of the value\n     * @returns empty Promise\n     */\n    public setResourceValue(deviceId: string, resourcePath: string, value: string, noResponse?: boolean, mimeType?: string): Promise<void>;\n    /**\n     * Sets the value of a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * var payload = \"ChangeMe!\";\n     * connect.setResourceValue(deviceId, resourceURI, payload, function(error, response) {\n     *     if (error) throw error;\n     *     // Utilize response here\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Resource path\n     * @param value The value of the resource\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The mime type format of the value\n     * @param callback A function that is passed any error\n     */\n    public setResourceValue(deviceId: string, resourcePath: string, value: string, noResponse?: boolean, mimeType?: string, callback?: CallbackFn<void>): void;\n    public setResourceValue(deviceId: string, resourcePath: string, value: string, noResponse?: any, mimeType?: any, callback?: CallbackFn<void>): Promise<void> {\n        resourcePath = this.normalizePath(resourcePath);\n\n        noResponse = noResponse || false;\n        if (typeof mimeType === \"function\") {\n            callback = mimeType;\n            mimeType = null;\n        }\n        if (typeof noResponse === \"function\") {\n            callback = noResponse;\n            noResponse = false;\n        }\n\n        return apiWrapper(resultsFn => {\n            this.startNotifications(null, error => {\n                if (error) return resultsFn(error, null);\n                this._endpoints.resources.v2EndpointsDeviceIdResourcePathPut(deviceId, resourcePath, value, noResponse, resultsFn, {\n                    contentType: mimeType\n                });\n            });\n        }, this.handleAsync.bind(this), callback);\n    }\n\n    /**\n     * Execute a function on a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * connect.executeResource(deviceId, resourceURI)\n     * .then(response => {\n     *     // Utilize response here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Resource path\n     * @param functionName The function to trigger\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The mime type format of the value\n     * @returns empty Promise\n     */\n    public executeResource(deviceId: string, resourcePath: string, functionName?: string, noResponse?: boolean, mimeType?: string): Promise<void>;\n    /**\n     * Execute a function on a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * connect.executeResource(deviceId, resourceURI, function(error, response) {\n     *     if (error) throw error;\n     *     // Utilize response here\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Resource path\n     * @param functionName The function to trigger\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The mime type format of the value\n     * @param callback A function that is passed any error\n     */\n    public executeResource(deviceId: string, resourcePath: string, functionName?: string, noResponse?: boolean, mimeType?: string, callback?: CallbackFn<void>): void;\n    public executeResource(deviceId: string, resourcePath: string, functionName?: any, noResponse?: any, mimeType?: any, callback?: CallbackFn<void>): Promise<void> {\n        resourcePath = this.normalizePath(resourcePath);\n\n        noResponse = noResponse || false;\n        if (typeof mimeType === \"function\") {\n            callback = mimeType;\n            mimeType = null;\n        }\n        if (typeof noResponse === \"function\") {\n            callback = noResponse;\n            noResponse = false;\n        }\n        if (typeof functionName === \"function\") {\n            callback = functionName;\n            functionName = null;\n        }\n\n        return apiWrapper(resultsFn => {\n            this.startNotifications(null, error => {\n                if (error) return resultsFn(error, null);\n                this._endpoints.resources.v2EndpointsDeviceIdResourcePathPost(deviceId, resourcePath, functionName, noResponse, resultsFn, {\n                    contentType: mimeType\n                });\n            });\n        }, this.handleAsync.bind(this), callback);\n    }\n\n    /**\n     * Gets the status of a resource's subscription\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * connect.getResourceSubscription(deviceId, resourceURI)\n     * .then(res_exists => {\n     *     // Utilize res_exists here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Resource path\n     * @returns Promise containing resource subscription status\n     */\n    public getResourceSubscription(deviceId: string, resourcePath: string): Promise<boolean>;\n    /**\n     * Gets the status of a resource's subscription\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * connect.getResourceSubscription(deviceId, resourceURI, function(error, res_exists) {\n     *     if (error) throw error;\n     *     // Utilize res_exists here\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Resource path\n     * @param callback A function that is passed (error, subscribed) where subscribed is true or false\n     */\n    public getResourceSubscription(deviceId: string, resourcePath: string, callback: CallbackFn<boolean>): void;\n    public getResourceSubscription(deviceId: string, resourcePath: string, callback?: CallbackFn<boolean>): Promise<boolean> {\n        resourcePath = this.normalizePath(resourcePath);\n\n        return asyncStyle(done => {\n            this._endpoints.subscriptions.v2SubscriptionsDeviceIdResourcePathGet(deviceId, resourcePath, error => {\n                return done(null, !error);\n            });\n        }, callback);\n    }\n\n    /**\n     * Subscribe to a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * connect.addResourceSubscription(deviceId, resourceURI, data => {\n     *     // Utilize data here - which is the updated value in resourceURI\n     * })\n     * .then(asyncId => {\n     *     // Utilize asyncId here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Resource path\n     * @param notifyFn Function to call with notification\n     * @returns empty Promise\n     */\n    public addResourceSubscription(deviceId: string, resourcePath: string, notifyFn?: (data: any) => any): Promise<void>;\n    /**\n     * Subscribe to a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * connect.addResourceSubscription(deviceId, resourceURI, function(data) {\n     *      // Utilize data here - which is the updated value in resourceURI\n     * }, function(error, asyncId) {\n     *     if (error) throw error;\n     *     // Utilize asyncId here\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Resource path\n     * @param notifyFn Function to call with notification\n     * @param callback A function that is passed any error\n     */\n    public addResourceSubscription(deviceId: string, resourcePath: string, notifyFn?: (data: any) => any, callback?: CallbackFn<void>): void;\n    public addResourceSubscription(deviceId: string, resourcePath: string, notifyFn?: (data: any) => any, callback?: CallbackFn<void>): Promise<void> {\n        resourcePath = this.normalizePath(resourcePath);\n\n        return apiWrapper(resultsFn => {\n            this.startNotifications(null, error => {\n                if (error) return resultsFn(error, null);\n                this._endpoints.subscriptions.v2SubscriptionsDeviceIdResourcePathPut(deviceId, resourcePath, resultsFn);\n            });\n        }, (data, done) => {\n            if (notifyFn) {\n                // Record the function at this path for notifications\n                this._notifyFns[`${deviceId}/${resourcePath}`] = notifyFn;\n            }\n            this.handleAsync(data, done);\n        }, callback);\n    }\n\n    /**\n     * Deletes a resource's subscription\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * connect.deleteResourceSubscription(deviceId, resourceURI)\n     * .then(response => {\n     *     // Utilize response here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Resource path\n     * @returns empty Promise\n     */\n    public deleteResourceSubscription(deviceId: string, resourcePath: string): Promise<void>;\n    /**\n     * Deletes a resource's subscription\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     *\n     * Example:\n     * ```JavaScript\n     * var deviceId = \"015bb66a92a30000000000010010006d\";\n     * var resourceURI = \"3200/0/5500\";\n     * connect.deleteResourceSubscription(deviceId, resourceURI, function(error, response) {\n     *     if (error) throw error;\n     *     // Utilize response here\n     * });\n     * ```\n     *\n     * @param deviceId Device ID\n     * @param resourcePath Resource path\n     * @param callback A function that is passed any error\n     */\n    public deleteResourceSubscription(deviceId: string, resourcePath: string, callback: CallbackFn<void>): void;\n    public deleteResourceSubscription(deviceId: string, resourcePath: string, callback?: CallbackFn<void>): Promise<void> {\n        resourcePath = this.normalizePath(resourcePath);\n\n        return apiWrapper(resultsFn => {\n            this.startNotifications(null, error => {\n                if (error) return resultsFn(error, null);\n                this._endpoints.subscriptions.v2SubscriptionsDeviceIdResourcePathDelete(deviceId, resourcePath, resultsFn);\n            });\n        }, (data, done) => {\n            // no-one is listening :(\n            delete this._notifyFns[`${deviceId}/${resourcePath}`];\n            this.handleAsync(data, done);\n        }, callback);\n    }\n\n    /**\n     * List metrics\n     *\n     * Example: (The following will retrieve metrics regarding pending and failed device registrations in the last day)\n     * ```JavaScript\n     * var today = new Date();\n     * var yesterday = new Date();\n     * yesterday.setDate(yesterday.getDate() - 1);\n     * var options = {start: yesterday, end: today, include: [\"pendingBootstraps\", \"failedBootstraps\"]};\n     * connect.listMetrics(options)\n     * .then(metrics => {\n     *     // Utilize metrics here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options metrics options\n     * @returns Promise of metrics\n     */\n    public listMetrics(options: MetricsStartEndListOptions | MetricsPeriodListOptions): Promise<ListResponse<Metric>>;\n    /**\n     * List metrics\n     *\n     * Example: (The following will retrieve metrics regarding pending and failed device registrations in the last day)\n     * ```JavaScript\n     * var today = new Date();\n     * var yesterday = new Date();\n     * yesterday.setDate(yesterday.getDate() - 1);\n     * var options = {start: yesterday, end: today, include: [\"pendingBootstraps\", \"failedBootstraps\"]};\n     * connect.listMetrics(options, function(error, metrics) {\n     *     if (error) throw error;\n     *     // Utilize metrics here\n     * });\n     * ```\n     *\n     * @param options metrics options\n     * @param callback A function that is passed the return arguments (error, metrics)\n     */\n    public listMetrics(options: MetricsStartEndListOptions | MetricsPeriodListOptions, callback: CallbackFn<ListResponse<Metric>>): void;\n    public listMetrics(options: MetricsStartEndListOptions | MetricsPeriodListOptions, callback?: CallbackFn<ListResponse<Metric>>): Promise<ListResponse<Metric>> {\n        return apiWrapper(resultsFn => {\n            function isPeriod(test: MetricsStartEndListOptions | MetricsPeriodListOptions): test is MetricsPeriodListOptions {\n                return (test as MetricsPeriodListOptions).period !== undefined;\n            }\n\n            const { limit, after, order, include, interval } = options as MetricsListOptions;\n\n            let start = null;\n            let end = null;\n            let period = null;\n\n            if (isPeriod(options)) {\n                period = MetricAdapter.mapTimePeriod(options.period);\n            } else {\n                start = options.start;\n                end = options.end;\n            }\n\n            this._endpoints.statistics.v3MetricsGet(MetricAdapter.mapIncludes(include), MetricAdapter.mapTimePeriod(interval), start, end, period, limit, after, order, resultsFn);\n        }, (data, done) => {\n            let metrics: Array<Metric> = [];\n\n            if (data.data && data.data.length) {\n                metrics = data.data.map(metric => {\n                    return MetricAdapter.map(metric);\n                });\n            }\n\n            done(null, new ListResponse<Metric>(data, metrics));\n        }, callback);\n    }\n\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @returns Promise of meta data\n     */\n    public getLastApiMetadata(): Promise<ApiMetadata>;\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @param callback A function that is passed the arguments (error, meta data)\n     */\n    public getLastApiMetadata(callback: CallbackFn<ApiMetadata>): void;\n    public getLastApiMetadata(callback?: CallbackFn<ApiMetadata>): Promise<ApiMetadata> {\n        return asyncStyle(done => {\n            done(null, this._endpoints.getLastMeta());\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}