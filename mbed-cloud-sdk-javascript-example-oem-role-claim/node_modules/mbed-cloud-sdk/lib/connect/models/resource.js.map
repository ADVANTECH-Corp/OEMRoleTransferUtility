{"version":3,"sources":["connect/models/resource.ts"],"names":[],"mappings":"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","file":"resource.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { EventEmitter } from \"events\";\nimport { CallbackFn } from \"../../common/interfaces\";\nimport { asyncStyle } from \"../../common/functions\";\nimport { ConnectApi } from \"../connectApi\";\n\n/**\n * Resource\n */\nexport class Resource extends EventEmitter {\n\n    /**\n     * Resource notification event which returns the notification when handling notifications, otherwise an asyncId\n     * @event\n     */\n    public static EVENT_NOTIFICATION: string = \"notification\";\n\n    /**\n     * Related device ID\n     */\n    public readonly deviceId: string;\n    /**\n     * Resource's URL\n     */\n    public readonly path: string;\n    /**\n     * Resource's type\n     */\n    public readonly type: string;\n    /**\n     * The content type of the resource\n     */\n    public readonly contentType: string;\n    /**\n     * Whether you can subscribe to changes for this resource\n     */\n    public readonly observable: boolean;\n\n    constructor(init?: Partial<Resource>, private _api?: ConnectApi) {\n        super();\n        for (const key in init) {\n            if (init.hasOwnProperty(key)) {\n                this[key] = init[key];\n            }\n        }\n\n        this.on(\"newListener\", eventName => {\n            if (eventName === Resource.EVENT_NOTIFICATION) {\n                this.addSubscription(data => this.emit(Resource.EVENT_NOTIFICATION, data));\n            }\n        });\n\n        this.on(\"removeListener\", eventName => {\n            if (eventName === Resource.EVENT_NOTIFICATION) {\n                if (this.listenerCount(Resource.EVENT_NOTIFICATION) === 0) {\n                    this.deleteSubscription();\n                }\n            }\n        });\n    }\n\n    /**\n     * Subscribe to a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param notifyFn Function to call with notification\n     * @returns empty Promise\n     */\n    private addSubscription(notifyFn?: (any) => any): Promise<void>;\n    /**\n     * Subscribe to a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param notifyFn Function to call with notification\n     * @param callback A function that is passed any error\n     */\n    private addSubscription(notifyFn?: (any) => any, callback?: CallbackFn<void>): void;\n    private addSubscription(notifyFn?: (any) => any, callback?: CallbackFn<void>): Promise<void> {\n        return asyncStyle(done => {\n            if (!this.observable) return done(null, null);\n            this._api.addResourceSubscription(this.deviceId, this.path, notifyFn, done);\n        }, callback);\n    }\n\n    /**\n     * Deletes a resource's subscription\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @returns empty Promise\n     */\n    private deleteSubscription(): Promise<void>;\n    /**\n     * Deletes a resource's subscription\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param callback A function that is passed any error\n     */\n    private deleteSubscription(callback: CallbackFn<void>): void;\n    private deleteSubscription(callback?: CallbackFn<void>): Promise<void> {\n        return asyncStyle(done => {\n            this._api.deleteResourceSubscription(this.deviceId, this.path, done);\n        }, callback);\n    }\n\n    /**\n     * Gets the value of a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param cacheOnly If true, the response will come only from the cache\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The requested mime type format of the value\n     * @returns Promise of resource value\n     */\n    public getValue(cacheOnly?: boolean, noResponse?: boolean, mimeType?: string): Promise<string | number | void>;\n    /**\n     * Gets the value of a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param cacheOnly If true, the response will come only from the cache\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The requested mime type format of the value\n     * @param callback A function that is passed the arguments (error, value) where value is the resource value\n     */\n    public getValue(cacheOnly?: boolean, noResponse?: boolean, mimeType?: string, callback?: CallbackFn<string | number | void>): void;\n    public getValue(cacheOnly?: any, noResponse?: any, mimeType?: any, callback?: CallbackFn<string | number | void>): Promise<string | number | void> {\n        cacheOnly = cacheOnly || false;\n        noResponse = noResponse || false;\n        if (typeof mimeType === \"function\") {\n            callback = mimeType;\n            mimeType = null;\n        }\n        if (typeof noResponse === \"function\") {\n            callback = noResponse;\n            noResponse = false;\n        }\n        if (typeof cacheOnly === \"function\") {\n            callback = cacheOnly;\n            cacheOnly = false;\n        }\n\n        return asyncStyle(done => {\n            this._api.getResourceValue(this.deviceId, this.path, cacheOnly, noResponse, mimeType, done);\n        }, callback);\n    }\n\n    /**\n     * Sets the value of a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param value The value of the resource\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The mime type format of the value\n     * @returns empty Promise\n     */\n    public setValue(value: string, noResponse?: boolean, mimeType?: string): Promise<void>;\n    /**\n     * Sets the value of a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param value The value of the resource\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The mime type format of the value\n     * @param callback A function that is passed any error\n     */\n    public setValue(value: string, noResponse?: boolean, mimeType?: string, callback?: CallbackFn<void>): void;\n    public setValue(value: string, noResponse?: any, mimeType?: any, callback?: CallbackFn<void>): Promise<void> {\n        noResponse = noResponse || false;\n        if (typeof mimeType === \"function\") {\n            callback = mimeType;\n            mimeType = null;\n        }\n        if (typeof noResponse === \"function\") {\n            callback = noResponse;\n            noResponse = false;\n        }\n\n        return asyncStyle(done => {\n            this._api.setResourceValue(this.deviceId, this.path, value, noResponse, mimeType, done);\n        }, callback);\n    }\n\n    /**\n     * Execute a function on a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param functionName The function to trigger\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The mime type format of the value\n     * @returns empty Promise\n     */\n    public execute(functionName?: string, noResponse?: boolean, mimeType?: string): Promise<void>;\n    /**\n     * Execute a function on a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param functionName The function to trigger\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The mime type format of the value\n     * @param callback A function that is passed any error\n     */\n    public execute(functionName?: string, noResponse?: boolean, mimeType?: string, callback?: CallbackFn<void>): void;\n    public execute(functionName?: any, noResponse?: any, mimeType?: any, callback?: CallbackFn<void>): Promise<void> {\n        noResponse = noResponse || false;\n        if (typeof mimeType === \"function\") {\n            callback = mimeType;\n            mimeType = null;\n        }\n        if (typeof noResponse === \"function\") {\n            callback = noResponse;\n            noResponse = false;\n        }\n        if (typeof functionName === \"function\") {\n            callback = functionName;\n            functionName = null;\n        }\n\n        return asyncStyle(done => {\n            this._api.executeResource(this.deviceId, this.path, functionName, noResponse, mimeType, done);\n        }, callback);\n    }\n\n    /**\n     * Gets the status of a resource's subscription\n     * @returns Promise containing resource subscription status\n     */\n    public getSubscription(): Promise<boolean>;\n    /**\n     * Gets the status of a resource's subscription\n     * @param callback A function that is passed (error, subscribed) where subscribed is true or false\n     */\n    public getSubscription(callback: CallbackFn<boolean>): void;\n    public getSubscription(callback?: CallbackFn<boolean>): Promise<boolean> {\n        return asyncStyle(done => {\n            if (!this.observable) return done(null, false);\n            this._api.getResourceSubscription(this.deviceId, this.path, done);\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../../src"}