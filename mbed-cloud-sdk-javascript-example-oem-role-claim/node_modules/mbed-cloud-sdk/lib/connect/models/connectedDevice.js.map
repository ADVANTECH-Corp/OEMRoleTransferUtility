{"version":3,"sources":["connect/models/connectedDevice.ts"],"names":[],"mappings":"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","file":"connectedDevice.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { CallbackFn } from \"../../common/interfaces\";\nimport { asyncStyle } from \"../../common/functions\";\nimport { ConnectApi } from \"../connectApi\";\nimport { Resource } from \"./resource\";\nimport { Device } from \"../../deviceDirectory/models/device\";\n\n/**\n * Connected Device\n */\nexport class ConnectedDevice extends Device {\n\n    constructor(init?: Partial<Device>, private _connectApi?: ConnectApi) {\n        super();\n        for (const key in init) {\n            if (init.hasOwnProperty(key)) {\n                this[key] = init[key];\n            }\n        }\n    }\n\n    /**\n     * List device's resources\n     * @returns Promise of device resources\n     */\n    public listResources(): Promise<Array<Resource>>;\n    /**\n     * List device's resources\n     * @param callback A function that is passed the arguments (error, resources)\n     */\n    public listResources(callback: CallbackFn<Array<Resource>>): void;\n    public listResources(callback?: CallbackFn<Array<Resource>>): Promise<Array<Resource>> {\n        return asyncStyle(done => {\n            this._connectApi.listResources(this.id, done);\n        }, callback);\n    }\n\n    /**\n     * Get a resource\n     *\n     * @param resourcePath Path of the resource to get\n     * @returns Promise of device resource\n     */\n    public getResource(resourcePath: string): Promise<Resource>;\n    /**\n     * Get a resource\n     *\n     * @param resourcePath Path of the resource to get\n     * @param callback A function that is passed the arguments (error, resource)\n     */\n    public getResource(resourcePath: string, callback?: CallbackFn<Resource>): void;\n    public getResource(resourcePath: string, callback?: CallbackFn<Resource>): Promise<Resource> {\n\n        return asyncStyle(done => {\n            this._connectApi.getResource(this.id, resourcePath, done);\n        }, callback);\n    }\n\n    /**\n     * List a device's subscriptions\n     * @returns Promise containing the subscriptions\n     */\n    public listSubscriptions(): Promise<string>;\n    /**\n     * List a device's subscriptions\n     * @param callback A function that is passed (error, subscriptions)\n     */\n    public listSubscriptions(callback: CallbackFn<string>): void;\n    public listSubscriptions(callback?: CallbackFn<string>): Promise<string> {\n        return asyncStyle(done => {\n            this._connectApi.listDeviceSubscriptions(this.id, done);\n        }, callback);\n    }\n\n    /**\n     * Removes a device's subscriptions\n     * @returns empty Promise\n     */\n    public deleteSubscriptions(): Promise<void>;\n    /**\n     * Removes a device's subscriptions\n     * @param callback A function that is passed any error\n     */\n    public deleteSubscriptions(callback: CallbackFn<void>): void;\n    public deleteSubscriptions(callback?: CallbackFn<void>): Promise<void> {\n        return asyncStyle(done => {\n            this._connectApi.deleteDeviceSubscriptions(this.id, done);\n        }, callback);\n    }\n\n    /**\n     * Gets the value of a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param resourcePath Resource path\n     * @param cacheOnly If true, the response will come only from the cache\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The requested mime type format of the value\n     * @returns Promise of resource value\n     */\n    public getResourceValue(resourcePath: string, cacheOnly?: boolean, noResponse?: boolean, mimeType?: string): Promise<string | number | void>;\n    /**\n     * Gets the value of a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param resourcePath Resource path\n     * @param cacheOnly If true, the response will come only from the cache\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The requested mime type format of the value\n     * @param callback A function that is passed the arguments (error, value) where value is the resource value\n     */\n    public getResourceValue(resourcePath: string, cacheOnly?: boolean, noResponse?: boolean, mimeType?: string, callback?: CallbackFn<string | number | void>): void;\n    public getResourceValue(resourcePath: string, cacheOnly?: any, noResponse?: any, mimeType?: any, callback?: CallbackFn<string | number | void>): Promise<string | number | void> {\n        cacheOnly = cacheOnly || false;\n        noResponse = noResponse || false;\n        if (typeof mimeType === \"function\") {\n            callback = mimeType;\n            mimeType = null;\n        }\n        if (typeof noResponse === \"function\") {\n            callback = noResponse;\n            noResponse = false;\n        }\n        if (typeof cacheOnly === \"function\") {\n            callback = cacheOnly;\n            cacheOnly = false;\n        }\n\n        return asyncStyle(done => {\n            this._connectApi.getResourceValue(this.id, resourcePath, cacheOnly, noResponse, mimeType, done);\n        }, callback);\n    }\n\n    /**\n     * Sets the value of a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param resourcePath Resource path\n     * @param value The value of the resource\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The mime type format of the value\n     * @returns empty Promise\n     */\n    public setResourceValue(resourcePath: string, value: string, noResponse?: boolean, mimeType?: string): Promise<void>;\n    /**\n     * Sets the value of a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param resourcePath Resource path\n     * @param value The value of the resource\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The mime type format of the value\n     * @param callback A function that is passed any error\n     */\n    public setResourceValue(resourcePath: string, value: string, noResponse?: boolean, mimeType?: string, callback?: CallbackFn<void>): void;\n    public setResourceValue(resourcePath: string, value: string, noResponse?: any, mimeType?: any, callback?: CallbackFn<void>): Promise<void> {\n        noResponse = noResponse || false;\n        if (typeof mimeType === \"function\") {\n            callback = mimeType;\n            mimeType = null;\n        }\n        if (typeof noResponse === \"function\") {\n            callback = noResponse;\n            noResponse = false;\n        }\n\n        return asyncStyle(done => {\n            this._connectApi.setResourceValue(this.id, resourcePath, value, noResponse, mimeType, done);\n        }, callback);\n    }\n\n    /**\n     * Execute a function on a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param resourcePath Resource path\n     * @param functionName The function to trigger\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The mime type format of the value\n     * @returns empty Promise\n     */\n    public executeResource(resourcePath: string, functionName?: string, noResponse?: boolean, mimeType?: string): Promise<void>;\n    /**\n     * Execute a function on a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param resourcePath Resource path\n     * @param functionName The function to trigger\n     * @param noResponse If true, Mbed Device Connector will not wait for a response\n     * @param mimeType The mime type format of the value\n     * @param callback A function that is passed any error\n     */\n    public executeResource(resourcePath: string, functionName?: string, noResponse?: boolean, mimeType?: string, callback?: CallbackFn<void>): void;\n    public executeResource(resourcePath: string, functionName?: any, noResponse?: any, mimeType?: any, callback?: CallbackFn<void>): Promise<void> {\n        noResponse = noResponse || false;\n        if (typeof mimeType === \"function\") {\n            callback = mimeType;\n            mimeType = null;\n        }\n        if (typeof noResponse === \"function\") {\n            callback = noResponse;\n            noResponse = false;\n        }\n        if (typeof functionName === \"function\") {\n            callback = functionName;\n            functionName = null;\n        }\n\n        return asyncStyle(done => {\n            this._connectApi.executeResource(this.id, resourcePath, functionName, noResponse, mimeType, done);\n        }, callback);\n    }\n\n    /**\n     * Gets the status of a resource's subscription\n     * @param resourcePath Resource path\n     * @returns Promise containing resource subscription status\n     */\n    public getResourceSubscription(resourcePath: string): Promise<boolean>;\n    /**\n     * Gets the status of a resource's subscription\n     * @param resourcePath Resource path\n     * @param callback A function that is passed (error, subscribed) where subscribed is true or false\n     */\n    public getResourceSubscription(resourcePath: string, callback: CallbackFn<boolean>): void;\n    public getResourceSubscription(resourcePath: string, callback?: CallbackFn<boolean>): Promise<boolean> {\n        return asyncStyle(done => {\n            this._connectApi.getResourceSubscription(this.id, resourcePath, done);\n        }, callback);\n    }\n\n    /**\n     * Subscribe to a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param resourcePath Resource path\n     * @param notifyFn Function to call with notification\n     * @returns empty Promise\n     */\n    public addResourceSubscription(resourcePath: string, notifyFn?: (any) => any): Promise<void>;\n    /**\n     * Subscribe to a resource\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param resourcePath Resource path\n     * @param notifyFn Function to call with notification\n     * @param callback A function that is passed any error\n     */\n    public addResourceSubscription(resourcePath: string, notifyFn?: (any) => any, callback?: CallbackFn<void>): void;\n    public addResourceSubscription(resourcePath: string, notifyFn?: (any) => any, callback?: CallbackFn<void>): Promise<void> {\n        return asyncStyle(done => {\n            this._connectApi.addResourceSubscription(this.id, resourcePath, notifyFn, done);\n        }, callback);\n    }\n\n    /**\n     * Deletes a resource's subscription\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param resourcePath Resource path\n     * @returns empty Promise\n     */\n    public deleteResourceSubscription(resourcePath: string): Promise<void>;\n    /**\n     * Deletes a resource's subscription\n     *\n     * __Note:__ This method requires a notification channel to be set up\n     * @param resourcePath Resource path\n     * @param callback A function that is passed any error\n     */\n    public deleteResourceSubscription(resourcePath: string, callback: CallbackFn<void>): void;\n    public deleteResourceSubscription(resourcePath: string, callback?: CallbackFn<void>): Promise<void> {\n        return asyncStyle(done => {\n            this._connectApi.deleteResourceSubscription(this.id, resourcePath, done);\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../../src"}