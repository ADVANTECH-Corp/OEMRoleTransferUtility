{"version":3,"sources":["enrollment/enrollmentApi.ts"],"names":[],"mappings":"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","file":"enrollmentApi.js","sourcesContent":["/*\n * Mbed Cloud JavaScript SDK\n * Copyright Arm Limited 2018\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { apiWrapper, encodeInclude, asyncStyle } from \"../common/functions\";\nimport { Endpoints } from \"./endpoints\";\nimport { CallbackFn, ConnectionOptions, ListOptions } from \"../common/interfaces\";\nimport { AddEnrollmentClaim } from \"./types\";\nimport { EnrollmentClaim } from \"./models/enrollmentClaim\";\nimport { ListResponse } from \"../common/listResponse\";\nimport * as EnrollmentAdapter from \"./models/enrollmentClaimAdapter\";\nimport { ApiMetadata } from \"../common/apiMetadata\";\n\nexport class EnrollmentApi {\n    private readonly _endpoints: Endpoints;\n\n    /**\n     * @param options Connection objects\n     */\n    constructor(options: ConnectionOptions) {\n        this._endpoints = new Endpoints(options);\n    }\n\n    /**\n     * Place an enrollment claim for a device.\n     *\n     * Example:\n     * ```JavaScript\n     * enrollment.addEnrollmentClaim({\n     *     claimId: 'A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5'\n     * })\n     * .then(enrollmentClaim => {\n     *     // Utilize claim here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param enrollmentClaim Claim details\n     * @returns Promise of enrollment claim\n     */\n    public addEnrollmentClaim(enrollmentClaim: AddEnrollmentClaim): Promise<EnrollmentClaim>;\n    /**\n     * Place an enrollment claim for a device.\n     *\n     * Example:\n     * ```JavaScript\n     * enrollment.addEnrollmentClaim({\n     *     claimId: 'A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5'\n     * }, function(error, enrollmentClaim) {\n     *     if (error) throw error;\n     *     // Utilize enrollment claim here\n     * });\n     * ```\n     *\n     * @param enrollmentClaim Claim details\n     * @param callback A function that is passed the arguments (error, enrollmentClaim)\n     */\n    public addEnrollmentClaim(enrollmentClaim: AddEnrollmentClaim, callback: CallbackFn<EnrollmentClaim>): void;\n    public addEnrollmentClaim(enrollmentClaim: AddEnrollmentClaim, callback?: CallbackFn<EnrollmentClaim>): Promise<EnrollmentClaim> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.enrollment.createDeviceEnrollment(EnrollmentAdapter.addMap(enrollmentClaim), resultsFn);\n        }, (data, done) => {\n            done(null, EnrollmentAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Gets details of an enrollment.\n     *\n     * Example:\n     * ```JavaScript\n     * enrollment.getEnrollmentClaim('sckv52bebji8dxnxuw3zvnon95u8gshm'')\n     * .then(enrollmentClaim => {\n     *     // Utilize enrollment claim here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param claimId Enrollment claim ID\n     * @returns Promise of enrollment claim\n     */\n    public getEnrollmentClaim(claimId: string): Promise<EnrollmentClaim>;\n    /**\n     * Gets details of an enrollment.\n     *\n     * Example:\n     * ```JavaScript\n     * enrollment.getEnrollmentClaim('sckv52bebji8dxnxuw3zvnon95u8gshm', function(error, enrollmentClaim) {\n     *     if (error) throw error;\n     *     // Utilize claim here\n     * });\n     * ```\n     *\n     * @param claimId Enrollment claim ID\n     * @param callback A function that is passed the arguments (error, enrollmentClaim)\n     */\n    public getEnrollmentClaim(claimId: string, callback: CallbackFn<EnrollmentClaim>): void;\n    public getEnrollmentClaim(claimId: string, callback?: CallbackFn<EnrollmentClaim>): Promise<EnrollmentClaim> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.enrollment.getDeviceEnrollment(claimId, resultsFn);\n        }, (data, done) => {\n            done(null, EnrollmentAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Get enrollment list.\n     *\n     * Example:\n     * ```JavaScript\n     * enrollment.listEnrollmentClaims({\n     *     limit: 100\n     * })\n     * .then(claims => {\n     *     // Utilize claims here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options list options\n     * @returns Promise of devices\n     */\n    public listEnrollmentClaims(options?: ListOptions): Promise<ListResponse<EnrollmentClaim>>;\n    /**\n     * Get enrollment list.\n     *\n     * Example:\n     * ```JavaScript\n     * enrollment.listEnrollmentClaims({\n     *     limit: 100\n     * }, function(error, claims) {\n     *     if (error) throw error;\n     *     // Utilize claims here\n     * });\n     * ```\n     *\n     * @param options List options or callback\n     * @param callback A function that is passed the arguments (error, claims)\n     */\n    public listEnrollmentClaims(options?: ListOptions, callback?: CallbackFn<ListResponse<EnrollmentClaim>>): void;\n    public listEnrollmentClaims(options?: any, callback?: CallbackFn<ListResponse<EnrollmentClaim>>): Promise<ListResponse<EnrollmentClaim>> {\n        options = options || {};\n\n        if (typeof options === \"function\") {\n            callback = options;\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, after, order, include } = options;\n            this._endpoints.enrollment.getDeviceEnrollments(limit, order, after, encodeInclude(include), resultsFn);\n        }, (data, done) => {\n            const devices = data.data.map(device => {\n                return EnrollmentAdapter.map(device, this);\n            });\n\n            done(null, new ListResponse<EnrollmentClaim>(data, devices));\n        }, callback);\n    }\n\n    /**\n     * Delete an enrollment claim.\n     *\n     * Example:\n     * ```JavaScript\n     * enrollment.deleteEnrollmentClaim('sckv52bebji8dxnxuw3zvnon95u8gshm')\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param claimId Enrollment claim ID\n     * @returns Promise containing any error\n     */\n    public deleteEnrollmentClaim(claimId: string): Promise<void>;\n    /**\n     *\n     * Delete an enrollment claim.\n     *\n     * Example:\n     * ```JavaScript\n     * enrollment.deleteEnrollmentClaim('sckv52bebji8dxnxuw3zvnon95u8gshm')\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param claimId Device ID\n     * @param callback A function that is passed any error\n     */\n    public deleteEnrollmentClaim(claimId: string, callback: CallbackFn<void>): void;\n    public deleteEnrollmentClaim(claimId: string, callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.enrollment.deleteDeviceEnrollment(claimId, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @returns Promise of meta data\n     */\n    public getLastApiMetadata(): Promise<ApiMetadata>;\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @param callback A function that is passed the arguments (error, meta data)\n     */\n    public getLastApiMetadata(callback: CallbackFn<ApiMetadata>): void;\n    public getLastApiMetadata(callback?: CallbackFn<ApiMetadata>): Promise<ApiMetadata> {\n        return asyncStyle(done => {\n            done(null, this._endpoints.getLastMeta());\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}