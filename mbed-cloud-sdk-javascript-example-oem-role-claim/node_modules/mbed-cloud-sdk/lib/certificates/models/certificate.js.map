{"version":3,"sources":["certificates/models/certificate.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;AAEF,oDAAoD;AAKpD;;GAEG;AACH;IAkEI,qBAAY,IAA0B,EAAU,IAAsB;QAAtB,SAAI,GAAJ,IAAI,CAAkB;QAjDtE;;WAEG;QACI,mBAAc,GAAa,KAAK,CAAC;QA+CpC,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;QACL,CAAC;IACL,CAAC;IAcM,4BAAM,GAAb,UAAc,SAAiB,EAAE,QAAkC;QAAnE,iBAYC;QAXG,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBACxB,EAAE,EAAkB,KAAI,CAAC,EAAE;gBAC3B,SAAS,EAAW,SAAS;gBAC7B,IAAI,EAAgB,KAAI,CAAC,IAAI;gBAC7B,MAAM,EAAc,KAAI,CAAC,MAAM;gBAC/B,eAAe,EAAK,KAAI,CAAC,eAAe;gBACxC,IAAI,EAAgB,KAAI,CAAC,IAAI;gBAC7B,WAAW,EAAS,KAAI,CAAC,WAAW;aACvC,EAAE,IAAI,CAAC,CAAC;QACb,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAYM,4BAAM,GAAb,UAAc,QAA2B;QAAzC,iBAIC;QAHG,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC/C,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IACL,kBAAC;AAAD,CAnHA,AAmHC,IAAA;AAnHY,kCAAW","file":"certificate.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { asyncStyle } from \"../../common/functions\";\nimport { CallbackFn } from \"../../common/interfaces\";\nimport { AddDeveloperCertificateObject, CertificateTypeEnum, CertificateStatusEnum } from \"../types\";\nimport { CertificatesApi } from \"../certificatesApi\";\n\n/**\n * Certificate\n */\nexport class Certificate {\n    /**\n     * Entity ID.\n     */\n    public readonly id: string;\n    /**\n     * Certificate type\n     */\n    public type: CertificateTypeEnum;\n    /**\n     * Status of the certificate\n     */\n    public status?: CertificateStatusEnum;\n    /**\n     * X509.v3 CA certificate in PEM or base64 encoded DER format\n     */\n    public certificateData: string;\n    /**\n     * If true, signature parameter is not required. Default value is false.\n     */\n    public enrollmentMode?: boolean = false;\n    /**\n     * The UUID of the account.\n     */\n    public readonly accountId: string;\n    /**\n     * Subject of the certificate.\n     */\n    public readonly subject: string;\n    /**\n     * Expiration Date.\n     */\n    public readonly validity: Date;\n    /**\n     * Issuer of the certificate.\n     */\n    public readonly issuer: string;\n    /**\n     * The timestamp when this certfcate was created.\n     */\n    public readonly createdAt?: Date;\n    /**\n     * The UUID of the certificate owner (user or ApiKey).\n     */\n    public readonly ownerId?: string;\n    /**\n     * Bootstrap server URI to which the client needs to connect to.\n     */\n    public readonly serverUri?: string;\n    /**\n     * PEM format X.509 server certificate that will be used to validate the server certificate and will be received during the TLS/DTLS handshake.\n     */\n    public readonly serverCertificate?: string;\n    /**\n     * Content of the security.c file that will be flashed into the device to provide the security credentials.\n     */\n    public readonly headerFile?: string;\n    /**\n     * PEM format X.509 developer certificate.\n     */\n    public readonly developerCertificate?: string;\n    /**\n     * PEM format developer private key associated to the certificate.\n     */\n    public readonly developerPrivateKey?: string;\n\n    constructor(init: Partial<Certificate>, private _api?: CertificatesApi) {\n        for (const key in init) {\n            if (init.hasOwnProperty(key)) {\n                this[key] = init[key];\n            }\n        }\n    }\n\n    /**\n     * Updates the certificate\n     * @param signature Base64 encoded signature of the account ID signed by the certificate to be uploaded. Signature must be hashed with SHA256\n     * @returns Promise containing certificate\n     */\n    public update(signature: string): Promise<Certificate>;\n    /**\n     * Updates the certificate\n     * @param signature Base64 encoded signature of the account ID signed by the certificate to be uploaded. Signature must be hashed with SHA256\n     * @param callback A function that is passed the return arguments (error, certificate)\n     */\n    public update(signature: string, callback: CallbackFn<Certificate>): void;\n    public update(signature: string, callback?: CallbackFn<Certificate>): Promise<Certificate> {\n        return asyncStyle(done => {\n            this._api.updateCertificate({\n                id:                 this.id,\n                signature:          signature,\n                type:               this.type,\n                status:             this.status,\n                certificateData:    this.certificateData,\n                name:               this.name,\n                description:        this.description\n            }, done);\n        }, callback);\n    }\n\n    /**\n     * Delete the certificate\n     * @returns Promise containing any error\n     */\n    public delete(): Promise<void>;\n    /**\n     * Delete the certificate\n     * @param callback A function that is passed any error\n     */\n    public delete(callback?: CallbackFn<void>): void;\n    public delete(callback?: CallbackFn<void>): Promise<void> {\n        return asyncStyle(done => {\n            this._api.deleteCertificate(this.id, done);\n        }, callback);\n    }\n}\nexport interface Certificate extends AddDeveloperCertificateObject {}\n"],"sourceRoot":"../../../src"}