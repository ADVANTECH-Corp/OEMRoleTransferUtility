{"version":3,"sources":["certificates/models/certificateAdapter.ts"],"names":[],"mappings":"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","file":"certificateAdapter.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { CertificatesApi } from \"../certificatesApi\";\nimport { Certificate } from \"./certificate\";\nimport { AddCertificateObject, AddDeveloperCertificateObject, UpdateCertificateObject } from \"../types\";\nimport {\n    TrustedCertificateReq as iamCertificateRequest,\n    TrustedCertificateUpdateReq as iamCertificateUpdate,\n    TrustedCertificateResp as iamCertificate\n} from \"../../_api/iam\";\nimport {\n    DeveloperCertificateRequestData as caCertificateRequest,\n    ServerCredentialsResponseData as serverResponse,\n    DeveloperCertificateResponseData as developerResponse\n} from \"../../_api/connector_ca\";\n\n/**\n * Certificate Adapter\n */\nexport class CertificateAdapter {\n\n    private static map(from: iamCertificate): Partial<Certificate> {\n        return {\n            id                   : from.id,\n            name                 : from.name,\n            description          : from.description,\n            type                 : from.device_execution_mode === 1 ? \"developer\" : from.service,\n            status               : from.status,\n            accountId            : from.account_id,\n            certificateData      : from.certificate,\n            createdAt            : from.created_at,\n            issuer               : from.issuer,\n            subject              : from.subject,\n            validity             : from.validity,\n            ownerId              : from.owner_id,\n            enrollmentMode       : from.enrollment_mode || false,\n            serverUri            : null,\n            serverCertificate    : null,\n            headerFile           : null,\n            developerCertificate : null,\n            developerPrivateKey  : null,\n        };\n    }\n\n    public static mapCertificate(from: iamCertificate, api: CertificatesApi): Certificate {\n        return new Certificate(CertificateAdapter.map(from), api);\n    }\n\n    public static mapServerCertificate(from: iamCertificate, api: CertificatesApi, extension: serverResponse): Certificate {\n        const partial: any = CertificateAdapter.map(from);\n\n        partial.serverUri = extension.server_uri;\n        partial.serverCertificate = extension.server_certificate;\n\n        return new Certificate(partial, api);\n    }\n\n    public static mapDeveloperCertificate(from: iamCertificate, api: CertificatesApi, extension: developerResponse): Certificate {\n        const partial: any = CertificateAdapter.map(from);\n\n        partial.serverUri = extension.server_uri;\n        partial.serverCertificate = extension.server_certificate;\n        partial.headerFile = extension.security_file_content;\n        partial.developerCertificate = extension.developer_certificate;\n        partial.developerPrivateKey = extension.developer_private_key;\n\n        return new Certificate(partial, api);\n    }\n\n    public static reverseMap(from: AddCertificateObject): iamCertificateRequest {\n        return {\n            certificate:     from.certificateData,\n            name:            from.name,\n            service:         from.type === \"developer\" ? \"bootstrap\" : from.type,\n            status:          from.status,\n            signature:       from.signature,\n            enrollment_mode: from.enrollmentMode,\n            description:     from.description\n        };\n    }\n\n    public static reverseUpdateMap(from: UpdateCertificateObject): iamCertificateUpdate {\n        return {\n            certificate:     from.certificateData,\n            name:            from.name,\n            service:         from.type === \"developer\" ? \"bootstrap\" : from.type,\n            status:          from.status,\n            signature:       from.signature,\n            enrollment_mode: from.enrollmentMode,\n            description:     from.description\n        };\n    }\n\n    public static reverseDeveloperMap(from: AddDeveloperCertificateObject): caCertificateRequest {\n        return {\n            name:           from.name,\n            description:    from.description\n        };\n    }\n}\n"],"sourceRoot":"../../../src"}