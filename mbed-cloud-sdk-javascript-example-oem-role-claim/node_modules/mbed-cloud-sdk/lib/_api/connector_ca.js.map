{"version":3,"sources":["_api/connector_ca.ts"],"names":[],"mappings":"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","file":"connector_ca.js","sourcesContent":["/* tslint:disable:array-type */\n/* tslint:disable:no-namespace */\n/* tslint:disable:no-string-literal */\n/* tslint:disable:max-classes-per-file */\n/* tslint:disable:no-trailing-whitespace */\n\n// ===============================================\n// This file is autogenerated - Please do not edit\n// Tracks base typescript-fetch mustache 01/02/17\n// ===============================================\n\n/**\n * Connect CA API\n * Connect CA API provides methods to create and get Developer certificate. Also Connect CA provides server-credentials for Bootstarp and LWM2M Server.\n *\n * OpenAPI spec version: 3\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport superagent = require(\"superagent\");\nimport { ApiBase } from \"../common/apiBase\";\nimport { SDKError } from \"../common/sdkError\";\n\nexport interface DeveloperCertificateRequestData {\n    /**\n     * The name of the developer certificate, must be unique.\n     */\n    \"name\": string;\n    /**\n     * A description for the developer certificate.\n     */\n    \"description\"?: string;\n}\n\nexport interface DeveloperCertificateResponseData {\n    /**\n     * The content of the `security.c` file that is flashed into the device to provide the security credentials\n     */\n    \"security_file_content\"?: string;\n    /**\n     * Description for the developer certificate.\n     */\n    \"description\"?: string;\n    /**\n     * The name of the developer certificate.\n     */\n    \"name\"?: string;\n    /**\n     * The PEM format X.509 developer certificate.\n     */\n    \"developer_certificate\"?: string;\n    /**\n     * The URI to which the client needs to connect to.\n     */\n    \"server_uri\"?: string;\n    /**\n     * Creation UTC time RFC3339.\n     */\n    \"created_at\"?: string;\n    /**\n     * Entity name, always `trusted-cert`.\n     */\n    \"object\"?: string;\n    /**\n     * The PEM format developer private key associated to the certificate.\n     */\n    \"developer_private_key\"?: string;\n    /**\n     * The PEM format X.509 server certificate that is used to validate the server certificate that is received during the TLS/DTLS handshake.\n     */\n    \"server_certificate\"?: string;\n    /**\n     * API resource entity version.\n     */\n    \"etag\"?: string;\n    /**\n     * The mUUID that uniquely identifies the developer certificate.\n     */\n    \"id\"?: string;\n    /**\n     * The account to which the developer certificate belongs.\n     */\n    \"account_id\"?: string;\n}\n\nexport interface ServerCredentialsResponseData {\n    /**\n     * The server URI to which the client needs to connect to.\n     */\n    \"server_uri\"?: string;\n    /**\n     * Creation UTC time RFC3339.\n     */\n    \"created_at\"?: string;\n    /**\n     * The entity name, always `server-credentials`.\n     */\n    \"object\"?: string;\n    /**\n     * The PEM format X.509 server certificate that is used to validate the server certificate that is received during the TLS/DTLS handshake.\n     */\n    \"server_certificate\"?: string;\n    /**\n     * API resource entity version.\n     */\n    \"etag\"?: string;\n    /**\n     * The mUUID that uniquely identifies the entity.\n     */\n    \"id\"?: string;\n}\n\n/**\n * DeveloperCertificateApi\n */\nexport class DeveloperCertificateApi extends ApiBase {\n\n    /**\n     * Fetch an existing developer certificate to connect to the bootstrap server.\n     * This REST API is intended to be used by customers to fetch an existing developer certificate (a certificate that can be flashed into multiple devices to connect to bootstrap server). \n     * @param muuid A unique identifier for the developer certificate. \n     * @param authorization Bearer {Access Token}. \n     */\n    public v3DeveloperCertificatesMuuidGet(muuid: string, authorization: string, callback?: (error: any, data?: DeveloperCertificateResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"muuid\" is set\n        if (muuid === null || muuid === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'muuid' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<DeveloperCertificateResponseData>({\n            url: \"/v3/developer-certificates/{muuid}\".replace(\"{\" + \"muuid\" + \"}\", String(muuid)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Create a new developer certificate to connect to the bootstrap server.\n     * This REST API is intended to be used by customers to get a developer certificate (a certificate that can be flashed into multiple devices to connect to bootstrap server).  Limitations:    - One developer certificate allows up to 100 devices to connect to bootstrap server.   - Only 10 developer certificates are allowed per account. \n     * @param authorization Bearer {Access Token}. \n     * @param body \n     */\n    public v3DeveloperCertificatesPost(authorization: string, body: DeveloperCertificateRequestData, callback?: (error: any, data?: DeveloperCertificateResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<DeveloperCertificateResponseData>({\n            url: \"/v3/developer-certificates\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n            body: body,\n        }, callback);\n    }\n}\n/**\n * ExternalAPIApi\n */\nexport class ExternalAPIApi extends ApiBase {\n\n    /**\n     * Fetch an existing developer certificate to connect to the bootstrap server.\n     * This REST API is intended to be used by customers to fetch an existing developer certificate (a certificate that can be flashed into multiple devices to connect to bootstrap server). \n     * @param muuid A unique identifier for the developer certificate. \n     * @param authorization Bearer {Access Token}. \n     */\n    public v3DeveloperCertificatesMuuidGet(muuid: string, authorization: string, callback?: (error: any, data?: DeveloperCertificateResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"muuid\" is set\n        if (muuid === null || muuid === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'muuid' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<DeveloperCertificateResponseData>({\n            url: \"/v3/developer-certificates/{muuid}\".replace(\"{\" + \"muuid\" + \"}\", String(muuid)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Create a new developer certificate to connect to the bootstrap server.\n     * This REST API is intended to be used by customers to get a developer certificate (a certificate that can be flashed into multiple devices to connect to bootstrap server).  Limitations:    - One developer certificate allows up to 100 devices to connect to bootstrap server.   - Only 10 developer certificates are allowed per account. \n     * @param authorization Bearer {Access Token}. \n     * @param body \n     */\n    public v3DeveloperCertificatesPost(authorization: string, body: DeveloperCertificateRequestData, callback?: (error: any, data?: DeveloperCertificateResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<DeveloperCertificateResponseData>({\n            url: \"/v3/developer-certificates\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Fetch bootstrap server credentials.\n     * This REST API is intended to be used by customers to fetch bootstrap server credentials that they need to use with their clients to connect to bootstrap server. \n     * @param authorization Bearer {Access Token}. \n     */\n    public v3ServerCredentialsBootstrapGet(authorization: string, callback?: (error: any, data?: ServerCredentialsResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ServerCredentialsResponseData>({\n            url: \"/v3/server-credentials/bootstrap\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Fetch LWM2M server credentials.\n     * This REST API is intended to be used by customers to fetch LWM2M server credentials that they need to use with their clients to connect to LWM2M server. \n     * @param authorization Bearer {Access Token}. \n     */\n    public v3ServerCredentialsLwm2mGet(authorization: string, callback?: (error: any, data?: ServerCredentialsResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ServerCredentialsResponseData>({\n            url: \"/v3/server-credentials/lwm2m\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n}\n/**\n * ServerCredentialsApi\n */\nexport class ServerCredentialsApi extends ApiBase {\n\n    /**\n     * Fetch bootstrap server credentials.\n     * This REST API is intended to be used by customers to fetch bootstrap server credentials that they need to use with their clients to connect to bootstrap server. \n     * @param authorization Bearer {Access Token}. \n     */\n    public v3ServerCredentialsBootstrapGet(authorization: string, callback?: (error: any, data?: ServerCredentialsResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ServerCredentialsResponseData>({\n            url: \"/v3/server-credentials/bootstrap\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Fetch LWM2M server credentials.\n     * This REST API is intended to be used by customers to fetch LWM2M server credentials that they need to use with their clients to connect to LWM2M server. \n     * @param authorization Bearer {Access Token}. \n     */\n    public v3ServerCredentialsLwm2mGet(authorization: string, callback?: (error: any, data?: ServerCredentialsResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ServerCredentialsResponseData>({\n            url: \"/v3/server-credentials/lwm2m\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}