/* tslint:disable:array-type */
/* tslint:disable:no-namespace */
/* tslint:disable:no-string-literal */
/* tslint:disable:max-classes-per-file */
/* tslint:disable:no-trailing-whitespace */

// ===============================================
// This file is autogenerated - Please do not edit
// Tracks base typescript-fetch mustache 01/02/17
// ===============================================

/**
 * Enrollment API
 * Mbed Cloud Connect Enrollment Service allows users to claim the ownership of a device which is not yet assigned to an account. A device without an assigned account can be a device purchased from the open market (OEM dealer) or a device trasferred from an account to another. More information in [Device overship: First-to-claim](TODO: link needed) document. 
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import superagent = require("superagent");
import { ApiBase } from "../common/apiBase";
import { SDKError } from "../common/sdkError";

export interface EnrollmentId {
    /**
     * Enrollment identity.
     */
    "enrollment_identity"?: string;
}

export namespace EnrollmentIdentities {
    export type ObjectEnum = "list";
    export type OrderEnum = "ASC" | "DESC";
}
export interface EnrollmentIdentities {
    /**
     * muuid
     */
    "after": string;
    "data": Array<EnrollmentIdentity>;
    "has_more": boolean;
    /**
     * Range 2-1000, or default.
     */
    "limit": number;
    "object": EnrollmentIdentities.ObjectEnum;
    "order": EnrollmentIdentities.OrderEnum;
    "total_count": number;
}

export namespace EnrollmentIdentity {
    export type ObjectEnum = "enrollment";
}
export interface EnrollmentIdentity {
    /**
     * muuid
     */
    "account_id": string;
    /**
     * The time of claiming the device to be assigned to the account.
     */
    "claimed_at"?: Date;
    /**
     * The time of the enrollment identity creation.
     */
    "created_at": Date;
    /**
     * The ID of the device in the Device Directory once it has been registered.
     */
    "device_id"?: string;
    /**
     * Enrolled device internal ID
     */
    "enrolled_device_id"?: string;
    /**
     * Enrollment identity.
     */
    "enrollment_identity"?: string;
    "etag": string;
    /**
     * The enrollment claim expiration time. If the device does not connect to Mbed Cloud before the expiration, the claim is removed without a separate notice
     */
    "expires_at": Date;
    /**
     * Enrollment identity internal id
     */
    "id": string;
    "object"?: EnrollmentIdentity.ObjectEnum;
}

export namespace ErrorResponse {
    export type CodeEnum = "400" | "401" | "404";
    export type ObjectEnum = "error";
    export type TypeEnum = "validation_error" | "invalid_token" | "invalid_apikey" | "reauth_required" | "access_denied" | "account_limit_exceeded" | "not_found" | "method_not_supported" | "not_acceptable" | "duplicate" | "precondition_failed" | "unsupported_media_type" | "rate_limit_exceeded" | "internal_server_error" | "system_unavailable";
}
export interface ErrorResponse {
    /**
     * Response code.
     */
    "code"?: ErrorResponse.CodeEnum;
    /**
     * Failed input fields during request object validation.
     */
    "fields"?: Array<Field>;
    /**
     * A human readable message with detailed info.
     */
    "message"?: string;
    /**
     * Entity name, always 'error'.
     */
    "object"?: ErrorResponse.ObjectEnum;
    /**
     * Request ID (muuid).
     */
    "request_id"?: string;
    /**
     * Error type.
     */
    "type"?: ErrorResponse.TypeEnum;
}

export interface Field {
    /**
     * A message describing the error situation.
     */
    "message"?: string;
    /**
     * The name of the erroneous field.
     */
    "name"?: string;
}

/**
 * PublicAPIApi
 */
export class PublicAPIApi extends ApiBase {

    /**
     * Place an enrollment claim for one or several devices.
     * When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account. 
     * @param enrollmentIdentity 
     */
    public createDeviceEnrollment(enrollmentIdentity: EnrollmentId, callback?: (error: any, data?: EnrollmentIdentity, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {
        // verify required parameter "enrollmentIdentity" is set
        if (enrollmentIdentity === null || enrollmentIdentity === undefined) {
            if (callback) {
                callback(new SDKError("Required parameter 'enrollmentIdentity' missing."));
            }
            return;
        }

        const headerParams: any = {};

        const queryParameters: any = {};

        // tslint:disable-next-line:prefer-const
        let useFormData = false;
        const formParams: any = {};

        // Determine the Content-Type header
        const contentTypes: Array<string> = [
            "application/json"
        ];

        // Determine the Accept header
        const acceptTypes: Array<string> = [
            "application/json"
        ];

        return this.request<EnrollmentIdentity>({
            url: "/v3/device-enrollments",
            method: "POST",
            headers: headerParams,
            query: queryParameters,
            formParams: formParams,
            useFormData: useFormData,
            contentTypes: contentTypes,
            acceptTypes: acceptTypes,
            requestOptions: requestOptions,
            body: enrollmentIdentity,
        }, callback);
    }
    /**
     * Delete an enrollment by ID.
     * To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information on the ownership trasfer, see [https://github.com/ARMmbed/mbed_Cloud_Docs/blob/restructure/Docs/provisioning/generic_instructions/device-ownership.md#transferring-ownership-using-first-to-claim](TODO put the right link).
     * @param id Enrollment identity internal id
     */
    public deleteDeviceEnrollment(id: string, callback?: (error: any, data?: any, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {
        // verify required parameter "id" is set
        if (id === null || id === undefined) {
            if (callback) {
                callback(new SDKError("Required parameter 'id' missing."));
            }
            return;
        }

        const headerParams: any = {};

        const queryParameters: any = {};

        // tslint:disable-next-line:prefer-const
        let useFormData = false;
        const formParams: any = {};

        // Determine the Content-Type header
        const contentTypes: Array<string> = [
        ];

        // Determine the Accept header
        const acceptTypes: Array<string> = [
            "application/json"
        ];

        return this.request<null>({
            url: "/v3/device-enrollments/{id}".replace("{" + "id" + "}", String(id)),
            method: "DELETE",
            headers: headerParams,
            query: queryParameters,
            formParams: formParams,
            useFormData: useFormData,
            contentTypes: contentTypes,
            acceptTypes: acceptTypes,
            requestOptions: requestOptions,
        }, callback);
    }
    /**
     * Get details of an enrollment by ID.
     * To check the enrollment info in detail, for example claming date and expiration date.
     * @param id Enrollment identity internal id
     */
    public getDeviceEnrollment(id: string, callback?: (error: any, data?: EnrollmentIdentity, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {
        // verify required parameter "id" is set
        if (id === null || id === undefined) {
            if (callback) {
                callback(new SDKError("Required parameter 'id' missing."));
            }
            return;
        }

        const headerParams: any = {};

        const queryParameters: any = {};

        // tslint:disable-next-line:prefer-const
        let useFormData = false;
        const formParams: any = {};

        // Determine the Content-Type header
        const contentTypes: Array<string> = [
        ];

        // Determine the Accept header
        const acceptTypes: Array<string> = [
            "application/json"
        ];

        return this.request<EnrollmentIdentity>({
            url: "/v3/device-enrollments/{id}".replace("{" + "id" + "}", String(id)),
            method: "GET",
            headers: headerParams,
            query: queryParameters,
            formParams: formParams,
            useFormData: useFormData,
            contentTypes: contentTypes,
            acceptTypes: acceptTypes,
            requestOptions: requestOptions,
        }, callback);
    }
    /**
     * Get enrollment list.
     * Provides a list of pending and claimed enrollments. Example usage: 
     * @param limit Number of results to be returned. Between 2 and 1000, inclusive.
     * @param after Entity ID to fetch after.
     * @param order ASC or DESC
     * @param include Comma separate additional data to return. Currently supported: total_count
     */
    public getDeviceEnrollments(limit?: number, after?: string, order?: string, include?: string, callback?: (error: any, data?: EnrollmentIdentities, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {

        const headerParams: any = {};

        const queryParameters: any = {};
        if (limit !== undefined) {
            queryParameters["limit"] = limit;
        }
        if (after !== undefined) {
            queryParameters["after"] = after;
        }
        if (order !== undefined) {
            queryParameters["order"] = order;
        }
        if (include !== undefined) {
            queryParameters["include"] = include;
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;
        const formParams: any = {};

        // Determine the Content-Type header
        const contentTypes: Array<string> = [
        ];

        // Determine the Accept header
        const acceptTypes: Array<string> = [
            "application/json"
        ];

        return this.request<EnrollmentIdentities>({
            url: "/v3/device-enrollments",
            method: "GET",
            headers: headerParams,
            query: queryParameters,
            formParams: formParams,
            useFormData: useFormData,
            contentTypes: contentTypes,
            acceptTypes: acceptTypes,
            requestOptions: requestOptions,
        }, callback);
    }
}
