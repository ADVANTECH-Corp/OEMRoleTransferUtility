{"version":3,"sources":["certificates/certificatesApi.ts"],"names":[],"mappings":"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","file":"certificatesApi.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { asyncStyle, apiWrapper, encodeInclude, extractFilter } from \"../common/functions\";\nimport { ConnectionOptions, CallbackFn } from \"../common/interfaces\";\nimport { ListResponse } from \"../common/listResponse\";\nimport { TrustedCertificateResp as iamCertificate } from \"../_api/iam\";\nimport { Endpoints } from \"./endpoints\";\nimport { AddDeveloperCertificateObject, AddCertificateObject, UpdateCertificateObject, CertificateListOptions } from \"./types\";\nimport { Certificate } from \"./models/certificate\";\nimport { CertificateAdapter } from \"./models/certificateAdapter\";\nimport { ApiMetadata } from \"../common/apiMetadata\";\n\n/**\n * ## Certificates API\n *\n * This API is initialized with [ConnectionOptions](../interfaces/connectionoptions.html).\n *\n * To create an instance of this API in [Node.js](https://nodejs.org):\n *\n * ```JavaScript\n * var MbedCloudSDK = require(\"mbed-cloud-sdk\");\n *\n * var certificates = new MbedCloudSDK.CertificatesApi({\n *     apiKey: \"<Mbed Cloud API Key>\"\n * });\n * ```\n *\n * To create an instance of this API in the browser:\n *\n * ```html\n * <script src=\"<mbed-cloud-sdk>/bundles/certificates.min.js\"></script>\n *\n * <script>\n *     var certificates = new MbedCloudSDK.CertificatesApi({\n *         apiKey: \"<Mbed Cloud API Key>\"\n *     });\n * </script>\n * ```\n */\nexport class CertificatesApi {\n\n    private _endpoints: Endpoints;\n\n    /**\n     * @param options connection options\n     */\n    constructor(options: ConnectionOptions) {\n        this._endpoints = new Endpoints(options);\n    }\n\n    private extendCertificate(iamCert: iamCertificate, done: (error: any, certificate: any) => any) {\n        if (iamCert.device_execution_mode === 1) {\n            // Developer certificate\n            this._endpoints.connector.v3DeveloperCertificatesMuuidGet(iamCert.id, \"\", (error, data) => {\n                if (error) return done(error, null);\n\n                const certificate = CertificateAdapter.mapDeveloperCertificate(iamCert, this, data);\n                done(null, certificate);\n            });\n\n            return;\n        }\n\n        let dataFn = null;\n        if (iamCert.service === \"bootstrap\") dataFn = this._endpoints.connector.v3ServerCredentialsBootstrapGet;\n        if (iamCert.service === \"lwm2m\") dataFn = this._endpoints.connector.v3ServerCredentialsLwm2mGet;\n\n        if (dataFn) {\n            dataFn.call(this._endpoints.connector, \"\", (error, data) => {\n                if (error) return done(error, null);\n\n                const certificate = CertificateAdapter.mapServerCertificate(iamCert, this, data);\n                done(null, certificate);\n            });\n        }\n    }\n\n    /**\n     * List certificates\n     *\n     * Currently returns partially populated certificates. To obtain the full\n     * certificate object use [[getCertificate]].\n     *\n     * Example:\n     * ```JavaScript\n     * certificates.listCertificates({\n     *     limit: 5,\n     *     order: 'ASC',\n     *     filter: {\n     *         type: { $eq: 'bootstrap' }\n     *     }\n     * })\n     * .then(certificates => {\n     *     // Utilize certificates here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options filter options\n     * @returns Promise of listResponse\n     */\n    public listCertificates(options?: CertificateListOptions): Promise<ListResponse<Certificate>>;\n    /**\n     * List certificates\n     *\n     * Currently returns partially populated certificates. To obtain the full\n     * certificate object use [[getCertificate]].\n     *\n     * Example:\n     * ```JavaScript\n     * certificates.listCertificates({\n     *     limit: 5,\n     *     order: 'ASC',\n     *     filter: {\n     *         type: { $eq: 'bootstrap' }\n     *     }\n     * }, function(error, certificates) {\n     *     if (error) throw error;\n     *     // Utilize certificates here\n     * });\n     * ```\n     *\n     * @param options filter options\n     * @param callback A function that is passed the arguments (error, listResponse)\n     */\n    public listCertificates(options?: CertificateListOptions, callback?: CallbackFn<ListResponse<Certificate>>): void;\n    public listCertificates(options?: CertificateListOptions, callback?: CallbackFn<ListResponse<Certificate>>): Promise<ListResponse<Certificate>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, after, order, include, filter } = options as CertificateListOptions;\n            const type = extractFilter(filter, \"type\");\n            const serviceEq = type === \"developer\" ? \"bootstrap\" : type;\n            const executionMode = type === \"developer\" ? 1 : null;\n            const typeNeq = extractFilter(filter, \"typeNeq\");\n            const executionModeNeq = typeNeq === \"developer\" ? 0 : 1;\n\n            this._endpoints.accountDeveloper.getAllCertificates(limit, after, order, encodeInclude(include), extractFilter(filter, \"name\"), serviceEq, extractFilter(filter, \"expires\"), executionMode, executionModeNeq, extractFilter(filter, \"ownerId\"), extractFilter(filter, \"enrollmentMode\"), extractFilter(filter, \"issuer\"), extractFilter(filter, \"subject\"), resultsFn);\n        }, (data, done) => {\n            let certificates: Array<Certificate>;\n            if (data.data && data.data.length) {\n                certificates = data.data.map(certificate => {\n                    return CertificateAdapter.mapCertificate(certificate, this);\n                });\n            }\n\n            done(null, new ListResponse(data, certificates));\n        }, callback);\n    }\n\n    /**\n     * Get details of a certificate\n     *\n     * Example:\n     * ```JavaScript\n     * certificates.getCertificate('015c64f76a7b02420a01230a00000000')\n     * .then(certificate => {\n     *     // Utilize certificate here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param certificateId The certificate ID\n     * @returns Promise containing the certificate\n     */\n    public getCertificate(certificateId: string): Promise<Certificate>;\n    /**\n     * Get details of a certificate\n     *\n     * Example:\n     * ```JavaScript\n     * certificates.getCertificate('015c64f76a7b02420a01230a00000000', function(error, certificate) {\n     *     if (error) throw error;\n     *     // Utilize certificate here\n     * });\n     * ```\n     *\n     * @param certificateId The certificate ID\n     * @param callback A function that is passed the return arguments (error, certificate)\n     */\n    public getCertificate(certificateId: string, callback: CallbackFn<Certificate>): void;\n    public getCertificate(certificateId: string, callback?: (err: any, data?: Certificate) => any): Promise<Certificate> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.accountDeveloper.getCertificate(certificateId, resultsFn);\n        }, (data, done) => {\n            this.extendCertificate(data, done);\n        }, callback);\n    }\n\n    /**\n     * Adds a generated developer certificate\n     *\n     * Example:\n     * ```JavaScript\n     * certificates.addDeveloperCertificate({\n     *     name: 'CertName',\n     *     description: 'SDK generated cert'\n     * })\n     * .then(certificate => {\n     *     // Utilize certificate here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param certificate Certificate request\n     * @returns Promise containing certificate\n     */\n    public addDeveloperCertificate(certificate: AddDeveloperCertificateObject): Promise<Certificate>;\n    /**\n     * Adds a generated developer certificate\n     *\n     * Example:\n     * ```JavaScript\n     * certificates.addDeveloperCertificate({\n     *     name: 'CertName',\n     *     description: 'SDK generated cert'\n     * }, function(error, certificate) {\n     *     if (error) throw error;\n     *     // Utilize certificate here\n     * });\n     * ```\n     *\n     * @param certificate Certificate request\n     * @param callback A function that is passed the return arguments (error, certificate)\n     */\n    public addDeveloperCertificate(certificate: AddDeveloperCertificateObject, callback: CallbackFn<Certificate>): void;\n    public addDeveloperCertificate(certificate: AddDeveloperCertificateObject, callback?: CallbackFn<Certificate>): Promise<Certificate> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.connector.v3DeveloperCertificatesPost(\"\", CertificateAdapter.reverseDeveloperMap(certificate), resultsFn);\n        }, (data, done) => {\n            this._endpoints.accountDeveloper.getCertificate(data.id, (error, certData) => {\n                if (error) return done(error, null);\n\n                const cert = CertificateAdapter.mapDeveloperCertificate(certData, this, data);\n                done(null, cert);\n            });\n        }, callback);\n    }\n\n    /**\n     * Adds a certificate\n     *\n     * Example:\n     * ```JavaScript\n     * // Signature is a Base64 encoded signature of the account ID hashed with SHA256\n     * certificates.addCertificate({\n     *     name: 'CertName',\n     *     description: 'SDK generated cert',\n     *     type: 'bootstrap',\n     *     signature: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',\n     *     certificateData: '-----BEGIN CERTIFICATE-----\\nMIICFzCCAbygAwIBAgIQX ... EPSDKEF\\n-----END CERTIFICATE-----'\n     * })\n     * .then(certificate => {\n     *     // Utilize certificate here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param certificate Certificate request\n     * @returns Promise containing certificate\n     */\n    public addCertificate(certificate: AddCertificateObject): Promise<Certificate>;\n    /**\n     * Adds a certificate\n     *\n     * Example:\n     * ```JavaScript\n     * // Signature is a Base64 encoded signature of the account ID hashed with SHA256\n     * certificates.addCertificate({\n     *     name: 'CertName',\n     *     description: 'SDK generated cert',\n     *     type: 'bootstrap',\n     *     signature: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',\n     *     certificateData: '-----BEGIN CERTIFICATE-----\\nMIICFzCCAbygAwIBAgIQX ... EPSDKEF\\n-----END CERTIFICATE-----'\n     * }, function(error, certificate) {\n     *     if (error) throw error;\n     *     // Utilize certificate here\n     * });\n     * ```\n     *\n     * @param certificate Certificate request\n     * @param callback A function that is passed the return arguments (error, certificate)\n     */\n    public addCertificate(certificate: AddCertificateObject, callback: CallbackFn<Certificate>): void;\n    public addCertificate(certificate: AddCertificateObject, callback?: CallbackFn<Certificate>): Promise<Certificate> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.admin.addCertificate(CertificateAdapter.reverseMap(certificate), resultsFn);\n        }, (data, done) => {\n            this.extendCertificate(data, done);\n        }, callback);\n    }\n\n    /**\n     * Updates a certificate\n     *\n     * Example:\n     * ```JavaScript\n     * // Signature is a Base64 encoded signature of the account ID hashed with SHA256\n     * certificates.updateCertificate({\n     *     name: 'CertName',\n     *     description: 'SDK generated cert',\n     *     type: 'bootstrap',\n     *     signature: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',\n     *     certificateData: '-----BEGIN CERTIFICATE-----\\nMIICFzCCAbygAwIBAgIQX ... EPSDKEF\\n-----END CERTIFICATE-----'\n     * })\n     * .then(certificate => {\n     *     // Utilize certificate here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param certificate Certificate data\n     * @returns Promise containing certificate\n     */\n    public updateCertificate(certificate: UpdateCertificateObject): Promise<Certificate>;\n    /**\n     * Updates a certificate\n     *\n     * Example:\n     * ```JavaScript\n     * // Signature is a Base64 encoded signature of the account ID hashed with SHA256\n     * certificates.updateCertificate({\n     *     name: 'CertName',\n     *     description: 'SDK generated cert',\n     *     type: 'bootstrap',\n     *     signature: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',\n     *     certificateData: '-----BEGIN CERTIFICATE-----\\nMIICFzCCAbygAwIBAgIQX ... EPSDKEF\\n-----END CERTIFICATE-----'\n     * }, function(error, certificate) {\n     *     if (error) throw error;\n     *     // Utilize certificate here\n     * });\n     * ```\n     *\n     * @param certificate Certificate data\n     * @param callback A function that is passed the return arguments (error, certificate)\n     */\n    public updateCertificate(certificate: UpdateCertificateObject, callback: CallbackFn<Certificate>): void;\n    public updateCertificate(certificate: UpdateCertificateObject, callback?: CallbackFn<Certificate>): Promise<Certificate> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.accountDeveloper.updateCertificate(certificate.id, CertificateAdapter.reverseUpdateMap(certificate), resultsFn);\n        }, (data, done) => {\n            this.extendCertificate(data, done);\n        }, callback);\n    }\n\n    /**\n     * Deletes a certificate\n     *\n     * Example:\n     * ```JavaScript\n     * certificates.deleteCertificate('015c64f76a7b02420a01230a00000000')\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param certificateId The certificate ID\n     * @returns Promise containing any error\n     */\n    public deleteCertificate(certificateId: string): Promise<void>;\n    /**\n     * Deletes a certificate\n     *\n     * Example:\n     * ```JavaScript\n     * certificates.deleteCertificate('015c64f76a7b02420a01230a00000000', function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param certificateId The certificate ID\n     * @param callback A function that is passed the return arguments (error, void)\n     */\n    public deleteCertificate(certificateId: string, callback: CallbackFn<void>): void;\n    public deleteCertificate(certificateId: string, callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.accountDeveloper.deleteCertificate(certificateId, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @returns Promise of meta data\n     */\n    public getLastApiMetadata(): Promise<ApiMetadata>;\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @param callback A function that is passed the arguments (error, meta data)\n     */\n    public getLastApiMetadata(callback: CallbackFn<ApiMetadata>): void;\n    public getLastApiMetadata(callback?: CallbackFn<ApiMetadata>): Promise<ApiMetadata> {\n        return asyncStyle(done => {\n            done(null, this._endpoints.getLastMeta());\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}