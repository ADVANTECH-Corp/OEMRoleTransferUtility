{"version":3,"sources":["_api/update_service.ts"],"names":[],"mappings":"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","file":"update_service.js","sourcesContent":["/* tslint:disable:array-type */\n/* tslint:disable:no-namespace */\n/* tslint:disable:no-string-literal */\n/* tslint:disable:max-classes-per-file */\n/* tslint:disable:no-trailing-whitespace */\n\n// ===============================================\n// This file is autogenerated - Please do not edit\n// Tracks base typescript-fetch mustache 01/02/17\n// ===============================================\n\n/**\n * Update Service API\n * This is the API documentation for the Mbed deployment service, which is part of the update service.\n *\n * OpenAPI spec version: 3\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport superagent = require(\"superagent\");\nimport { ApiBase } from \"../common/apiBase\";\nimport { SDKError } from \"../common/sdkError\";\n\nexport namespace CampaignDeviceMetadata {\n    export type DeploymentStateEnum = \"pending\" | \"updated_connector_channel\" | \"failed_connector_channel_update\" | \"deployed\" | \"manifestremoved\" | \"deregistered\";\n}\nexport interface CampaignDeviceMetadata {\n    /**\n     * The device's campaign ID\n     */\n    \"campaign\"?: string;\n    /**\n     * The time the campaign was created\n     */\n    \"created_at\"?: Date;\n    /**\n     * The state of the update campaign on the device\n     */\n    \"deployment_state\"?: CampaignDeviceMetadata.DeploymentStateEnum;\n    /**\n     * Description\n     */\n    \"description\"?: string;\n    /**\n     * The device ID\n     */\n    \"device_id\"?: string;\n    /**\n     * API resource entity version\n     */\n    \"etag\"?: string;\n    /**\n     * The metadata record ID\n     */\n    \"id\"?: string;\n    /**\n     * How the firmware is delivered (connector or direct)\n     */\n    \"mechanism\"?: string;\n    /**\n     * The Cloud Connect URL\n     */\n    \"mechanism_url\"?: string;\n    /**\n     * The record name\n     */\n    \"name\"?: string;\n    /**\n     * Entity name: always 'update-campaign-device-metadata'\n     */\n    \"object\"?: string;\n    /**\n     * This time this record was modified in the database format: date-time\n     */\n    \"updated_at\"?: Date;\n}\n\nexport namespace CampaignDeviceMetadataPage {\n    export type OrderEnum = \"ASC\" | \"DESC\";\n}\nexport interface CampaignDeviceMetadataPage {\n    /**\n     * The entity ID to fetch after the given one\n     */\n    \"after\"?: string;\n    /**\n     * A list of entities\n     */\n    \"data\"?: Array<CampaignDeviceMetadata>;\n    /**\n     * Flag indicating whether there are more results\n     */\n    \"has_more\"?: boolean;\n    /**\n     * The number of results to return, (range: 2-1000), or equals to total_count\n     */\n    \"limit\"?: number;\n    /**\n     * Entity name: always 'list'\n     */\n    \"object\"?: string;\n    /**\n     * The order of the records to return. Acceptable values: ASC, DESC. Default: ASC\n     */\n    \"order\"?: CampaignDeviceMetadataPage.OrderEnum;\n    /**\n     * The total number or records, if requested. It might be returned also for small lists.\n     */\n    \"total_count\"?: number;\n}\n\nexport interface FirmwareImage {\n    /**\n     * The time the object was created\n     */\n    \"created_at\": Date;\n    /**\n     * The firmware image file URL\n     */\n    \"datafile\": string;\n    /**\n     * Checksum (sha256) generated for the datafile\n     */\n    \"datafile_checksum\": string;\n    /**\n     * Size of the datafile in bytes\n     */\n    \"datafile_size\"?: number;\n    /**\n     * The description of the object\n     */\n    \"description\": string;\n    /**\n     * The entity instance signature\n     */\n    \"etag\": Date;\n    /**\n     * The firmware image ID\n     */\n    \"id\": string;\n    /**\n     * The firmware image name\n     */\n    \"name\": string;\n    /**\n     * The API resource entity\n     */\n    \"object\": string;\n    /**\n     * The time the object was updated\n     */\n    \"updated_at\": Date;\n}\n\nexport interface FirmwareImageEqNeqFilter {\n    \"created_at\"?: Date;\n    \"datafile\"?: string;\n    \"datafile_checksum\"?: string;\n    \"datafile_size\"?: number;\n    \"description\"?: string;\n    \"etag\"?: Date;\n    \"id\"?: string;\n    \"name\"?: string;\n    \"updated_at\"?: Date;\n}\n\nexport interface FirmwareImageGteLteFilter {\n    \"created_at\"?: Date;\n    \"etag\"?: Date;\n    \"updated_at\"?: Date;\n}\n\nexport interface FirmwareImageInNinFilter {\n    \"created_at\"?: Date;\n    \"datafile\"?: string;\n    \"datafile_checksum\"?: string;\n    \"datafile_size\"?: number;\n    \"description\"?: string;\n    \"etag\"?: Date;\n    \"id\"?: string;\n    \"name\"?: string;\n    \"updated_at\"?: Date;\n}\n\nexport namespace FirmwareImagePage {\n    export type OrderEnum = \"ASC\" | \"DESC\";\n}\nexport interface FirmwareImagePage {\n    \"after\"?: string;\n    \"data\"?: Array<FirmwareImage>;\n    \"has_more\"?: boolean;\n    \"limit\"?: number;\n    \"object\"?: string;\n    /**\n     * The order of the records based on creation time, `ASC` or `DESC`; by default `ASC`.\n     */\n    \"order\"?: FirmwareImagePage.OrderEnum;\n    \"total_count\"?: number;\n}\n\nexport interface FirmwareManifest {\n    /**\n     * The time the object was created\n     */\n    \"created_at\": Date;\n    /**\n     * The URL of the firmware manifest binary\n     */\n    \"datafile\": string;\n    /**\n     * Size of the datafile in bytes\n     */\n    \"datafile_size\"?: number;\n    /**\n     * The description of the firmware manifest\n     */\n    \"description\": string;\n    /**\n     * The class of the device\n     */\n    \"device_class\": string;\n    /**\n     * The entity instance signature\n     */\n    \"etag\": Date;\n    /**\n     * The firmware manifest ID\n     */\n    \"id\": string;\n    /**\n     * The key table of pre-shared keys for devices\n     */\n    \"key_table\"?: string;\n    /**\n     * The name of the object\n     */\n    \"name\": string;\n    /**\n     * The API resource entity\n     */\n    \"object\": string;\n    /**\n     * The firmware manifest version as a timestamp\n     */\n    \"timestamp\": Date;\n    /**\n     * The time the object was updated\n     */\n    \"updated_at\": Date;\n}\n\nexport interface FirmwareManifestEqNeqFilter {\n    \"created_at\"?: Date;\n    \"datafile\"?: string;\n    \"datafile_size\"?: number;\n    \"description\"?: string;\n    \"device_class\"?: string;\n    \"etag\"?: Date;\n    \"id\"?: string;\n    \"name\"?: string;\n    \"timestamp\"?: Date;\n    \"updated_at\"?: Date;\n}\n\nexport interface FirmwareManifestGteLteFilter {\n    \"created_at\"?: Date;\n    \"etag\"?: Date;\n    \"timestamp\"?: Date;\n    \"updated_at\"?: Date;\n}\n\nexport interface FirmwareManifestInNinFilter {\n    \"created_at\"?: Date;\n    \"datafile\"?: string;\n    \"datafile_size\"?: number;\n    \"description\"?: string;\n    \"device_class\"?: string;\n    \"etag\"?: Date;\n    \"id\"?: string;\n    \"name\"?: string;\n    \"timestamp\"?: Date;\n    \"updated_at\"?: Date;\n}\n\nexport namespace FirmwareManifestPage {\n    export type OrderEnum = \"ASC\" | \"DESC\";\n}\nexport interface FirmwareManifestPage {\n    \"after\"?: string;\n    \"data\"?: Array<FirmwareManifest>;\n    \"has_more\"?: boolean;\n    \"limit\"?: number;\n    \"object\"?: string;\n    /**\n     * The order of the records to return. Acceptable values: ASC, DESC. Default: ASC\n     */\n    \"order\"?: FirmwareManifestPage.OrderEnum;\n    \"total_count\"?: number;\n}\n\nexport namespace UpdateCampaign {\n    export type StateEnum = \"draft\" | \"scheduled\" | \"allocatingquota\" | \"allocatedquota\" | \"quotaallocationfailed\" | \"checkingmanifest\" | \"checkedmanifest\" | \"devicefetch\" | \"devicecopy\" | \"devicecheck\" | \"publishing\" | \"deploying\" | \"deployed\" | \"manifestremoved\" | \"expired\" | \"stopping\" | \"autostopped\" | \"userstopped\" | \"conflict\";\n}\nexport interface UpdateCampaign {\n    /**\n     * The time the update campaign was created\n     */\n    \"created_at\"?: Date;\n    /**\n     * The optional description of the campaign\n     */\n    \"description\"?: string;\n    /**\n     * The filter for the devices the campaign will target\n     */\n    \"device_filter\"?: string;\n    /**\n     * The entity instance signature\n     */\n    \"etag\"?: string;\n    /**\n     * The campaign finish timestamp\n     */\n    \"finished\"?: Date;\n    /**\n     * The campaign ID\n     */\n    \"id\"?: string;\n    /**\n     * The campaign name\n     */\n    \"name\"?: string;\n    /**\n     * The API resource entity\n     */\n    \"object\"?: string;\n    /**\n     * The current phase of the campaign.\n     */\n    \"phase\"?: string;\n    \"root_manifest_id\"?: string;\n    \"root_manifest_url\"?: string;\n    \"started_at\"?: Date;\n    /**\n     * The state of the campaign\n     */\n    \"state\"?: UpdateCampaign.StateEnum;\n    /**\n     * The time the object was updated\n     */\n    \"updated_at\"?: Date;\n    /**\n     * The scheduled start time for the update campaign\n     */\n    \"when\"?: Date;\n}\n\nexport interface UpdateCampaignEqNeqFilter {\n    \"created_at\"?: Date;\n    \"description\"?: string;\n    \"device_filter\"?: string;\n    \"etag\"?: Date;\n    \"finished\"?: Date;\n    \"id\"?: string;\n    \"name\"?: string;\n    \"root_manifest_id\"?: string;\n    \"started_at\"?: Date;\n    \"state\"?: string;\n    \"updated_at\"?: Date;\n    \"when\"?: Date;\n}\n\nexport interface UpdateCampaignGteLteFilter {\n    \"created_at\"?: Date;\n    \"etag\"?: Date;\n    \"finished\"?: Date;\n    \"started_at\"?: Date;\n    \"updated_at\"?: Date;\n    \"when\"?: Date;\n}\n\nexport interface UpdateCampaignInNinFilter {\n    \"created_at\"?: Date;\n    \"description\"?: string;\n    \"device_filter\"?: string;\n    \"etag\"?: Date;\n    \"finished\"?: Date;\n    \"id\"?: string;\n    \"name\"?: string;\n    \"root_manifest_id\"?: string;\n    \"started_at\"?: Date;\n    \"state\"?: string;\n    \"updated_at\"?: Date;\n    \"when\"?: Date;\n}\n\nexport namespace UpdateCampaignPage {\n    export type OrderEnum = \"ASC\" | \"DESC\";\n}\nexport interface UpdateCampaignPage {\n    \"after\"?: string;\n    \"data\"?: Array<UpdateCampaign>;\n    \"has_more\"?: boolean;\n    \"limit\"?: number;\n    \"object\"?: string;\n    /**\n     * The order of the records to return. Acceptable values: ASC, DESC. Default: ASC\n     */\n    \"order\"?: UpdateCampaignPage.OrderEnum;\n    \"total_count\"?: number;\n}\n\nexport namespace UpdateCampaignPatchRequest {\n    export type StateEnum = \"draft\" | \"scheduled\" | \"allocatingquota\" | \"allocatedquota\" | \"quotaallocationfailed\" | \"checkingmanifest\" | \"checkedmanifest\" | \"devicefetch\" | \"devicecopy\" | \"devicecheck\" | \"publishing\" | \"deploying\" | \"deployed\" | \"manifestremoved\" | \"expired\" | \"stopping\" | \"autostopped\" | \"userstopped\" | \"conflict\";\n}\nexport interface UpdateCampaignPatchRequest {\n    /**\n     * The optional description of the campaign\n     */\n    \"description\"?: string;\n    /**\n     * The filter for the devices the campaign will target\n     */\n    \"device_filter\"?: string;\n    /**\n     * The campaign name\n     */\n    \"name\"?: string;\n    /**\n     * The API resource entity\n     */\n    \"object\"?: string;\n    \"root_manifest_id\"?: string;\n    /**\n     * The state of the campaign\n     */\n    \"state\"?: UpdateCampaignPatchRequest.StateEnum;\n    /**\n     * The scheduled start time for the update campaign\n     */\n    \"when\"?: Date;\n}\n\nexport namespace UpdateCampaignPostRequest {\n    export type StateEnum = \"draft\" | \"scheduled\" | \"allocatingquota\" | \"allocatedquota\" | \"quotaallocationfailed\" | \"checkingmanifest\" | \"checkedmanifest\" | \"devicefetch\" | \"devicecopy\" | \"devicecheck\" | \"publishing\" | \"deploying\" | \"deployed\" | \"manifestremoved\" | \"expired\" | \"stopping\" | \"autostopped\" | \"userstopped\" | \"conflict\";\n}\nexport interface UpdateCampaignPostRequest {\n    /**\n     * The optional description of the campaign\n     */\n    \"description\"?: string;\n    /**\n     * The filter for the devices the campaign will target\n     */\n    \"device_filter\": string;\n    /**\n     * The name for this campaign\n     */\n    \"name\": string;\n    /**\n     * The API resource entity\n     */\n    \"object\"?: string;\n    \"root_manifest_id\"?: string;\n    /**\n     * The state of the campaign\n     */\n    \"state\"?: UpdateCampaignPostRequest.StateEnum;\n    /**\n     * The scheduled start time for the update campaign\n     */\n    \"when\"?: Date;\n}\n\nexport namespace UpdateCampaignPutRequest {\n    export type StateEnum = \"draft\" | \"scheduled\" | \"allocatingquota\" | \"allocatedquota\" | \"quotaallocationfailed\" | \"checkingmanifest\" | \"checkedmanifest\" | \"devicefetch\" | \"devicecopy\" | \"devicecheck\" | \"publishing\" | \"deploying\" | \"deployed\" | \"manifestremoved\" | \"expired\" | \"stopping\" | \"autostopped\" | \"userstopped\" | \"conflict\";\n}\nexport interface UpdateCampaignPutRequest {\n    /**\n     * An optional description of the campaign\n     */\n    \"description\": string;\n    /**\n     * The filter for the devices the campaign will target\n     */\n    \"device_filter\": string;\n    /**\n     * The campaign's name\n     */\n    \"name\": string;\n    /**\n     * The API resource entity\n     */\n    \"object\": string;\n    \"root_manifest_id\": string;\n    /**\n     * The state of the campaign\n     */\n    \"state\": UpdateCampaignPutRequest.StateEnum;\n    /**\n     * The scheduled start time for the update campaign\n     */\n    \"when\": Date;\n}\n\n/**\n * DefaultApi\n */\nexport class DefaultApi extends ApiBase {\n\n    /**\n     * Create an image\n     * Create firmware image.\n     * @param datafile The firmware image file to upload\n     * @param name The name of the firmware image\n     * @param description The description of the firmware image\n     */\n    public firmwareImageCreate(datafile: any, name: string, description?: string, callback?: (error: any, data?: FirmwareImage, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"datafile\" is set\n        if (datafile === null || datafile === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'datafile' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"name\" is set\n        if (name === null || name === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'name' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        if (datafile !== undefined) {\n            formParams[\"datafile\"] = datafile;\n        }\n        useFormData = true;\n\n        if (description !== undefined) {\n            formParams[\"description\"] = description;\n        }\n\n        if (name !== undefined) {\n            formParams[\"name\"] = name;\n        }\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"multipart/form-data\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<FirmwareImage>({\n            url: \"/v3/firmware-images/\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Delete an image\n     * Delete firmware image.\n     * @param imageId The firmware image ID\n     */\n    public firmwareImageDestroy(imageId: string, callback?: (error: any, data?: any, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"imageId\" is set\n        if (imageId === null || imageId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'imageId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<null>({\n            url: \"/v3/firmware-images/{image_id}/\".replace(\"{\" + \"image_id\" + \"}\", String(imageId)),\n            method: \"DELETE\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * List all images\n     * List all firmware images.\n     * @param limit How many firmware images to retrieve\n     * @param order ASC or DESC\n     * @param after The ID of the the item after which to retrieve the next page\n     * @param filter URL-encoded query string parameter to filter returned data  &#x60;?filter&#x3D;{URL-encoded query string}&#x60;  ###### Filterable fields:  The below table lists all the fields that can be filtered on with certain filters:  |       Field       | &#x3D; / __eq / __neq | __in /  __nin | __lte / __gte | |:-----------------:|:----------------:|:-------------:|:-------------:| |     created_at    |         ✓        |       ✓       |       ✓       | |      datafile     |         ✓        |       ✓       |               | | datafile_checksum |         ✓        |       ✓       |               | |   datafile_size   |         ✓        |       ✓       |               | |    description    |         ✓        |       ✓       |               | |        etag       |         ✓        |       ✓       |       ✓       | |         id        |         ✓        |       ✓       |               | |        name       |         ✓        |       ✓       |               | |     timestamp     |         ✓        |       ✓       |       ✓       | |     updated_at    |         ✓        |       ✓       |       ✓       |  The query string is made up of key-value pairs separated by ampersands. For example, this query: &#x60;key1&#x3D;value1&amp;key2&#x3D;value2&amp;key3&#x3D;value3&#x60;  would be URL-encoded as: &#x60;?filter&#x3D;key1__eq%3Dvalue1%26key2__eq%3Dvalue2%26key3__eq%3Dvalue3&#x60;   **Filtering by properties** &#x60;name__eq&#x3D;myimage&#x60;  **Filtering on date-time fields**  Date-time fields should be specified in UTC RFC3339 format, &#x60;YYYY-MM-DDThh:mm:ss.msZ&#x60;. There are three permitted variations:  * UTC RFC3339 with milliseconds. Example: &#x60;2016-11-30T16:25:12.1234Z&#x60; * UTC RFC3339 without milliseconds. Example: &#x60;2016-11-30T16:25:12Z&#x60; * UTC RFC3339 shortened without milliseconds and punctuation. Example: &#x60;20161130T162512Z&#x60;  Date-time filtering supports three operators:  * equality by appending &#x60;__eq&#x60; to the field name * greater than or equal to by appending &#x60;__gte&#x60; to the field name * less than or equal to by appending &#x60;__lte&#x60; to the field name  &#x60;{field name}[|__eq|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&#x60;  Time ranges may be specified by including both the &#x60;__gte&#x60; and &#x60;__lte&#x60; forms in the filter. For example:  &#x60;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&#x60;  **Filtering on multiple fields**  &#x60;name__eq&#x3D;myimage&amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&#x60;  **Filtering with filter operators**  String field filtering supports the following operators:  * equality: &#x60;__eq&#x60; * non-equality: &#x60;__neq&#x60; * in : &#x60;__in&#x60; * not in: &#x60;__nin&#x60;  For &#x60;__in&#x60; and &#x60;__nin&#x60; filters list of parameters must be comma-separated:  &#x60;name__in&#x3D;fw-image1,fw-image2&#x60;\n     * @param include Comma-separated list of data fields to return. Currently supported: total_count\n     */\n    public firmwareImageList(limit?: number, order?: string, after?: string, filter?: string, include?: string, callback?: (error: any, data?: FirmwareImagePage, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (filter !== undefined) {\n            queryParameters[\"filter\"] = filter;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<FirmwareImagePage>({\n            url: \"/v3/firmware-images/\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Get an image\n     * Retrieve firmware image.\n     * @param imageId The firmware image ID\n     */\n    public firmwareImageRetrieve(imageId: string, callback?: (error: any, data?: FirmwareImage, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"imageId\" is set\n        if (imageId === null || imageId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'imageId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<FirmwareImage>({\n            url: \"/v3/firmware-images/{image_id}/\".replace(\"{\" + \"image_id\" + \"}\", String(imageId)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Create a manifest\n     * Create firmware manifest.\n     * @param datafile The manifest file to create. The API gateway enforces the account-specific file size.\n     * @param name The name of the firmware manifest\n     * @param description The description of the firmware manifest\n     * @param keyTable The key table of pre-shared keys for devices\n     */\n    public firmwareManifestCreate(datafile: any, name: string, description?: string, keyTable?: any, callback?: (error: any, data?: FirmwareManifest, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"datafile\" is set\n        if (datafile === null || datafile === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'datafile' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"name\" is set\n        if (name === null || name === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'name' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        if (datafile !== undefined) {\n            formParams[\"datafile\"] = datafile;\n        }\n        useFormData = true;\n\n        if (description !== undefined) {\n            formParams[\"description\"] = description;\n        }\n\n        if (keyTable !== undefined) {\n            formParams[\"key_table\"] = keyTable;\n        }\n        useFormData = true;\n\n        if (name !== undefined) {\n            formParams[\"name\"] = name;\n        }\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"multipart/form-data\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<FirmwareManifest>({\n            url: \"/v3/firmware-manifests/\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Delete a manifest\n     * Delete firmware manifest.\n     * @param manifestId The firmware manifest ID\n     */\n    public firmwareManifestDestroy(manifestId: string, callback?: (error: any, data?: any, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"manifestId\" is set\n        if (manifestId === null || manifestId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'manifestId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<null>({\n            url: \"/v3/firmware-manifests/{manifest_id}/\".replace(\"{\" + \"manifest_id\" + \"}\", String(manifestId)),\n            method: \"DELETE\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * List manifests\n     * List firmware manifests.\n     * @param limit How many firmware manifests to retrieve\n     * @param order ASC or DESC\n     * @param after The ID of the the item after which to retrieve the next page.\n     * @param filter URL-encoded query string parameter to filter returned data  &#x60;?filter&#x3D;{URL-encoded query string}&#x60;  ###### Filterable fields:  The below table lists all the fields that can be filtered on with certain filters:  |     Field     | &#x3D; / __eq / __neq | __in /  __nin | __lte / __gte | |:-------------:|:----------------:|:-------------:|:-------------:| |   created_at  |         ✓        |       ✓       |       ✓       | |    datafile   |         ✓        |       ✓       |               | | datafile_size |         ✓        |       ✓       |               | |  description  |         ✓        |       ✓       |               | |  device_class |         ✓        |       ✓       |               | |      etag     |         ✓        |       ✓       |       ✓       | |       id      |         ✓        |       ✓       |               | |      name     |         ✓        |       ✓       |               | |   timestamp   |         ✓        |       ✓       |       ✓       | |   updated_at  |         ✓        |       ✓       |       ✓       |  The query string is made up of key-value pairs separated by ampersands. For example, this query: &#x60;key1__eq&#x3D;value1&amp;key2__eq&#x3D;value2&amp;key3__eq&#x3D;value3&#x60;  would be URL-encoded as: &#x60;?filter&#x3D;key1__eq%3Dvalue1%26key2__eq%3Dvalue2%26key3__eq%3Dvalue3&#x60;   **Filtering by properties** &#x60;name__eq&#x3D;mymanifest&#x60;  **Filtering on date-time fields**  Date-time fields should be specified in UTC RFC3339 format, &#x60;YYYY-MM-DDThh:mm:ss.msZ&#x60;. There are three permitted variations:  * UTC RFC3339 with milliseconds. Example: &#x60;2016-11-30T16:25:12.1234Z&#x60; * UTC RFC3339 without milliseconds. Example: &#x60;2016-11-30T16:25:12Z&#x60; * UTC RFC3339 shortened without milliseconds and punctuation. Example: &#x60;20161130T162512Z&#x60;  Date-time filtering supports three operators:  * equality by appending &#x60;__eq&#x60; to the field name * greater than or equal to by appending &#x60;__gte&#x60; to the field name * less than or equal to by appending &#x60;__lte&#x60; to the field name  &#x60;{field name}[|__eq|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&#x60;  Time ranges may be specified by including both the &#x60;__gte&#x60; and &#x60;__lte&#x60; forms in the filter. For example:  &#x60;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&#x60;  **Filtering on multiple fields**  &#x60;name__eq&#x3D;mymanifest&amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&#x60;  **Filtering with filter operators**  String field filtering supports the following operators:  * equality: &#x60;__eq&#x60; * non-equality: &#x60;__neq&#x60; * in : &#x60;__in&#x60; * not in: &#x60;__nin&#x60;  For &#x60;__in&#x60; and &#x60;__nin&#x60; filters list of parameters must be comma-separated:  &#x60;name__in&#x3D;fw-manifest1,fw-manifest2&#x60;\n     * @param include Comma-separated list of data fields to return. Currently supported: total_count\n     */\n    public firmwareManifestList(limit?: number, order?: string, after?: string, filter?: string, include?: string, callback?: (error: any, data?: FirmwareManifestPage, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (filter !== undefined) {\n            queryParameters[\"filter\"] = filter;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<FirmwareManifestPage>({\n            url: \"/v3/firmware-manifests/\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Get a manifest\n     * Retrieve firmware manifest.\n     * @param manifestId The firmware manifest ID\n     */\n    public firmwareManifestRetrieve(manifestId: string, callback?: (error: any, data?: FirmwareManifest, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"manifestId\" is set\n        if (manifestId === null || manifestId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'manifestId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<FirmwareManifest>({\n            url: \"/v3/firmware-manifests/{manifest_id}/\".replace(\"{\" + \"manifest_id\" + \"}\", String(manifestId)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Create a campaign\n     * Create an update campaign.\n     * @param campaign Update campaign\n     */\n    public updateCampaignCreate(campaign: UpdateCampaignPostRequest, callback?: (error: any, data?: UpdateCampaign, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"campaign\" is set\n        if (campaign === null || campaign === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'campaign' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UpdateCampaign>({\n            url: \"/v3/update-campaigns/\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n            body: campaign,\n        }, callback);\n    }\n    /**\n     * Delete a campaign\n     * Delete an update campaign.\n     * @param campaignId The ID of the update campaign\n     */\n    public updateCampaignDestroy(campaignId: string, callback?: (error: any, data?: any, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"campaignId\" is set\n        if (campaignId === null || campaignId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'campaignId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<null>({\n            url: \"/v3/update-campaigns/{campaign_id}/\".replace(\"{\" + \"campaign_id\" + \"}\", String(campaignId)),\n            method: \"DELETE\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * List all campaigns\n     * Get update campaigns for devices specified by a filter.\n     * @param limit How many update campaigns to retrieve\n     * @param order The order of the records. Acceptable values: ASC, DESC. Default: ASC\n     * @param after The ID of the the item after which to retrieve the next page\n     * @param filter URL-encoded query string parameter to filter returned data  &#x60;?filter&#x3D;{URL-encoded query string}&#x60;   ###### Filterable fields:    The below table lists all the fields that can be filtered on with certain filters:    |       Field      | &#x3D; / __eq / __neq | __in /  __nin | __lte / __gte |   |:----------------:|:----------------:|:-------------:|:-------------:|   |    created_at    |         ✓        |       ✓       |       ✓       |   |    description   |         ✓        |       ✓       |               |   |   device_filter  |         ✓        |       ✓       |               |   |       etag       |         ✓        |       ✓       |       ✓       |   |     finished     |         ✓        |       ✓       |       ✓       |   |        id        |         ✓        |       ✓       |               |   |       name       |         ✓        |       ✓       |               |   | root_manifest_id |         ✓        |       ✓       |               |   |    started_at    |         ✓        |       ✓       |       ✓       |   |       state      |         ✓        |       ✓       |               |   |    updated_at    |         ✓        |       ✓       |       ✓       |   |       when       |         ✓        |       ✓       |       ✓       |  The query string is made up of key-value pairs separated by ampersands. For example, this query: &#x60;key1__eq&#x3D;value1&amp;key2__eq&#x3D;value2&amp;key3__eq&#x3D;value3&#x60;  would be URL-encoded as: &#x60;?filter&#x3D;key1__eq%3Dvalue1%26key2__eq%3Dvalue2%26key3__eq%3Dvalue3&#x60;   **Filtering by campaign properties** &#x60;state__eq&#x3D;[draft|scheduled|devicefectch|devicecopy|publishing|deploying|deployed|manifestremoved|expired]&#x60;  &#x60;root_manifest_id__eq&#x3D;43217771234242e594ddb433816c498a&#x60;  **Filtering on date-time fields**  Date-time fields should be specified in UTC RFC3339 format, &#x60;YYYY-MM-DDThh:mm:ss.msZ&#x60;. There are three permitted variations:  * UTC RFC3339 with milliseconds. Example: &#x60;2016-11-30T16:25:12.1234Z&#x60; * UTC RFC3339 without milliseconds. Example: &#x60;2016-11-30T16:25:12Z&#x60; * UTC RFC3339 shortened without milliseconds and punctuation. Example: &#x60;20161130T162512Z&#x60;  Date-time filtering supports three operators:  * equality by appending &#x60;__eq&#x60; to the field name * greater than or equal to by appending &#x60;__gte&#x60; to the field name * less than or equal to by appending &#x60;__lte&#x60; to the field name  &#x60;{field name}[|__eq|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&#x60;  Time ranges may be specified by including both the &#x60;__gte&#x60; and &#x60;__lte&#x60; forms in the filter. For example:  &#x60;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&#x60;  **Filtering on multiple fields**  &#x60;state__eq&#x3D;deployed&amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&#x60;  **Filtering with filter operators**  String field filtering supports the following operators:  * equality: &#x60;__eq&#x60; * non-equality: &#x60;__neq&#x60; * in : &#x60;__in&#x60; * not in: &#x60;__nin&#x60;  For &#x60;__in&#x60; and &#x60;__nin&#x60; filters list of parameters must be comma-separated:  &#x60;name__in&#x3D;fw-image1,fw-image2&#x60;\n     * @param include Comma-separated list of data fields to return. Currently supported: total_count\n     */\n    public updateCampaignList(limit?: number, order?: string, after?: string, filter?: string, include?: string, callback?: (error: any, data?: UpdateCampaignPage, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (filter !== undefined) {\n            queryParameters[\"filter\"] = filter;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UpdateCampaignPage>({\n            url: \"/v3/update-campaigns/\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * List all campaign device metadata\n     * Get campaign device metadata.\n     * @param campaignId The update campaign ID\n     * @param limit How many objects to retrieve in the page\n     * @param order ASC or DESC\n     * @param after The ID of the the item after which to retrieve the next page\n     * @param include Comma-separated list of data fields to return. Currently supported: total_count\n     */\n    public updateCampaignMetadataList(campaignId: string, limit?: number, order?: string, after?: string, include?: string, callback?: (error: any, data?: CampaignDeviceMetadataPage, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"campaignId\" is set\n        if (campaignId === null || campaignId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'campaignId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<CampaignDeviceMetadataPage>({\n            url: \"/v3/update-campaigns/{campaign_id}/campaign-device-metadata/\".replace(\"{\" + \"campaign_id\" + \"}\", String(campaignId)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Get a campaign device metadata\n     * Get update campaign metadata.\n     * @param campaignId The update campaign ID\n     * @param campaignDeviceMetadataId The campaign device metadata ID\n     */\n    public updateCampaignMetadataRetrieve(campaignId: string, campaignDeviceMetadataId: string, callback?: (error: any, data?: CampaignDeviceMetadata, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"campaignId\" is set\n        if (campaignId === null || campaignId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'campaignId' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"campaignDeviceMetadataId\" is set\n        if (campaignDeviceMetadataId === null || campaignDeviceMetadataId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'campaignDeviceMetadataId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<CampaignDeviceMetadata>({\n            url: \"/v3/update-campaigns/{campaign_id}/campaign-device-metadata/{campaign_device_metadata_id}/\".replace(\"{\" + \"campaign_id\" + \"}\", String(campaignId)).replace(\"{\" + \"campaign_device_metadata_id\" + \"}\", String(campaignDeviceMetadataId)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Stop a running campaign\n     * Stop a running update campaign.\n     * @param campaignId The campaign ID\n     */\n    public updateCampaignMetadataStop(campaignId: string, callback?: (error: any, data?: any, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"campaignId\" is set\n        if (campaignId === null || campaignId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'campaignId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<null>({\n            url: \"/v3/update-campaigns/{campaign_id}/stop\".replace(\"{\" + \"campaign_id\" + \"}\", String(campaignId)),\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Get a campaign.\n     * Get an update campaign.\n     * @param campaignId The campaign ID\n     */\n    public updateCampaignRetrieve(campaignId: string, callback?: (error: any, data?: UpdateCampaign, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"campaignId\" is set\n        if (campaignId === null || campaignId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'campaignId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UpdateCampaign>({\n            url: \"/v3/update-campaigns/{campaign_id}/\".replace(\"{\" + \"campaign_id\" + \"}\", String(campaignId)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Modify a campaign\n     * Modify an update campaign.\n     * @param campaignId \n     * @param campaign Update campaign\n     */\n    public updateCampaignUpdate(campaignId: string, campaign: UpdateCampaignPutRequest, callback?: (error: any, data?: UpdateCampaign, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"campaignId\" is set\n        if (campaignId === null || campaignId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'campaignId' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"campaign\" is set\n        if (campaign === null || campaign === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'campaign' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UpdateCampaign>({\n            url: \"/v3/update-campaigns/{campaign_id}/\".replace(\"{\" + \"campaign_id\" + \"}\", String(campaignId)),\n            method: \"PUT\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n            body: campaign,\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}