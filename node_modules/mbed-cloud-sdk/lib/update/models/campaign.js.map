{"version":3,"sources":["update/models/campaign.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;AAEF,oDAAoD;AAOpD;;GAEG;AACH;IA2BI,kBAAY,IAAwB,EAAU,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAC1D,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;QACL,CAAC;IACL,CAAC;IAYM,yBAAM,GAAb,UAAc,QAA+B;QAA7C,iBAIC;QAHG,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAI,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAYM,wBAAK,GAAZ,UAAa,QAA+B;QAA5C,iBAIC;QAHG,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC3C,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAYM,uBAAI,GAAX,UAAY,QAA+B;QAA3C,iBAIC;QAHG,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAcM,mCAAgB,GAAvB,UAAwB,OAAqB,EAAE,QAAwD;QAAvG,iBAUC;QATG,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAChC,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,EAAE,CAAC;QACjB,CAAC;QAED,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAI,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAC/D,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAYM,yBAAM,GAAb,UAAc,QAA2B;QAAzC,iBAIC;QAHG,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IACL,eAAC;AAAD,CA1HA,AA0HC,IAAA;AA1HY,4BAAQ","file":"campaign.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { asyncStyle } from \"../../common/functions\";\nimport { CallbackFn, ListOptions } from \"../../common/interfaces\";\nimport { UpdateCampaignObject } from \"../types\";\nimport { UpdateApi } from \"../updateApi\";\nimport { ListResponse } from \"../../common/listResponse\";\nimport { CampaignDeviceState } from \"./campaignDeviceState\";\n\n/**\n * Campaign\n */\nexport class Campaign {\n\n    /**\n     * The ID of the campaign\n     */\n    public readonly id: string;\n    /**\n     * URL of the manifest used\n     */\n    public readonly manifestUrl?: string;\n    /**\n     * The time the object was created\n     */\n    public readonly createdAt?: Date;\n    /**\n     * The timestamp at which update campaign scheduled to start\n     */\n    public readonly startedAt?: Date;\n    /**\n     * The timestamp when the update campaign was updated\n     */\n    public readonly updatedAt?: Date;\n    /**\n     * The timestamp when the update campaign finished\n     */\n    public readonly finishedAt?: Date;\n\n    constructor(init?: Partial<Campaign>, private _api?: UpdateApi) {\n        for (const key in init) {\n            if (init.hasOwnProperty(key)) {\n                this[key] = init[key];\n            }\n        }\n    }\n\n    /**\n     * Update the campaign\n     * @returns Promise of campaign\n     */\n    public update(): Promise<Campaign>;\n    /**\n     * Update the campaign\n     * @param callback A function that is passed the arguments (error, campaign)\n     */\n    public update(callback: CallbackFn<Campaign>): void;\n    public update(callback?: CallbackFn<Campaign>): Promise<Campaign> {\n        return asyncStyle(done => {\n            this._api.updateCampaign(this, done);\n        }, callback);\n    }\n\n    /**\n     * Start the campaign\n     * @returns Promise containing campaign\n     */\n    public start(): Promise<Campaign>;\n    /**\n     * Start the campaign\n     * @param callback A function that is passed the return arguments (error, campaign)\n     */\n    public start(callback: CallbackFn<Campaign>): void;\n    public start(callback?: CallbackFn<Campaign>): Promise<Campaign> {\n        return asyncStyle(done => {\n            this._api.startCampaign(this.id, done);\n        }, callback);\n    }\n\n    /**\n     * Stop the campaign\n     * @returns Promise containing campaign\n     */\n    public stop(): Promise<Campaign>;\n    /**\n     * Stop the campaign\n     * @param callback A function that is passed the return arguments (error, campaign)\n     */\n    public stop(callback: CallbackFn<Campaign>): void;\n    public stop(callback?: CallbackFn<Campaign>): Promise<Campaign> {\n        return asyncStyle(done => {\n            this._api.stopCampaign(this.id, done);\n        }, callback);\n    }\n\n    /**\n     * List campaign device states\n     * @param options list options\n     * @returns Promise of listResponse\n     */\n    public listDeviceStates(options?: ListOptions): Promise<ListResponse<CampaignDeviceState>>;\n    /**\n     * List campaign device states\n     * @param options list options\n     * @param callback A function that is passed the return arguments (error, listResponse)\n     */\n    public listDeviceStates(options?: ListOptions, callback?: CallbackFn<ListResponse<CampaignDeviceState>>): void;\n    public listDeviceStates(options?: ListOptions, callback?: CallbackFn<ListResponse<CampaignDeviceState>>): Promise<ListResponse<CampaignDeviceState>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return asyncStyle(done => {\n            this._api.listCampaignDeviceStates(this.id, options, done);\n        }, callback);\n    }\n\n    /**\n     * Delete the campaign\n     * @returns Promise containing any error\n     */\n    public delete(): Promise<void>;\n    /**\n     * Delete the campaign\n     * @param callback A function that is passed any error\n     */\n    public delete(callback: CallbackFn<void>): void;\n    public delete(callback?: CallbackFn<void>): Promise<void> {\n        return asyncStyle(done => {\n            this._api.deleteCampaign(this.id, done);\n        }, callback);\n    }\n}\nexport interface Campaign extends UpdateCampaignObject {}\n"],"sourceRoot":"../../../src"}