{"version":3,"sources":["update/updateApi.ts"],"names":[],"mappings":"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","file":"updateApi.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { asyncStyle, apiWrapper, encodeInclude, encodeFilter } from \"../common/functions\";\nimport { ConnectionOptions, CallbackFn, ListOptions } from \"../common/interfaces\";\nimport { ListResponse } from \"../common/listResponse\";\nimport { AddFirmwareImageObject, AddFirmwareManifestObject, AddCampaignObject, UpdateCampaignObject, FirmwareImageListOptions, FirmwareManifestListOptions, CampaignListOptions } from \"./types\";\nimport { FirmwareImage } from \"./models/firmwareImage\";\nimport { FirmwareImageAdapter } from \"./models/firmwareImageAdapter\";\nimport { FirmwareManifest } from \"./models/firmwareManifest\";\nimport { FirmwareManifestAdapter } from \"./models/firmwareManifestAdapter\";\nimport { Campaign } from \"./models/campaign\";\nimport { CampaignAdapter } from \"./models/campaignAdapter\";\nimport { CampaignDeviceState } from \"./models/campaignDeviceState\";\nimport { CampaignDeviceStateAdapter } from \"./models/campaignDeviceStateAdapter\";\nimport { Endpoints } from \"./endpoints\";\nimport { Filters } from \"./filters\";\nimport { ApiMetadata } from \"../common/apiMetadata\";\n\n/**\n * ## Update API\n *\n * This API is initialized with [ConnectionOptions](../interfaces/connectionoptions.html).\n *\n * To create an instance of this API in [Node.js](https://nodejs.org):\n *\n * ```JavaScript\n * var MbedCloudSDK = require(\"mbed-cloud-sdk\");\n *\n * var update = new MbedCloudSDK.UpdateApi({\n *     apiKey: \"<Mbed Cloud API Key>\"\n * });\n * ```\n *\n * To create an instance of this API in the browser:\n *\n * ```html\n * <script src=\"<mbed-cloud-sdk>/bundles/update.min.js\"></script>\n *\n * <script>\n *     var update = new MbedCloudSDK.UpdateApi({\n *         apiKey: \"<Mbed Cloud API Key>\"\n *     });\n * </script>\n * ```\n */\nexport class UpdateApi {\n\n    private _endpoints: Endpoints;\n\n    /**\n     * @param options connection options\n     */\n    constructor(options: ConnectionOptions) {\n        this._endpoints = new Endpoints(options);\n    }\n\n    /**\n     * List firmware images\n     *\n     * Example:\n     * ```JavaScript\n     * update.listFirmwareImages({\n     *     limit: 5,\n     *     filter: {\n     *         name: { $eq: \"blinky\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * })\n     * .then(firmwareimages => {\n     *     // Utilize firmwareimages here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options list options\n     * @returns Promise of listResponse\n     */\n    public listFirmwareImages(options?: FirmwareImageListOptions): Promise<ListResponse<FirmwareImage>>;\n    /**\n     * List firmware images\n     *\n     * Example:\n     * ```JavaScript\n     * update.listFirmwareImages({\n     *     limit: 5,\n     *     filter: {\n     *         name: { $eq: \"blinky\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     * }},\n     * function(error, firmwareimages) {\n     *     if (error) throw error;\n     *     // Utilize firmwareimages here\n     * });\n     * ```\n     *\n     * @param options list options\n     * @param callback A function that is passed the return arguments (error, listResponse)\n     */\n    public listFirmwareImages(options?: FirmwareImageListOptions, callback?: CallbackFn<ListResponse<FirmwareImage>>): void;\n    public listFirmwareImages(options?: any, callback?: CallbackFn<ListResponse<FirmwareImage>>): Promise<ListResponse<FirmwareImage>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, order, after, include, filter } = options as FirmwareImageListOptions;\n            this._endpoints.update.firmwareImageList(limit, order, after, encodeFilter(filter, Filters.EMPTY_FILTER_MAP), encodeInclude(include), resultsFn);\n        }, (data, done) => {\n            let list: Array<FirmwareImage>;\n            if (data.data && data.data.length) {\n                list = data.data.map(image => {\n                    return FirmwareImageAdapter.map(image, this);\n                });\n            }\n\n            done(null, new ListResponse(data, list));\n        }, callback);\n    }\n\n    /**\n     * Get details of a firmware image\n     *\n     * Example:\n     * ```JavaScript\n     * update.getFirmwareImage('015baf5f4f04000000000001001003d5')\n     * .then(firmwareimage => {\n     *     // Utilize firmwareimage here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param firmwareImageId The firmware image ID\n     * @returns Promise containing the firmware image\n     */\n    public getFirmwareImage(firmwareImageId: string): Promise<FirmwareImage>;\n    /**\n     * Get details of a firmware image\n     *\n     * Example:\n     * ```JavaScript\n     * update.getFirmwareImage('015baf5f4f04000000000001001003d5', function(error, firmwareimage) {\n     *     if (error) throw error;\n     *     // Utilize firmwareimage here\n     * });\n     * ```\n     *\n     * @param firmwareImageId The firmware image ID\n     * @param callback A function that is passed the return arguments (error, firmware image)\n     */\n    public getFirmwareImage(firmwareImageId: string, callback: CallbackFn<FirmwareImage>): void;\n    public getFirmwareImage(firmwareImageId: string, callback?: CallbackFn<FirmwareImage>): Promise<FirmwareImage> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.update.firmwareImageRetrieve(firmwareImageId, resultsFn);\n        }, (data, done) => {\n            done(null, FirmwareImageAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Add a firmware image\n     *\n     * Example (Node.js):\n     * ```JavaScript\n     * var fs = require(\"fs\");\n     * ...\n     * update.addFirmwareImage({\n     *     name: \"<FirmwareImage name>\",\n     *     dataFile: fs.createReadStream(\"<FirmwareImage file path>\")\n     * })\n     * .then(image => {\n     *     console.log(image.url);\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * Example (browser):\n     * ```JavaScript\n     * <input type=\"file\" id=\"file\">\n     * ...\n     * document.getElementById(\"file\").addEventListener(\"change\", event => {\n     *     let file = event.target.files[0];\n     *\n     *     updateApi.addFirmwareImage({\n     *         name: file.name,\n     *         dataFile: file\n     *     })\n     *     .then(image => {\n     *         alert(image.url);\n     *     })\n     *     .catch(error => {\n     *         console.log(error);\n     *     });\n     * });\n     * ```\n     *\n     * @param image The image to add\n     * @returns Promise containing firmware image\n     */\n    public addFirmwareImage(image: AddFirmwareImageObject): Promise<FirmwareImage>;\n    /**\n     * Add a firmware image\n     *\n     * Example (Node.js):\n     * ```JavaScript\n     * var fs = require(\"fs\");\n     * ...\n     * update.addFirmwareImage({\n     *     name: \"<FirmwareImage name>\",\n     *     dataFile: fs.createReadStream(\"<FirmwareImage file path>\")\n     * }, function(error, image) {\n     *     if (error) return console.log(error);\n     *     console.log(image.url);\n     * });\n     * ```\n     *\n     * Example (browser):\n     * ```JavaScript\n     * <input type=\"file\" id=\"file\">\n     * ...\n     * document.getElementById(\"file\").addEventListener(\"change\", function(event) {\n     *     var file = event.target.files[0];\n     *\n     *     updateApi.addFirmwareImage({\n     *         name: file.name,\n     *         dataFile: file\n     *     }, function(error, image) {\n     *         if (error) return console.log(error);\n     *         console.log(image.url);\n     *     });\n     * });\n     * ```\n     *\n     * @param image The image to add\n     * @param callback A function that is passed the return arguments (error, firmware image)\n     */\n    public addFirmwareImage(image: AddFirmwareImageObject, callback: CallbackFn<FirmwareImage>): void;\n    public addFirmwareImage(image: AddFirmwareImageObject, callback?: CallbackFn<FirmwareImage>): Promise<FirmwareImage> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.update.firmwareImageCreate(image.dataFile, image.name, image.description, resultsFn);\n        }, (data, done) => {\n            done(null, FirmwareImageAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Delete a firmware image\n     *\n     * Example:\n     * ```JavaScript\n     * update.deleteFirmwareImage('015baf5f4f04000000000001001003d5')\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param firmwareImageId The ID of the firmware image to delete\n     * @returns Promise containing any error\n     */\n    public deleteFirmwareImage(firmwareImageId: string): Promise<void>;\n    /**\n     * Delete a firmware image\n     *\n     * Example:\n     * ```JavaScript\n     * update.deleteFirmwareImage('015baf5f4f04000000000001001003d5', function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param firmwareImageId The ID of the firmware image to delete\n     * @param callback A function that is passed the return arguments (error, void)\n     */\n    public deleteFirmwareImage(firmwareImageId: string, callback: CallbackFn<void>): void;\n    public deleteFirmwareImage(firmwareImageId: string, callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.update.firmwareImageDestroy(firmwareImageId, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * List firmware manifests\n     *\n     * Example:\n     * ```JavaScript\n     * update.listFirmwareManifests({\n     *     limit: 5,\n     *     filter: {\n     *         name: { $eq: \"blinky\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * })\n     * .then(firmwaremanifests => {\n     *     // Utilize firmwaremanifests here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options list options\n     * @returns Promise of listResponse\n     */\n    public listFirmwareManifests(options?: FirmwareManifestListOptions): Promise<ListResponse<FirmwareManifest>>;\n    /**\n     * List firmware manifests\n     *\n     * Example:\n     * ```JavaScript\n     * update.listFirmwareManifests({\n     *     limit: 5,\n     *     filter: {\n     *         name: { $eq: \"blinky\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * }, function(error, firmwaremanifests) {\n     *     if (error) throw error;\n     *     // Utilize firmwaremanifests here\n     * }\n     * ```\n     *\n     * @param options list options\n     * @param callback A function that is passed the return arguments (error, listResponse)\n     */\n    public listFirmwareManifests(options?: FirmwareManifestListOptions, callback?: CallbackFn<ListResponse<FirmwareManifest>>): void;\n    public listFirmwareManifests(options?: any, callback?: CallbackFn<ListResponse<FirmwareManifest>>): Promise<ListResponse<FirmwareManifest>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, order, after, include, filter } = options as FirmwareManifestListOptions;\n            this._endpoints.update.firmwareManifestList(limit, order, after, encodeFilter(filter, Filters.EMPTY_FILTER_MAP), encodeInclude(include), resultsFn);\n        }, (data, done) => {\n            let list: Array<FirmwareManifest>;\n            if (data.data && data.data.length) {\n                list = data.data.map(log => {\n                    return FirmwareManifestAdapter.map(log, this);\n                });\n            }\n\n            done(null, new ListResponse(data, list));\n        }, callback);\n    }\n\n    /**\n     * Get details of a firmware manifest\n     *\n     * Example:\n     * ```JavaScript\n     * update.getFirmwareManifest('015baf60323d000000000001001003dd')\n     * .then(firmwaremanifest => {\n     *     // Utilize firmwaremanifest here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param firmwareManifestId The firmware manifest ID\n     * @returns Promise containing the firmware manifest\n     */\n    public getFirmwareManifest(firmwareManifestId: string): Promise<FirmwareManifest>;\n    /**\n     * Get details of a firmware manifest\n     *\n     * Example:\n     * ```JavaScript\n     * update.getFirmwareManifest('015baf60323d000000000001001003dd', function(error, firmwaremanifest) {\n     *     if (error) throw error;\n     *     // Utilize firmwaremanifest here\n     * });\n     * ```\n     *\n     * @param firmwareManifestId The firmware manifest ID\n     * @param callback A function that is passed the return arguments (error, firmware manifest)\n     */\n    public getFirmwareManifest(firmwareManifestId: string, callback: CallbackFn<FirmwareManifest>): void;\n    public getFirmwareManifest(firmwareManifestId: string, callback?: CallbackFn<FirmwareManifest>): Promise<FirmwareManifest> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.update.firmwareManifestRetrieve(firmwareManifestId, resultsFn);\n        }, (data, done) => {\n            done(null, FirmwareManifestAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Add a firmware manifest\n     *\n     * Example (Node.js):\n     * ```JavaScript\n     * var fs = require(\"fs\");\n     * ...\n     * update.addFirmwareManifest({\n     *     name: \"<FirmwareManifest name>\",\n     *     dataFile: fs.createReadStream(\"<FirmwareManifest file path>\")\n     * })\n     * .then(manifest => {\n     *     console.log(manifest.url);\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * Example (browser):\n     * ```JavaScript\n     * <input type=\"file\" id=\"file\">\n     * ...\n     * document.getElementById(\"file\").addEventListener(\"change\", event => {\n     *     let file = event.target.files[0];\n     *\n     *     updateApi.addFirmwareManifest({\n     *         name: file.name,\n     *         dataFile: file\n     *     })\n     *     .then(manifest => {\n     *         alert(manifest.url);\n     *     })\n     *     .catch(error => {\n     *         console.log(error);\n     *     });\n     * });\n     * ```\n     *\n     * @param manifest The manifest to add\n     * @returns Promise containing firmware manifest\n     */\n    public addFirmwareManifest(manifest: AddFirmwareManifestObject): Promise<FirmwareManifest>;\n    /**\n     * Add a firmware manifest\n     *\n     * Example (Node.js):\n     * ```JavaScript\n     * var fs = require(\"fs\");\n     * ...\n     * update.addFirmwareManifest({\n     *     name: \"<FirmwareManifest name>\",\n     *     dataFile: fs.createReadStream(\"<FirmwareManifest file path>\")\n     * }, function(error, manifest) {\n     *     if (error) return console.log(error);\n     *     console.log(manifest.url);\n     * });\n     * ```\n     *\n     * Example (browser):\n     * ```JavaScript\n     * <input type=\"file\" id=\"file\">\n     * ...\n     * document.getElementById(\"file\").addEventListener(\"change\", function(event) {\n     *     var file = event.target.files[0];\n     *\n     *     updateApi.addFirmwareManifest({\n     *         name: file.name,\n     *         dataFile: file\n     *     }, function(error, manifest) {\n     *         if (error) return console.log(error);\n     *         console.log(manifest.url);\n     *     });\n     * });\n     * ```\n     *\n     * @param manifest The manifest to add\n     * @param callback A function that is passed the return arguments (error, firmware manifest)\n     */\n    public addFirmwareManifest(manifest: AddFirmwareManifestObject, callback: CallbackFn<FirmwareManifest>): void;\n    public addFirmwareManifest(manifest: AddFirmwareManifestObject, callback?: CallbackFn<FirmwareManifest>): Promise<FirmwareManifest> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.update.firmwareManifestCreate(manifest.dataFile, manifest.name, manifest.description, null, resultsFn);\n        }, (data, done) => {\n            done(null, FirmwareManifestAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Delete a firmware manifest\n     *\n     * Example:\n     * ```JavaScript\n     * update.deleteFirmwareManifest('015baf60323d000000000001001003dd')\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param firmwareManifestId The ID of the firmware manifest to delete\n     * @returns Promise containing any error\n     */\n    public deleteFirmwareManifest(firmwareManifestId: string): Promise<void>;\n    /**\n     * Delete a firmware manifest\n     *\n     * Example:\n     * ```JavaScript\n     * update.deleteFirmwareManifest('015baf60323d000000000001001003dd', function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param firmwareManifestId The ID of the firmware manifest to delete\n     * @param callback A function that is passed the return arguments (error, void)\n     */\n    public deleteFirmwareManifest(firmwareManifestId: string, callback: CallbackFn<void>): void;\n    public deleteFirmwareManifest(firmwareManifestId: string, callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.update.firmwareManifestDestroy(firmwareManifestId, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * List update campaigns\n     *\n     * Example:\n     * ```JavaScript\n     * update.listCampaigns({\n     *     limit: 5,\n     *     filter: {\n     *         name: { $eq: \"blinky\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * })\n     * .then(campaigns => {\n     *     // Utilize campaigns here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options list options\n     * @returns Promise of listResponse\n     */\n    public listCampaigns(options?: CampaignListOptions): Promise<ListResponse<Campaign>>;\n    /**\n     * List update campaigns\n     *\n     * Example:\n     * ```JavaScript\n     * update.listCampaigns({\n     *     limit: 5,\n     *     filter: {\n     *         name: { $eq: \"blinky\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") }\n     *     }\n     * }, function(error, campaigns) {\n     *     if (error) throw error;\n     *     // Utilize campaigns here\n     * });\n     * ```\n     *\n     * @param options list options\n     * @param callback A function that is passed the return arguments (error, listResponse)\n     */\n    public listCampaigns(options?: CampaignListOptions, callback?: CallbackFn<ListResponse<Campaign>>): void;\n    public listCampaigns(options?: any, callback?: CallbackFn<ListResponse<Campaign>>): Promise<ListResponse<Campaign>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, order, after, include, filter } = options as CampaignListOptions;\n            this._endpoints.update.updateCampaignList(limit, order, after, encodeFilter(filter, Filters.CAMPAIGN_FILTER_MAP), encodeInclude(include), resultsFn);\n        }, (data, done) => {\n            let list: Array<Campaign>;\n            if (data.data && data.data.length) {\n                list = data.data.map(log => {\n                    return CampaignAdapter.map(log, this);\n                });\n            }\n\n            done(null, new ListResponse(data, list));\n        }, callback);\n    }\n\n    /**\n     * Get details of an update campaign\n     *\n     * Example:\n     * ```JavaScript\n     * update.getCampaign('015baf607c250000000000010010003d')\n     * .then(campaign => {\n     *     // Utilize campaign here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param campaignId The update campaign ID\n     * @returns Promise containing the update campaign\n     */\n    public getCampaign(campaignId: string): Promise<Campaign>;\n    /**\n     * Get details of an update campaign\n     *\n     * Example:\n     * ```JavaScript\n     * update.getCampaign('015baf607c250000000000010010003d', function(error, campaign) {\n     *     if (error) throw error;\n     *     // Utilize campaign here\n     * });\n     * ```\n     *\n     * @param campaignId The update campaign ID\n     * @param callback A function that is passed the return arguments (error, update campaign)\n     */\n    public getCampaign(campaignId: string, callback: CallbackFn<Campaign>): void;\n    public getCampaign(campaignId: string, callback?: CallbackFn<Campaign>): Promise<Campaign> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.update.updateCampaignRetrieve(campaignId, resultsFn);\n        }, (data, done) => {\n            done(null, CampaignAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Add an update campaign\n     *\n     * Example:\n     * ```JavaScript\n     * update.addCampaign({\n     *     name: 'testCampaign',\n     *     deviceFilter: {\n     *         state: { $eq: \"bootstrapped\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         customAttributes: {\n     *             attr1: { $eq: \"custom_value_1\" },\n     *             attr2: { $eq: \"custom_value_1\" },\n     *         }\n     *     }\n     * })\n     * .then(campaign => {\n     *     // Utilize campaign here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param campaign The campaign to add\n     * @returns Promise containing update campaign\n     */\n    public addCampaign(campaign: AddCampaignObject): Promise<Campaign>;\n    /**\n     * Add an update campaign\n     *\n     * Example:\n     * ```JavaScript\n     * update.addCampaign({\n     *     name: 'testCampaign',\n     *     deviceFilter: {\n     *         state: { $eq: \"bootstrapped\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         customAttributes: {\n     *             attr1: { $eq: \"custom_value_1\" },\n     *             attr2: { $eq: \"custom_value_1\" },\n     *         }\n     *     }\n     * }, function(error, campaign) {\n     *     if (error) throw error;\n     *     // Utilize campaign here\n     * });\n     * ```\n     *\n     * @param campaign The campaign to add\n     * @param callback A function that is passed the return arguments (error, update campaign)\n     */\n    public addCampaign(campaign: AddCampaignObject, callback: CallbackFn<Campaign>): void;\n    public addCampaign(campaign: AddCampaignObject, callback?: CallbackFn<Campaign>): Promise<Campaign> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.update.updateCampaignCreate(CampaignAdapter.addMap(campaign), resultsFn);\n        }, (data, done) => {\n            done(null, CampaignAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Update an update campaign\n     *\n     * Example:\n     * ```JavaScript\n     * update.updateCampaign({\n     *     name: 'testCampaign',\n     *     id: '015baf607c250000000000010010003d',\n     *     deviceFilter: {\n     *         state: { $eq: \"bootstrapped\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         customAttributes: {\n     *             attr1: { $eq: \"custom_value_1\" },\n     *             attr2: { $eq: \"custom_value_1\" },\n     *         }\n     *     }\n     * })\n     * .then(campaign => {\n     *     // Utilize campaign here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param campaign The campaign to update\n     * @returns Promise of campaign\n     */\n    public updateCampaign(campaign: UpdateCampaignObject): Promise<Campaign>;\n    /**\n     * Update an update campaign\n     *\n     * Example:\n     * ```JavaScript\n     * update.updateCampaign({\n     *     name: 'testCampaign',\n     *     id: '015baf607c250000000000010010003d',\n     *     deviceFilter: {\n     *         state: { $eq: \"bootstrapped\" },\n     *         createdAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         updatedAt: { $gte: new Date(\"01-01-2014\"), $lte: new Date(\"01-01-2018\") },\n     *         customAttributes: {\n     *             attr1: { $eq: \"custom_value_1\" },\n     *             attr2: { $eq: \"custom_value_1\" },\n     *         }\n     *     }\n     * }, function(error, campaign) {\n     *     if (error) throw error;\n     *     // Utilize campaign here\n     * });\n     * ```\n     *\n     * @param campaign The campaign to update\n     * @param callback A function that is passed the arguments (error, campaign)\n     */\n    public updateCampaign(campaign: UpdateCampaignObject, callback: CallbackFn<Campaign>): void;\n    public updateCampaign(campaign: UpdateCampaignObject, callback?: CallbackFn<Campaign>): Promise<Campaign> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.update.updateCampaignUpdate(campaign.id, CampaignAdapter.updateMap(campaign), resultsFn);\n        }, (data, done) => {\n            const response = CampaignAdapter.map(data, this);\n            done(null, response);\n        }, callback);\n    }\n\n    /**\n     * Delete an update campaign\n     *\n     * Example:\n     * ```JavaScript\n     * update.deleteCampaign('015baf607c250000000000010010003d')\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param campaignId The ID of the update campaign to delete\n     * @returns Promise containing any error\n     */\n    public deleteCampaign(campaignId: string): Promise<void>;\n    /**\n     * Delete an update campaign\n     *\n     * Example:\n     * ```JavaScript\n     * update.deleteCampaign('015baf607c250000000000010010003d', function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param campaignId The ID of the update campaign to delete\n     * @param callback A function that is passed the return arguments (error, void)\n     */\n    public deleteCampaign(campaignId: string, callback: CallbackFn<void>): void;\n    public deleteCampaign(campaignId: string, callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.update.updateCampaignDestroy(campaignId, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * Start an update campaign\n     *\n     * Example:\n     * ```JavaScript\n     * update.startCampaign('015baf607c250000000000010010003d')\n     * .then(data => {\n     *     // Utilize data here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param campaignId The ID of the update campaign\n     * @returns Promise containing campaign\n     */\n    public startCampaign(campaignId: string): Promise<Campaign>;\n    /**\n     * Start an update campaign\n     *\n     * Example:\n     * ```JavaScript\n     * update.startCampaign('015baf607c250000000000010010003d', function(error, data) {\n     *     if (error) throw error;\n     *     // Utilize data here\n     * });\n     * ```\n     *\n     * @param campaignId The ID of the update campaign\n     * @param callback A function that is passed the return arguments (error, campaign)\n     */\n    public startCampaign(campaignId: string, callback: CallbackFn<Campaign>): void;\n    public startCampaign(campaignId: string, callback?: CallbackFn<Campaign>): Promise<Campaign> {\n        return apiWrapper(resultsFn => {\n            this.updateCampaign({\n                id: campaignId,\n                state: \"scheduled\"\n            }, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * Stop an update campaign\n     *\n     * Example:\n     * ```JavaScript\n     * update.stopCampaign('015baf607c250000000000010010003d')\n     * .then(data => {\n     *     // Utilize data here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param campaignId The ID of the update campaign\n     * @returns Promise containing campaign\n     */\n    public stopCampaign(campaignId: string): Promise<Campaign>;\n    /**\n     * Stop an update campaign\n     *\n     * Example:\n     * ```JavaScript\n     * update.stopCampaign('015baf607c250000000000010010003d', function(error, data) {\n     *     if (error) throw error;\n     *     // Utilize data here\n     * });\n     * ```\n     *\n     * @param campaignId The ID of the update campaign\n     * @param callback A function that is passed the return arguments (error, campaign)\n     */\n    public stopCampaign(campaignId: string, callback: CallbackFn<Campaign>): void;\n    public stopCampaign(campaignId: string, callback?: CallbackFn<Campaign>): Promise<Campaign> {\n        return apiWrapper(resultsFn => {\n            this.updateCampaign({\n                id: campaignId,\n                state: \"draft\"\n            }, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * List campaign device states\n     *\n     * Example:\n     * ```JavaScript\n     * update.listCampaignDeviceStates('015baf607c250000000000010010003d', {\n     *     limit: 5,\n     * })\n     * .then(devicestates => {\n     *     // Utilize devicestates here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param campaignId The ID of the update campaign\n     * @param options list options\n     * @returns Promise of listResponse\n     */\n    public listCampaignDeviceStates(campaignId: string, options?: ListOptions): Promise<ListResponse<CampaignDeviceState>>;\n    /**\n     * List campaign device states\n     *\n     * Example:\n     * ```JavaScript\n     * update.listCampaignDeviceStates('015baf607c250000000000010010003d', {\n     *     limit: 5,\n     * }, function(error, devicestates) {\n     *     if (error) throw error;\n     *     // Utilize devicestates here\n     * });\n     * ```\n     *\n     * @param campaignId The ID of the update campaign\n     * @param options list options\n     * @param callback A function that is passed the return arguments (error, listResponse)\n     */\n    public listCampaignDeviceStates(campaignId: string, options?: ListOptions, callback?: CallbackFn<ListResponse<CampaignDeviceState>>): void;\n    public listCampaignDeviceStates(campaignId: string, options?: ListOptions, callback?: CallbackFn<ListResponse<CampaignDeviceState>>): Promise<ListResponse<CampaignDeviceState>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, order, after, include } = options;\n            this._endpoints.update.updateCampaignMetadataList(campaignId, limit, order, after, encodeInclude(include), resultsFn);\n        }, (data, done) => {\n            let list: Array<CampaignDeviceState>;\n            if (data.data && data.data.length) {\n                list = data.data.map(state => {\n                    return CampaignDeviceStateAdapter.map(state);\n                });\n            }\n\n            done(null, new ListResponse(data, list));\n        }, callback);\n    }\n\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @returns Promise of meta data\n     */\n    public getLastApiMetadata(): Promise<ApiMetadata>;\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @param callback A function that is passed the arguments (error, meta data)\n     */\n    public getLastApiMetadata(callback: CallbackFn<ApiMetadata>): void;\n    public getLastApiMetadata(callback?: CallbackFn<ApiMetadata>): Promise<ApiMetadata> {\n        return asyncStyle(done => {\n            done(null, this._endpoints.getLastMeta());\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}