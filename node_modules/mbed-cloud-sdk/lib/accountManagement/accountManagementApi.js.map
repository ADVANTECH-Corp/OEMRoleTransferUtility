{"version":3,"sources":["accountManagement/accountManagementApi.ts"],"names":[],"mappings":"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","file":"accountManagementApi.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { asyncStyle, apiWrapper, encodeInclude, extractFilter } from \"../common/functions\";\nimport { ConnectionOptions, CallbackFn, ListOptions } from \"../common/interfaces\";\nimport { ListResponse } from \"../common/listResponse\";\nimport { Endpoints } from \"./endpoints\";\nimport { UpdateAccountObject, AddApiKeyObject, UpdateApiKeyObject, AddUserObject, UpdateUserObject, ApiKeyListOptions, UserListOptions, GroupListOptions } from \"./types\";\nimport { Account } from \"./models/account\";\nimport { AccountAdapter } from \"./models/accountAdapter\";\nimport { ApiKey } from \"./models/apiKey\";\nimport { ApiKeyAdapter } from \"./models/apiKeyAdapter\";\nimport { User } from \"./models/user\";\nimport { UserAdapter } from \"./models/userAdapter\";\nimport { Group } from \"./models/group\";\nimport { GroupAdapter } from \"./models/groupAdapter\";\nimport { ApiMetadata } from \"../common/apiMetadata\";\n\n/**\n * ## Account Management API\n *\n * This API is initialized with [ConnectionOptions](../interfaces/connectionoptions.html).\n *\n * To create an instance of this API in [Node.js](https://nodejs.org):\n *\n * ```JavaScript\n * var MbedCloudSDK = require(\"mbed-cloud-sdk\");\n *\n * var accounts = new MbedCloudSDK.AccountManagementApi({\n *     apiKey: \"<Mbed Cloud API Key>\"\n * });\n * ```\n *\n * To create an instance of this API in the browser:\n *\n * ```html\n * <script src=\"<mbed-cloud-sdk>/bundles/account-management.min.js\"></script>\n *\n * <script>\n *     var accounts = new MbedCloudSDK.AccountManagementApi({\n *         apiKey: \"<Mbed Cloud API Key>\"\n *     });\n * </script>\n * ```\n */\nexport class AccountManagementApi {\n\n    private _endpoints: Endpoints;\n\n    /**\n     * @param options connection options\n     */\n    constructor(options: ConnectionOptions) {\n        this._endpoints = new Endpoints(options);\n    }\n\n    /**\n     * Get details of account associated with current API key\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.getAccount()\n     * .then(account => {\n     *     console.log(\"Account ID: \" + account.id);\n     *     // Utilize account here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @returns Promise of account\n     */\n    public getAccount(): Promise<Account>;\n    /**\n     * Get details of account associated with current API key\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.getAccount(function(error, account) {\n     *     if (error) throw error;\n     *     console.log(\"Account ID: \" + account.id);\n     *     // Utilize account here\n     * });\n     * ```\n     *\n     * @param callback A function that is passed the return arguments (error, account)\n     */\n    public getAccount(callback?: CallbackFn<Account>): void;\n    public getAccount(callback?: CallbackFn<Account>): Promise<Account> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.developer.getMyAccountInfo(\"limits, policies\", \"\", resultsFn);\n        }, (data, done) => {\n            done(null, AccountAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Update details of account associated with current API key\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.updateAccount({\n     *    state: 'Texas',\n     *    city: 'Austin',\n     *    country: 'USA'\n     * })\n     * .then(account => {\n     *     // Utilize account here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param account The account object to update\n     * @returns Promise of account\n     */\n    public updateAccount(account: UpdateAccountObject): Promise<Account>;\n    /**\n     * Update details of account associated with current API key\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.updateAccount({\n     *     state: 'Texas',\n     *     city: 'Austin',\n     *     country: 'USA'\n     * }, function(error, account) {\n     *     if (error) throw error;\n     *     // Utilize account here\n     * });\n     * ```\n     *\n     * @param account The account object to update\n     * @param callback A function that is passed the return arguments (error, account)\n     */\n    public updateAccount(account: UpdateAccountObject, callback?: CallbackFn<Account>): void;\n    public updateAccount(account: UpdateAccountObject, callback?: CallbackFn<Account>): Promise<Account> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.admin.updateMyAccount(AccountAdapter.reverseMap(account), resultsFn);\n        }, (data, done) => {\n            done(null, AccountAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * List API keys\n     *\n     * Example:\n     * ```JavaScript\n     * // Filter finds API keys that are owned by the specified user ID\n     * accounts.listApiKeys({\n     *     filter: {\n     *         ownerId: { $eq: '015c3c46514802420a010b1000000000' }\n     *     }\n     * })\n     * .then(keys => {\n     *     // Utilize keys here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options filter options\n     * @returns Promise of listResponse\n     */\n    public listApiKeys(options?: ApiKeyListOptions): Promise<ListResponse<ApiKey>>;\n    /**\n     * List API keys\n     *\n     * Example:\n     * ```JavaScript\n     * // Filter finds API keys that are owned by the specified user ID\n     * accounts.listApiKeys({\n     *     filter: {\n     *         ownerId: { $eq: '015c3c46514802420a010b1000000000' }\n     *     }\n     * }, function(error, keys) {\n     *     if (error) throw error;\n     *     // Utilize keys here\n     * });\n     * ```\n     *\n     * @param options filter options\n     * @param callback A function that is passed the arguments (error, listResponse)\n     */\n    public listApiKeys(options?: ApiKeyListOptions, callback?: CallbackFn<ListResponse<ApiKey>>): void;\n    public listApiKeys(options?: any, callback?: CallbackFn<ListResponse<ApiKey>>): Promise<ListResponse<ApiKey>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, after, order, include, filter } = options as ApiKeyListOptions;\n            this._endpoints.developer.getAllApiKeys(limit, after, order, encodeInclude(include), extractFilter(filter, \"apiKey\"), extractFilter(filter, \"ownerId\"), resultsFn);\n        }, (data, done) => {\n            let keys: Array<ApiKey>;\n            if (data && data.data && data.data.length) {\n                keys = data.data.map(key => {\n                    return ApiKeyAdapter.map(key, this);\n                });\n            }\n\n            done(null, new ListResponse(data, keys));\n        }, callback);\n    }\n\n    /**\n     * Get details of an API key\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.getApiKey()\n     * .then(key => {\n     *     console.log('Current user ID: ' + key.ownerId);\n     *     // Utilize key here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param apiKeyId The API key ID (if not specified, returns current API key)\n     * @returns Promise containing the API key\n     */\n    public getApiKey(apiKeyId?: string): Promise<ApiKey>;\n    /**\n     * Get details of an API key\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.getApiKey(function(error, key) {\n     *     if (error) throw error;\n     *     console.log('Current user ID: ' + key.ownerId);\n     *     // Utilize key here\n     * });\n     * ```\n     *\n     * @param apiKeyId The API key ID (if not specified, returns current API key)\n     * @param callback A function that is passed the return arguments (error, API key)\n     */\n    public getApiKey(apiKeyId?: string, callback?: CallbackFn<ApiKey>): void;\n    public getApiKey(apiKeyId?: any, callback?: CallbackFn<ApiKey>): Promise<ApiKey> {\n        if (typeof apiKeyId === \"function\") {\n            callback = apiKeyId;\n            apiKeyId = null;\n        }\n\n        return apiWrapper(resultsFn => {\n            if (apiKeyId) this._endpoints.developer.getApiKey(apiKeyId, resultsFn);\n            else this._endpoints.developer.getMyApiKey(resultsFn);\n        }, (data, done) => {\n            done(null, ApiKeyAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Adds an API key\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.addApiKey({name: 'auto_generated_key'})\n     * .then(keyResult => {\n     *     var key = keyResult.key;\n     *     console.log('Save this signature as you only get it once: ' + key);\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param apiKey The API key to add\n     * @returns Promise containing API key\n     */\n    public addApiKey(apiKey: AddApiKeyObject): Promise<ApiKey>;\n    /**\n     * Adds an API key\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.addApiKey({name: 'auto_generated_key'}, function(error, key) {\n     *     if (error) throw error;\n     *     var key = keyResult.key;\n     *     console.log('Save this signature as you only get it once: ' + key);\n     * });\n     * ```\n     *\n     * @param apiKey The API key to add\n     * @param callback A function that is passed the return arguments (error, API key)\n     */\n    public addApiKey(apiKey: AddApiKeyObject, callback: CallbackFn<ApiKey>): void;\n    public addApiKey(apiKey: AddApiKeyObject, callback?: CallbackFn<ApiKey>): Promise<ApiKey> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.developer.createApiKey(ApiKeyAdapter.addMap(apiKey), resultsFn);\n        }, (data, done) => {\n            done(null, ApiKeyAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Updates an API key\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.updateApiKey({\n     *     id: '015c65119ed102420a01041200000000',\n     *     name: 'new API name'\n     * })\n     * .then(key => {\n     *     // Utilize key here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param apiKey The API key to add\n     * @returns Promise containing API key\n     */\n    public updateApiKey(apiKey: UpdateApiKeyObject): Promise<ApiKey>;\n    /**\n     * Updates an API key\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.updateApiKey({\n     *     id: '015c65119ed102420a01041200000000',\n     *     name: 'new API name'\n     * }, updatefunction(error, key) {\n     *     if (error) throw error;\n     *     // Utilize key here\n     * });\n     * ```\n     *\n     * @param apiKey The API key to add\n     * @param callback A function that is passed the return arguments (error, API key)\n     */\n    public updateApiKey(apiKey: UpdateApiKeyObject, callback: CallbackFn<ApiKey>): void;\n    public updateApiKey(apiKey: UpdateApiKeyObject, callback?: CallbackFn<ApiKey>): Promise<ApiKey> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.developer.updateApiKey(apiKey.id, ApiKeyAdapter.updateMap(apiKey), resultsFn);\n        }, (data, done) => {\n            done(null, ApiKeyAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Deletes an API key\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.deleteApiKey('015c65119ed102420a01041200000000')\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param apiKeyId The API key ID\n     * @returns Promise containing any error\n     */\n    public deleteApiKey(apiKeyId: string): Promise<void>;\n    /**\n     * Deletes an API key\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.deleteApiKey('015c65119ed102420a01041200000000', function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param apiKeyId The API key ID\n     * @param callback A function that is passed the return arguments (error, void)\n     */\n    public deleteApiKey(apiKeyId: string, callback: CallbackFn<void>): void;\n    public deleteApiKey(apiKeyId: string, callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.developer.deleteApiKey(apiKeyId, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * List users\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.listUsers({\n     *     limit: 10,\n     *     filter: {\n     *         status: { $eq: 'ACTIVE' }\n     *     }\n     * })\n     * .then(users => {\n     *     // Utilize users here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options filter options\n     * @returns Promise of listResponse\n     */\n    public listUsers(options?: UserListOptions): Promise<ListResponse<User>>;\n    /**\n     * List users\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.listUsers({\n     *     limit: 10,\n     *     filter: {\n     *         status: { $eq: 'ACTIVE' }\n     *     }\n     * }, function(error, users) {\n     *     if (error) throw error;\n     *     // Utilize users here\n     * });\n     * ```\n     *\n     * @param options filter options\n     * @param callback A function that is passed the arguments (error, listResponse)\n     */\n    public listUsers(options?: UserListOptions, callback?: CallbackFn<ListResponse<User>>): void;\n    public listUsers(options?: any, callback?: CallbackFn<ListResponse<User>>): Promise<ListResponse<User>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, after, order, include, filter } = options as UserListOptions;\n            this._endpoints.admin.getAllUsers(limit, after, order, encodeInclude(include), extractFilter(filter, \"email\"), extractFilter(filter, \"status\"), resultsFn);\n        }, (data, done) => {\n            let users: Array<User>;\n            if (data.data && data.data.length) {\n                users = data.data.map(user => {\n                    return UserAdapter.map(user, this);\n                });\n            }\n\n            done(null, new ListResponse(data, users));\n        }, callback);\n    }\n\n    /**\n     * Get details of a user\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.getUser('015c3c46514802420a010b1000000000')\n     * .then(user => {\n     *     // Utilize user here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param userId The user ID\n     * @returns Promise containing the user\n     */\n    public getUser(userId: string): Promise<User>;\n    /**\n     * Get details of a user\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.getUser('015c3c46514802420a010b1000000000', function(error, user) {\n     *     if (error) throw error;\n     *     // Utilize user here\n     * });\n     * ```\n     *\n     * @param userId The user ID\n     * @param callback A function that is passed the return arguments (error, user)\n     */\n    public getUser(userId: string, callback?: CallbackFn<User>): void;\n    public getUser(userId: string, callback?: CallbackFn<User>): Promise<User> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.admin.getUser(userId, \"\", resultsFn);\n        }, (data, done) => {\n            done(null, UserAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Adds a user\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.addUser({\n     *     email: 'user@email.com',\n     *     fullName: 'First Last',\n     *     username: 'user123'\n     * })\n     * .then(user => {\n     *     // Utilize user here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param user User to add\n     * @returns Promise containing user\n     */\n    public addUser(user: AddUserObject): Promise<User>;\n    /**\n     * Adds a user\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.addUser({\n     *     email: 'user@email.com',\n     *     fullName: 'First Last',\n     *     username: 'user123'\n     * }, function(error, user) {\n     *     if (error) throw error;\n     *     // Utilize user here\n     * });\n     * ```\n     *\n     * @param user User to add\n     * @param callback A function that is passed the return arguments (error, user)\n     */\n    public addUser(user: AddUserObject, callback: CallbackFn<User>): void;\n    public addUser(user: AddUserObject, callback?: CallbackFn<User>): Promise<User> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.admin.createUser(UserAdapter.addMap(user), \"create\", resultsFn);\n        }, (data, done) => {\n            done(null, UserAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Updates a user\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.updateUser({\n     *     id: '015c3c46514802420a010b1000000000',\n     *     fullName: 'First Last',\n     *     username: 'user123'\n     * })\n     * .then(user => {\n     *     // Utilize user here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param user User to update\n     * @returns Promise containing user\n     */\n    public updateUser(user: UpdateUserObject): Promise<User>;\n    /**\n     * Updates a user\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.updateUser({\n     *     id: '015c3c46514802420a010b1000000000',\n     *     fullName: 'First Last',\n     *     username: 'user123'\n     * }, function(error, user) {\n     *     if (error) throw error;\n     *     // Utilize user here\n     * });\n     * ```\n     *\n     * @param user User to update\n     * @param callback A function that is passed the return arguments (error, user)\n     */\n    public updateUser(user: UpdateUserObject, callback: CallbackFn<User>): void;\n    public updateUser(user: UpdateUserObject, callback?: CallbackFn<User>): Promise<User> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.admin.updateUser(user.id, UserAdapter.updateMap(user), resultsFn);\n        }, (data, done) => {\n            done(null, UserAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * Deletes a user\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.deleteUser('015c3c46514802420a010b1000000000')\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param userId The user ID\n     * @returns Promise containing any error\n     */\n    public deleteUser(userId: string): Promise<void>;\n    /**\n     * Deletes a user\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.deleteUser('015c3c46514802420a010b1000000000', function(error) {\n     *     if (error) throw error;\n     * });\n     * ```\n     *\n     * @param userId The user ID\n     * @param callback A function that is passed the return arguments (error, void)\n     */\n    public deleteUser(userId: string, callback: CallbackFn<void>): void;\n    public deleteUser(userId: string, callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.admin.deleteUser(userId, resultsFn);\n        }, (data, done) => {\n            done(null, data);\n        }, callback);\n    }\n\n    /**\n     * List groups\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.listGroups({limit: 5})\n     * .then(groups => {\n     *     // Utilize groups here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param options filter options\n     * @returns Promise of listResponse\n     */\n    public listGroups(options?: ListOptions): Promise<ListResponse<Group>>;\n    /**\n     * List groups\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.listGroups({limit: 5}, function(error, groups) {\n     *     if (error) throw error;\n     *     // Utilize groups here\n     * });\n     * ```\n     *\n     * @param options filter options\n     * @param callback A function that is passed the arguments (error, listResponse)\n     */\n    public listGroups(options?: GroupListOptions, callback?: CallbackFn<ListResponse<Group>>): void;\n    public listGroups(options?: any, callback?: CallbackFn<ListResponse<Group>>): Promise<ListResponse<Group>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, after, order, include, filter } = options as GroupListOptions;\n            this._endpoints.developer.getAllGroups(limit, after, order, encodeInclude(include), extractFilter(filter, \"name\"), resultsFn);\n        }, (data, done) => {\n            let groups: Array<Group>;\n            if (data.data && data.data.length) {\n                groups = data.data.map(group => {\n                    return GroupAdapter.map(group, this);\n                });\n            }\n\n            done(null, new ListResponse(data, groups));\n        }, callback);\n    }\n\n    /**\n     * Get details of a group\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.getGroup('015b5c9279ee02420a01041200000000')\n     * .then(group => {\n     *     // Utilize group here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param groupId The group ID\n     * @returns Promise containing the group\n     */\n    public getGroup(groupId: string): Promise<Group>;\n    /**\n     * Get details of a group\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.getGroup('015b5c9279ee02420a01041200000000', function(error, group) {\n     *     if (error) throw error;\n     *     // Utilize group here\n     * });\n     * ```\n     *\n     * @param groupId The group ID\n     * @param callback A function that is passed the arguments (error, group)\n     */\n    public getGroup(groupId: string, callback: CallbackFn<Group>): void;\n    public getGroup(groupId: string, callback?: CallbackFn<Group>): Promise<Group> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.developer.getGroupSummary(groupId, resultsFn);\n        }, (data, done) => {\n            done(null, GroupAdapter.map(data, this));\n        }, callback);\n    }\n\n    /**\n     * List users of a group\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.listGroupUsers({limit: 10}, '015b5c9279ee02420a01041200000000')\n     * .then(users => {\n     *     // Utilize users here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param groupId The group ID\n     * @param options filter options\n     * @returns Promise of listResponse\n     */\n    public listGroupUsers(groupId: string, options?: ListOptions): Promise<ListResponse<User>>;\n    /**\n     * List users of a group\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.listGroupUsers({limit: 10}, '015b5c9279ee02420a01041200000000', function(error, users) {\n     *     if (error) throw error;\n     *     // Utilize users here\n     * });\n     * ```\n     *\n     * @param groupId The group ID\n     * @param options filter options\n     * @param callback A function that is passed the arguments (error, listResponse)\n     */\n    public listGroupUsers(groupId: string, options?: ListOptions, callback?: CallbackFn<ListResponse<User>>): void;\n    public listGroupUsers(groupId: string, options?: ListOptions, callback?: CallbackFn<ListResponse<User>>): Promise<ListResponse<User>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, after, order, include } = options as ListOptions;\n            this._endpoints.admin.getUsersOfGroup(groupId, limit, after, order, encodeInclude(include), resultsFn);\n        }, (data, done) => {\n            let users: Array<User>;\n            if (data.data && data.data.length) {\n                users = data.data.map(user => {\n                    return UserAdapter.map(user, this);\n                });\n            }\n\n            done(null, new ListResponse(data, users));\n        }, callback);\n    }\n\n    /**\n     * List API keys of a group\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.listGroupApiKeys({limit: 10}, '015b5c9279ee02420a01041200000000')\n     * .then(keys => {\n     *     // Utilize keys here\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param groupId The group ID\n     * @param options filter options\n     * @returns Promise of listResponse\n     */\n    public listGroupApiKeys(groupId: string, options?: ListOptions): Promise<ListResponse<ApiKey>>;\n    /**\n     * List API keys of a group\n     *\n     * Example:\n     * ```JavaScript\n     * accounts.listGroupApiKeys({limit: 10}, '015b5c9279ee02420a01041200000000', function(error, keys) {\n     *     if (error) throw error;\n     *     // Utilize keys here\n     * });\n     * ```\n     *\n     * @param groupId The group ID\n     * @param options filter options\n     * @param callback A function that is passed the arguments (error, listResponse)\n     */\n    public listGroupApiKeys(groupId: string, options?: ListOptions, callback?: CallbackFn<ListResponse<ApiKey>>): void;\n    public listGroupApiKeys(groupId: string, options?: ListOptions, callback?: CallbackFn<ListResponse<ApiKey>>): Promise<ListResponse<ApiKey>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, after, order, include } = options as ListOptions;\n            this._endpoints.developer.getApiKeysOfGroup(groupId, limit, after, order, encodeInclude(include), resultsFn);\n        }, (data, done) => {\n            let keys: Array<ApiKey>;\n            if (data.data && data.data.length) {\n                keys = data.data.map(key => {\n                    return ApiKeyAdapter.map(key, this);\n                });\n            }\n\n            done(null, new ListResponse(data, keys));\n        }, callback);\n    }\n\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @returns Promise of meta data\n     */\n    public getLastApiMetadata(): Promise<ApiMetadata>;\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @param callback A function that is passed the arguments (error, meta data)\n     */\n    public getLastApiMetadata(callback: CallbackFn<ApiMetadata>): void;\n    public getLastApiMetadata(callback?: CallbackFn<ApiMetadata>): Promise<ApiMetadata> {\n        return asyncStyle(done => {\n            done(null, this._endpoints.getLastMeta());\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}