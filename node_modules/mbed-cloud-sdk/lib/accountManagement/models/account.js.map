{"version":3,"sources":["accountManagement/models/account.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;AAEF,oDAAoD;AAMpD;;GAEG;AACH;IA2DI,iBAAY,IAAsB,EAAU,IAA2B;QAA3B,SAAI,GAAJ,IAAI,CAAuB;QACnE,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;QACL,CAAC;IACL,CAAC;IAYM,wBAAM,GAAb,UAAc,QAA8B;QAA5C,iBAIC;QAHG,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAI,EAAE,IAAI,CAAC,CAAC;QACxC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IACL,cAAC;AAAD,CAlFA,AAkFC,IAAA;AAlFY,0BAAO","file":"account.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { asyncStyle } from \"../../common/functions\";\nimport { CallbackFn } from \"../../common/interfaces\";\nimport { UpdateAccountObject, AccountStatusEnum } from \"../types\";\nimport { AccountManagementApi } from \"../accountManagementApi\";\nimport { Policy } from \"./policy\";\n\n/**\n * Account\n */\nexport class Account {\n\n    /**\n     * Account ID.\n     */\n    public readonly id: string;\n    /**\n     * An array of aliases.\n     */\n    public readonly aliases: Array<string>;\n    /**\n     * The status of the account.\n     */\n    public readonly status: AccountStatusEnum;\n    /**\n     * The tier level of the account; '0': free tier, '1': commercial account. Other values are reserved for the future.\n     */\n    public readonly tier: string;\n    /**\n     * List of limits as key-value pairs if requested.\n     */\n    public readonly limits?: { [key: string]: string; };\n    /**\n     * List of policies if requested.\n     */\n    public readonly policies?: Array<Policy>;\n    /**\n     * Creation time.\n     */\n    public readonly createdAt?: Date;\n    /**\n     * Time when upgraded to commercial account.\n     */\n    public readonly upgradedAt?: Date;\n    /**\n     * A reason note for updating the status of the account.\n     */\n    public readonly reason?: string;\n    /**\n     * Account template ID.\n     */\n    public readonly templateId?: string;\n    /**\n     * Contract number of the customer\n     */\n    public readonly contractNumber?: string;\n    /**\n     * Customer number of the customer\n     */\n    public readonly customerNumber?: string;\n    /**\n     * Reference note for updating the status of the account\n     */\n    public readonly referenceNote?: string;\n    /**\n     * The last update time\n     */\n    public readonly updatedAt?: Date;\n\n    constructor(init: Partial<Account>, private _api?: AccountManagementApi) {\n        for (const key in init) {\n            if (init.hasOwnProperty(key)) {\n                this[key] = init[key];\n            }\n        }\n    }\n\n    /**\n     * Update details of the account\n     * @returns Promise of account\n     */\n    public update(): Promise<Account>;\n    /**\n     * Update details of the account\n     * @param callback A function that is passed the return arguments (error, account)\n     */\n    public update(callback: CallbackFn<Account>): void;\n    public update(callback?: CallbackFn<Account>): Promise<Account> {\n        return asyncStyle(done => {\n            this._api.updateAccount(this, done);\n        }, callback);\n    }\n}\nexport interface Account extends UpdateAccountObject {}\n"],"sourceRoot":"../../../src"}