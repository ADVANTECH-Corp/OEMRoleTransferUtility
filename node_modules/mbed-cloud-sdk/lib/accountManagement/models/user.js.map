{"version":3,"sources":["accountManagement/models/user.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;AAEF,oDAAgE;AAShE;;GAEG;AACH;IA2CI,cAAY,IAAmB,EAAU,IAA2B;QAA3B,SAAI,GAAJ,IAAI,CAAuB;QAChE,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;QACL,CAAC;IACL,CAAC;IAYM,qBAAM,GAAb,UAAc,QAA2B;QAAzC,iBAIC;QAHG,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAI,EAAE,IAAI,CAAC,CAAC;QACrC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAYM,yBAAU,GAAjB,UAAkB,QAAmC;QAArD,iBAaC;QAZG,MAAM,CAAC,sBAAU,CAAC,UAAA,SAAS;YACvB,KAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAC1C,CAAC,EAAE,UAAC,IAAI,EAAE,IAAI;YACV,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,KAAK;oBAC3B,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC9C,CAAC,CAAC,CAAC;YACP,CAAC;YAED,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACvB,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAYM,0BAAW,GAAlB,UAAmB,OAAa,EAAE,QAA2C;QAA7E,iBAcC;QAbG,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAChC,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,EAAE,CAAC;QACjB,CAAC;QAED,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,OAAO,CAAC,MAAM,GAAG;gBACb,OAAO,EAAE,EAAE,GAAG,EAAE,KAAI,CAAC,EAAE,EAAE;aAC5B,CAAC;YAEF,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAYM,qBAAM,GAAb,UAAc,QAA2B;QAAzC,iBAIC;QAHG,MAAM,CAAC,sBAAU,CAAC,UAAA,IAAI;YAClB,KAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACxC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IACL,WAAC;AAAD,CArIA,AAqIC,IAAA;AArIY,oBAAI","file":"user.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { asyncStyle, apiWrapper } from \"../../common/functions\";\nimport { CallbackFn, ListOptions } from \"../../common/interfaces\";\nimport { ListResponse } from \"../../common/listResponse\";\nimport { UpdateUserObject, UserStatusEnum } from \"../types\";\nimport { AccountManagementApi } from \"../accountManagementApi\";\nimport { ApiKey } from \"./apiKey\";\nimport { Group } from \"./group\";\nimport { LoginHistory } from \"./loginHistory\";\n\n/**\n * User\n */\nexport class User {\n\n    /**\n     * A list of group IDs this user belongs to.\n     */\n    public readonly groups?: Array<string>;\n    /**\n     * The status of the user. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately.\n     */\n    public readonly status: UserStatusEnum;\n    /**\n     * The UUID of the account.\n     */\n    public readonly accountId: string;\n    /**\n     * A flag indicating whether the user's email address has been verified or not.\n     */\n    public readonly emailVerified?: boolean;\n    /**\n     * Creation time.\n     */\n    public readonly createdAt?: Date;\n    /**\n     * A timestamp of the user creation in the storage, in milliseconds.\n     */\n    public readonly creationTime?: number;\n    /**\n     * A timestamp of the latest change of the user password, in milliseconds.\n     */\n    public readonly passwordChangedTime?: number;\n    /**\n     * Whether two factor authentication has been enabled for this user.\n     */\n    public readonly twoFactorAuthentication?: boolean;\n    /**\n     * A timestamp of the latest login of the user, in milliseconds.\n     */\n    public readonly lastLoginTime?: number;\n    /**\n     * History of logins for this user.\n     */\n    public readonly loginHistory?: Array<LoginHistory>;\n\n    constructor(init: Partial<User>, private _api?: AccountManagementApi) {\n        for (const key in init) {\n            if (init.hasOwnProperty(key)) {\n                this[key] = init[key];\n            }\n        }\n    }\n\n    /**\n     * Updates the user\n     * @returns Promise containing user\n     */\n    public update(): Promise<User>;\n    /**\n     * Updates the user\n     * @param callback A function that is passed the return arguments (error, user)\n     */\n    public update(callback: CallbackFn<User>): void;\n    public update(callback?: CallbackFn<User>): Promise<User> {\n        return asyncStyle(done => {\n            this._api.updateUser(this, done);\n        }, callback);\n    }\n\n    /**\n     * List the groups this user belongs to\n     * @returns Promise containing groups\n     */\n    public listGroups(): Promise<Array<Group>>;\n    /**\n     * List the groups this user belongs to\n     * @param callback A function that is passed the return arguments (error, groups)\n     */\n    public listGroups(callback: CallbackFn<Array<Group>>): void;\n    public listGroups(callback?: CallbackFn<Array<Group>>): Promise<Array<Group>> {\n        return apiWrapper(resultsFn => {\n            this._api.listGroups(null, resultsFn);\n        }, (data, done) => {\n            let groups = [];\n            if (data.data && data.data.length) {\n                groups = data.data.filter(group => {\n                    return this.groups.indexOf(group.id) > -1;\n                });\n            }\n\n            done(null, groups);\n        }, callback);\n    }\n\n    /**\n     * List the API keys for this user\n     * @returns Promise containing API keys\n     */\n    public listApiKeys(options?: ListOptions): Promise<ListResponse<ApiKey>>;\n    /**\n     * List the API keys for this user\n     * @param callback A function that is passed the return arguments (error, API keys)\n     */\n    public listApiKeys(options?: ListOptions, callback?: CallbackFn<ListResponse<ApiKey>>): void;\n    public listApiKeys(options?: any, callback?: CallbackFn<ListResponse<ApiKey>>): Promise<ListResponse<ApiKey>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return asyncStyle(done => {\n            options.filter = {\n                ownerId: { $eq: this.id }\n            };\n\n            this._api.listApiKeys(options, done);\n        }, callback);\n    }\n\n    /**\n     * Delete the user\n     * @returns Promise containing any error\n     */\n    public delete(): Promise<void>;\n    /**\n     * Delete the user\n     * @param callback A function that is passed any error\n     */\n    public delete(callback: CallbackFn<void>): void;\n    public delete(callback?: CallbackFn<void>): Promise<void> {\n        return asyncStyle(done => {\n            this._api.deleteUser(this.id, done);\n        }, callback);\n    }\n}\nexport interface User extends UpdateUserObject {}\n"],"sourceRoot":"../../../src"}