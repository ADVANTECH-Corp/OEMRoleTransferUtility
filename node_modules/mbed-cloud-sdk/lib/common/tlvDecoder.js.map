{"version":3,"sources":["common/tlvDecoder.ts"],"names":[],"mappings":"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","file":"tlvDecoder.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst typeMask       = parseInt(\"11000000\", 2);\nconst idLengthMask   = parseInt(\"00100000\", 2); // Length of ID 0=8bits 1=16bits\nconst lengthTypeMask = parseInt(\"00011000\", 2);\nconst lengthMask     = parseInt(\"00000111\", 2);\n\nconst types = {\n    OBJECT_INSTAN: parseInt(\"00000000\", 2), // Object Instance with one or more TLVs\n    RESOURCE_INST: parseInt(\"01000000\", 2), // Resource Instance with Value in multi Resource TLV\n    MULT_RESOURCE: parseInt(\"10000000\", 2), // Multiple Resource, Value contains one or more Resource Instance\n    RESOURCE_VALU: parseInt(\"11000000\", 2)  // Resource with Value\n};\n\nconst lengthType = {\n    ONE_BYTE: parseInt(\"00001000\", 2), // Length is 8-bits\n    TWO_BYTE: parseInt(\"00010000\", 2), // Length is 16-bits\n    TRE_BYTE: parseInt(\"00011000\", 2), // Length is 24-bits\n    OTR_BYTE: parseInt(\"00000000\", 2)  // Length is in bits 2-0\n};\n\nfunction findIdLength(byte): number {\n    return (byte & idLengthMask) === idLengthMask ? 2 : 1;\n}\n\nfunction findValueLength(byte): number {\n    if ((byte & lengthTypeMask) === lengthType.ONE_BYTE ) {\n        return 1;\n    } else if ((byte & lengthTypeMask) === lengthType.TWO_BYTE) {\n        return 2;\n    } else if ((byte & lengthTypeMask) === lengthType.TRE_BYTE) {\n        return 3;\n    } else {\n        return (byte & lengthMask);\n    }\n}\n\nfunction decode(bytes, result: {} = {}, path: string = \"\") {\n    if (!bytes || bytes.length < 1) {\n        return result;\n    }\n\n    const byte = bytes[0];\n    const type = byte & typeMask;\n    const idLength = findIdLength(byte);\n    const length = findValueLength(byte);\n\n    const getString = b => {\n        return String.fromCharCode(b);\n    };\n\n    const combineBytes = (acc, cur, idx, arr) => {\n        const step = arr.length - idx - 1;\n        return acc + (cur << (8 * step));\n    };\n\n    let offset = 1;\n\n    const id = bytes.slice(offset, offset + idLength).reduce(combineBytes, 0);\n    offset = offset + idLength;\n\n    let valueLength = length;\n    if ((byte & lengthTypeMask) !== lengthType.OTR_BYTE) {\n        // Need to get length of value from bytes\n        valueLength = bytes.slice(offset, offset + length).reduce(combineBytes, 0);\n        offset = offset + length;\n    }\n\n    if (type === types.MULT_RESOURCE ) {\n        // Go into multiple resources\n        decode(bytes.slice(offset, offset + valueLength), result, `${path}/${id}`);\n    } else {\n        const valueBytes = bytes.slice(offset, offset + valueLength);\n        const hasZero = valueBytes.some(b => {\n            return b === 0;\n        });\n\n        const value = hasZero ? valueBytes.reduce(combineBytes, 0) : valueBytes.map(getString).join(\"\");\n        result[`${path}/${id}`] = value;\n    }\n\n    offset = offset + valueLength;\n    decode(bytes.slice(offset), result, path);\n\n    return result;\n}\n\nexport function decodeTlv(value: string): string | number | { [key: string]: string | number } {\n    const bytes = value.split(\"\").map(char => {\n        return char.charCodeAt(0);\n    });\n\n    return decode(bytes);\n}\n"],"sourceRoot":"../../src"}