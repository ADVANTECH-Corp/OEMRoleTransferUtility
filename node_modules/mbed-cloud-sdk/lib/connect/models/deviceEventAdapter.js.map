{"version":3,"sources":["connect/models/deviceEventAdapter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;AAQF,uCAAsC;AAEtC;;GAEG;AACH;IAAA;IAqCA,CAAC;IAnCiB,8BAAW,GAAzB,UAA0B,IAAsB,EAAE,QAAgB,EAAE,GAAe;QAC/E,MAAM,CAAC,IAAI,mBAAQ,CAAC;YAChB,WAAW,EAAK,IAAI,CAAC,EAAE;YACvB,UAAU,EAAM,IAAI,CAAC,GAAG;YACxB,IAAI,EAAY,IAAI,CAAC,EAAE;YACvB,IAAI,EAAY,IAAI,CAAC,IAAI;YACzB,QAAQ,EAAQ,QAAQ;SAC3B,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAEa,sBAAG,GAAjB,UAAkB,IAAoB,EAAE,GAAe,EAAE,KAAsB;QAC3E,IAAI,SAAS,GAAG,EAAE,CAAC;QAEnB,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACzB,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,QAAQ;gBACnC,MAAM,CAAC,kBAAkB,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAClE,CAAC,CAAC,CAAC;QACP,CAAC;QAED,MAAM,CAAC;YACH,EAAE,EAAY,IAAI,CAAC,EAAE;YACrB,IAAI,EAAU,IAAI,CAAC,GAAG;YACtB,SAAS,EAAK,IAAI,CAAC,CAAC;YACpB,SAAS,EAAK,SAAS;YACvB,KAAK,EAAS,KAAK;SACtB,CAAC;IACN,CAAC;IAEa,wBAAK,GAAnB,UAAoB,IAAY,EAAE,KAAsB;QACpD,0DAA0D;QAC1D,MAAM,CAAC;YACH,EAAE,EAAM,IAAI;YACZ,KAAK,EAAG,KAAK;SAChB,CAAC;IACN,CAAC;IACL,yBAAC;AAAD,CArCA,AAqCC,IAAA;AArCY,gDAAkB","file":"deviceEventAdapter.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport {\n    EndpointData as apiDeviceEvent,\n    ResourcesData as apiResourceEvent\n} from \"../../_api/mds\";\nimport { DeviceEvent, DeviceEventEnum } from \"../types\";\nimport { ConnectApi } from \"../connectApi\";\nimport { Resource } from \"./resource\";\n\n/**\n * Device Event Adapter\n */\nexport class DeviceEventAdapter {\n\n    public static mapResource(from: apiResourceEvent, deviceId: string, api: ConnectApi): Resource {\n        return new Resource({\n            contentType:    from.ct,\n            observable:     from.obs,\n            type:           from.rt,\n            path:           from.path,\n            deviceId:       deviceId\n        }, api);\n    }\n\n    public static map(from: apiDeviceEvent, api: ConnectApi, event: DeviceEventEnum): DeviceEvent<Resource> {\n        let resources = [];\n\n        if (from && from.resources) {\n            resources = from.resources.map(resource => {\n                return DeviceEventAdapter.mapResource(resource, from.ep, api);\n            });\n        }\n\n        return {\n            id:           from.ep,\n            type:         from.ept,\n            queueMode:    from.q,\n            resources:    resources,\n            event:        event,\n        };\n    }\n\n    public static mapId(from: string, event: DeviceEventEnum): DeviceEvent<Resource> {\n        // map an id to a sparse DeviceEvent object for observing.\n        return {\n            id    : from,\n            event : event,\n        };\n    }\n}\n"],"sourceRoot":"../../../src"}