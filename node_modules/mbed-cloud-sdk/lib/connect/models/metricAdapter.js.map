{"version":3,"sources":["connect/models/metricAdapter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;AAIF,mCAAkC;AAElC;;GAEG;AACH;IAAA;IAoFA,CAAC;IAhFiB,iBAAG,GAAjB,UAAkB,IAAe;QAC7B,MAAM,CAAC,IAAI,eAAM,CAAC;YACd,EAAE,EAA8B,IAAI,CAAC,EAAE;YACvC,SAAS,EAAuB,IAAI,CAAC,SAAS;YAC9C,UAAU,EAAsB,IAAI,CAAC,qBAAqB;YAC1D,YAAY,EAAoB,IAAI,CAAC,YAAY;YACjD,YAAY,EAAoB,IAAI,CAAC,mBAAmB;YACxD,kBAAkB,EAAc,IAAI,CAAC,wBAAwB;YAC7D,cAAc,EAAkB,IAAI,CAAC,sBAAsB;YAC3D,uBAAuB,EAAS,IAAI,CAAC,4BAA4B;YACjE,mBAAmB,EAAa,IAAI,CAAC,0BAA0B;YAC/D,8BAA8B,EAAE,IAAI,CAAC,mCAAmC;YACxE,0BAA0B,EAAM,IAAI,CAAC,iCAAiC;YACtE,oBAAoB,EAAY,IAAI,CAAC,qBAAqB;YAC1D,gBAAgB,EAAgB,IAAI,CAAC,iBAAiB;YACtD,iBAAiB,EAAe,IAAI,CAAC,kBAAkB;YACvD,iBAAiB,EAAe,IAAI,CAAC,kBAAkB;YACvD,oBAAoB,EAAY,IAAI,CAAC,oBAAoB;YACzD,oBAAoB,EAAY,IAAI,CAAC,qBAAqB;YAC1D,oBAAoB,EAAY,IAAI,CAAC,qBAAqB;SAC7D,CAAC,CAAC;IACP,CAAC;IAEa,yBAAW,GAAzB,UAA0B,IAAoB;QAC1C,IAAI,QAAQ,GAAG,EAAE,CAAC;QAElB,IAAM,WAAW,GAAG;YAChB,YAAY;YACZ,cAAc;YACd,cAAc;YACd,oBAAoB;YACpB,gBAAgB;YAChB,yBAAyB;YACzB,qBAAqB;YACrB,gCAAgC;YAChC,4BAA4B;YAC5B,sBAAsB;YACtB,kBAAkB;YAClB,mBAAmB;YACnB,mBAAmB;YACnB,sBAAsB;YACtB,sBAAsB;YACtB,sBAAsB;SACzB,CAAC;QAEF,IAAM,QAAQ,GAAG;YACb,uBAAuB;YACvB,cAAc;YACd,qBAAqB;YACrB,0BAA0B;YAC1B,wBAAwB;YACxB,8BAA8B;YAC9B,4BAA4B;YAC5B,qCAAqC;YACrC,mCAAmC;YACnC,uBAAuB;YACvB,mBAAmB;YACnB,oBAAoB;YACpB,oBAAoB;YACpB,sBAAsB;YACtB,uBAAuB;YACvB,uBAAuB;SAC1B,CAAC;QAEF,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACP,IAAI,CAAC,OAAO,CAAC,UAAA,OAAO;gBAChB,IAAM,KAAK,GAAG,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC3C,EAAE,CAAC,CAAC,KAAK,IAAI,CAAE,CAAC;oBAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;QACP,CAAC;QAED,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC;YAAC,QAAQ,GAAG,QAAQ,CAAC;QAC/C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAEa,2BAAa,GAA3B,UAA4B,IAAiB;QACzC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;YAAC,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC;QACpD,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,KAAG,IAAI,CAAC,QAAQ,GAAG,IAAM,CAAC;IACrC,CAAC;IAjFuB,iCAAmB,GAAG,IAAI,CAAC;IAkFvD,oBAAC;CApFD,AAoFC,IAAA;AApFY,sCAAa","file":"metricAdapter.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Metric as apiMetric } from \"../../_api/statistics\";\nimport { TimePeriod } from \"../types\";\nimport { Metric } from \"./metric\";\n\n/**\n * Metric Adapter\n */\nexport class MetricAdapter {\n\n    private static readonly DEFAULT_TIME_PERIOD = \"1d\";\n\n    public static map(from: apiMetric): Metric {\n        return new Metric({\n            id:                             from.id,\n            timestamp:                      from.timestamp,\n            handshakes:                     from.handshakes_successful,\n            transactions:                   from.transactions,\n            observations:                   from.device_observations,\n            successfulApiCalls:             from.connect_rest_api_success,\n            failedApiCalls:                 from.connect_rest_api_error,\n            successfulProxyRequests:        from.device_proxy_request_success,\n            failedProxyRequests:            from.device_proxy_request_error,\n            successfulSubscriptionRequests: from.device_subscription_request_success,\n            failedSubscriptionRequests:     from.device_subscription_request_error,\n            successfulBootstraps:           from.bootstraps_successful,\n            failedBootstraps:               from.bootstraps_failed,\n            pendingBootstraps:              from.bootstraps_pending,\n            fullRegistrations:              from.full_registrations,\n            updatedRegistrations:           from.registration_updates,\n            expiredRegistrations:           from.expired_registrations,\n            deletedRegistrations:           from.deleted_registrations\n        });\n    }\n\n    public static mapIncludes(from?: Array<string>): string {\n        let includes = [];\n\n        const metricNames = [\n            \"handshakes\",\n            \"transactions\",\n            \"observations\",\n            \"successfulApiCalls\",\n            \"failedApiCalls\",\n            \"successfulProxyRequests\",\n            \"failedProxyRequests\",\n            \"successfulSubscriptionRequests\",\n            \"failedSubscriptionRequests\",\n            \"successfulBootstraps\",\n            \"failedBootstraps\",\n            \"pendingBootstraps\",\n            \"fullRegistrations\",\n            \"updatedRegistrations\",\n            \"expiredRegistrations\",\n            \"deletedRegistrations\"\n        ];\n\n        const apiNames = [\n            \"handshakes_successful\",\n            \"transactions\",\n            \"device_observations\",\n            \"connect_rest_api_success\",\n            \"connect_rest_api_error\",\n            \"device_proxy_request_success\",\n            \"device_proxy_request_error\",\n            \"device_subscription_request_success\",\n            \"device_subscription_request_error\",\n            \"bootstraps_successful\",\n            \"bootstraps_failed\",\n            \"bootstraps_pending\",\n            \"full_registrations\",\n            \"registration_updates\",\n            \"expired_registrations\",\n            \"deleted_registrations\"\n        ];\n\n        if (from) {\n            from.forEach(include => {\n                const index = metricNames.indexOf(include);\n                if (index >= 0 ) includes.push(apiNames[index]);\n            });\n        }\n\n        if (includes.length === 0) includes = apiNames;\n        return includes.join(\",\");\n    }\n\n    public static mapTimePeriod(from?: TimePeriod): string {\n        if (!from) return MetricAdapter.DEFAULT_TIME_PERIOD;\n        const unit = from.unit[0];\n        return `${from.duration}${unit}`;\n    }\n}\n"],"sourceRoot":"../../../src"}