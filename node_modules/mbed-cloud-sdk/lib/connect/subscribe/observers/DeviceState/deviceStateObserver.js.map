{"version":3,"sources":["connect/subscribe/observers/DeviceState/deviceStateObserver.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;;;;;;;;;;;AAEF,wCAAuC;AAGvC,0DAA2D;AAE3D;IAAyC,uCAA+B;IAMpE,6BAAY,OAA2B;QAAvC,YACI,iBAAO,SAIV;QATO,iBAAW,GAAY,IAAI,CAAC;QAMhC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,KAAI,CAAC,MAAM,GAAG,OAAO,CAAC;QAC1B,CAAC;;IACL,CAAC;IAEO,wCAAU,GAAlB,UAAmB,IAA2B;QAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACd,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC5B,EAAE,CAAC,CAAC,uBAAW,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBAAC,MAAM,CAAC,KAAK,CAAC;YAC9E,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACI,oCAAM,GAAb,UAAc,IAA2B;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAAC,iBAAM,MAAM,YAAC,IAAI,CAAC,CAAC;QAClD,CAAC;IACL,CAAC;IAED;;OAEG;IACI,yCAAW,GAAlB;QACI,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,iBAAM,cAAc,WAAE,CAAC;IAC3B,CAAC;IAEL,0BAAC;AAAD,CAxCA,AAwCC,CAxCwC,mBAAQ,GAwChD;AAxCY,kDAAmB","file":"deviceStateObserver.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Observer } from \"../observer\";\nimport { Resource } from \"../../../models/resource\";\nimport { DeviceEvent, DeviceEventFilter } from \"../../../types\";\nimport { ensureArray } from \"../../../../common/functions\";\n\nexport class DeviceStateObserver extends Observer<DeviceEvent<Resource>> {\n\n    private _subscribed: boolean = true;\n\n    private filter: DeviceEventFilter;\n\n    constructor(_filter?: DeviceEventFilter) {\n        super();\n        if (_filter) {\n            this.filter = _filter;\n        }\n    }\n\n    private filterFunc(data: DeviceEvent<Resource>): boolean {\n        if (this.filter) {\n            for (const key in this.filter) {\n                if (ensureArray(this.filter[key]).indexOf(data[key]) === -1) return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Notify this observer\n     * @param data\n     */\n    public notify(data: DeviceEvent<Resource>): void {\n        if (this._subscribed) {\n            if (this.filterFunc(data)) super.notify(data);\n        }\n    }\n\n    /**\n     * Stop this observer from recieving notifications\n     */\n    public unsubscribe(): void {\n        this._subscribed = false;\n        super.clearCallbacks();\n    }\n\n}\n"],"sourceRoot":"../../../../../src"}