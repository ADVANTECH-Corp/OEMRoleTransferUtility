{"version":3,"sources":["connect/subscribe/observers/observer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;AAEF;IAQI;QACI,IAAI,CAAC,iBAAiB,GAAG,IAAI,KAAK,EAAE,CAAC;QACrC,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC;IAChC,CAAC;IAEM,yBAAM,GAAb,UAAc,IAAO;QACjB,uBAAuB;QACvB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAE5B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3B,sCAAsC;YACtC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,uCAAuC;YACvC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC;IACL,CAAC;IAIM,uBAAI,GAAX,UAAY,QAA2B;QAAvC,iBA6BC;QA5BG,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACpC,IAAM,OAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;YAC7C,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,8BAA8B;gBAC9B,QAAQ,CAAC,OAAK,CAAC,CAAC;YACpB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,uCAAuC;gBACvC,MAAM,CAAC,IAAI,OAAO,CAAI,UAAC,OAAO,EAAE,OAAO;oBACnC,OAAO,CAAC,OAAK,CAAC,CAAC;gBACnB,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,0BAA0B;gBAC1B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACjC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAM,OAAO,GAAG,IAAI,OAAO,CAAI,UAAC,OAAO,EAAE,OAAO;oBAC5C,4CAA4C;oBAC5C,IAAM,IAAI,GAAG,UAAC,IAAO;wBACjB,OAAO,CAAC,IAAI,CAAC,CAAC;oBAClB,CAAC,CAAC;oBACF,gCAAgC;oBAChC,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;gBAEH,MAAM,CAAC,OAAO,CAAC;YACnB,CAAC;QACL,CAAC;IACL,CAAC;IAEM,8BAAW,GAAlB,UAAmB,QAA0B;QACzC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAEM,iCAAc,GAArB,UAAsB,QAA0B;QAC5C,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAClD,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACpC,CAAC;IACL,CAAC;IAEM,iCAAc,GAArB;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,EAAE,CAAC;IACjC,CAAC;IAEO,mCAAgB,GAAxB,UAAyB,IAAO;QAC5B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,IAAI,CAAC,EAAR,CAAQ,CAAC,CAAC;IAC3C,CAAC;IACL,eAAC;AAAD,CA9EA,AA8EC,IAAA;AA9EY,4BAAQ","file":"observer.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nexport class Observer<T> {\n\n    public notificationQueue: Array<T>;\n\n    public callbacks: Array<(data: T) => any>;\n\n    private _waiting: Array<(data: T) => any>;\n\n    constructor() {\n        this.notificationQueue = new Array();\n        this.callbacks = new Array();\n        this._waiting = new Array();\n    }\n\n    public notify(data: T): void {\n        // notify all callbacks\n        this._notifyCallbacks(data);\n\n        if (this._waiting.length > 0) {\n            // get first function in waiting queue\n            this._waiting.shift()(data);\n        } else {\n            // nothing waiting so add to collection\n            this.notificationQueue.push(data);\n        }\n    }\n\n    public take(): Promise<T>;\n    public take(callback: (data: T) => any): void;\n    public take(callback?: (data: T) => any): Promise<T> {\n        if (this.notificationQueue.length > 0) {\n            const first = this.notificationQueue.shift();\n            if (callback) {\n                // imediately resolve callback\n                callback(first);\n            } else {\n                // imediately return a resolved promise\n                return new Promise<T>((resolve, _reject) => {\n                    resolve(first);\n                });\n            }\n        } else {\n            if (callback) {\n                // add callback to waiting\n                this._waiting.push(callback);\n            } else {\n                const promise = new Promise<T>((resolve, _reject) => {\n                    // function will resolve promise when called\n                    const wait = (data: T) => {\n                        resolve(data);\n                    };\n                    // add function to waiting queue\n                    this._waiting.push(wait);\n                });\n\n                return promise;\n            }\n        }\n    }\n\n    public addCallback(callback: (data: T) => any): void {\n        this.callbacks.push(callback);\n    }\n\n    public removeCallback(callback: (data: T) => any): void {\n        const index = this.callbacks.indexOf(callback, 0);\n        if (index > -1) {\n            this.callbacks.splice(index, 1);\n        }\n    }\n\n    public clearCallbacks(): void {\n        this.callbacks = new Array();\n    }\n\n    private _notifyCallbacks(data: T) {\n        this.callbacks.forEach(fn => fn(data));\n    }\n}\n"],"sourceRoot":"../../../../src"}