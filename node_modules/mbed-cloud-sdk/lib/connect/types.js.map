{"version":3,"sources":["connect/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE","file":"types.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { OrderEnum, CallbackFn, ConnectionOptions } from \"../common/interfaces\";\n\nexport interface ConnectOptions extends ConnectionOptions {\n    /**\n     * Whether the user will handle notifications\n     * This suppresses pull notifications for when another method is being used (such as webhooks)\n     */\n    handleNotifications?: boolean;\n}\n\nexport interface NotificationObject {\n    /**\n     * Notifications\n     */\n    notifications?: Array<any>;\n    /**\n     * New device registration notifications\n     */\n    registrations?: Array<any>;\n    /**\n     * Device registration update notifications\n     */\n    \"reg-updates\"?: Array<any>;\n    /**\n     * Device deregistration notifications\n     */\n    \"de-registrations\"?: Array<any>;\n    /**\n     * Device registration expiry notifications\n     */\n    \"registrations-expired\"?: Array<any>;\n    /**\n     * Asynchronous resoonse notifications\n     */\n    \"async-responses\"?: Array<any>;\n}\n\n/**\n * The types of device event\n */\nexport type DeviceEventEnum = \"expired\" | \"registration\" | \"reregistration\" | \"deregistration\";\n\nexport interface DeviceEvent<T> {\n    /**\n     * The ID of the device\n     */\n    id?: string;\n    /**\n     * The type of the device\n     */\n    type?: string;\n    /**\n     * The queue mode of the device\n     */\n    queueMode?: boolean;\n    /**\n     * The resources of the device\n     */\n    resources?: Array<T>;\n    /**\n     * The type of device event\n     */\n    event?: DeviceEventEnum;\n}\n\nexport interface DeviceEventFilter {\n    /**\n     * Device Ids to be notified of\n     */\n    id?: string | Array<string>;\n    /**\n     * Device Events to be notified of\n     */\n    event?: DeviceEventEnum | Array<DeviceEventEnum>;\n}\n\nexport interface AsyncResponse {\n    /**\n     * Asynchronous response unique ID.\n     */\n    id?: string;\n    /**\n     * HTTP status code, for example 200 for OK.\n     */\n    status?: number;\n    /**\n     * Content type\n     */\n    ct?: string;\n    /**\n     * Requested data, base64 encoded.\n     */\n    payload?: string;\n    /**\n     * Determines how long this value will be valid in cache, in seconds. 0 means that value is not stored in cache.\n     */\n    \"max-age\"?: string;\n    /**\n     * Optional error message, describing the error.\n     */\n    error?: string;\n}\n\nexport interface NotificationOptions {\n    /**\n     * A polling interval in milliseconds\n     */\n    interval?: number;\n    /**\n     * A function that is passed any asynchronous responses\n     */\n    requestCallback?: CallbackFn<Array<AsyncResponse>>;\n    /**\n     * Whether to clear any existing notification channel\n     */\n    forceClear?: boolean;\n}\n\nexport interface PresubscriptionObject {\n    /**\n     * The device id (optionally having an * character at the end)\n     */\n    deviceId?: string;\n    /**\n     * The device type\n     */\n    deviceType?: string;\n    /**\n     * A list of resources to subscribe to. Allows wildcards to subscribe to multiple resources at once\n     */\n    resourcePaths?: Array<string>;\n}\n\nexport type MetricsIncludeEnum = \"handshakes\" | \"transactions\" | \"observations\" | \"successfulApiCalls\" | \"failedApiCalls\" | \"successfulProxyRequests\" | \"failedProxyRequests\" | \"successfulSubscriptionRequests\" | \"failedSubscriptionRequests\" | \"successfulBootstraps\" | \"failedBootstraps\" | \"pendingBootstraps\" | \"fullRegistrations\" | \"updatedRegistrations\" | \"expiredRegistrations\" | \"deletedRegistrations\";\n\nexport type UnitType = \"minutes\" | \"hours\" | \"days\" | \"weeks\";\n\nexport interface TimePeriod {\n    /**\n     * The time period unit\n     */\n    unit: UnitType;\n    /**\n     * The unit duration\n     */\n    duration: number;\n}\n\nexport interface MetricsListOptions {\n    /**\n     * How many objects to retrieve in the page\n     */\n    limit?: number;\n    /**\n     * ASC or DESC\n     */\n    order?: OrderEnum;\n    /**\n     * The ID of the the item after which to retrieve the next page\n     */\n    after?: string;\n    /**\n     * Optional metrics fields to include\n     */\n    include?: Array<MetricsIncludeEnum>;\n    /**\n     * Group data by this interval, defaults to 1 day\n     */\n    interval?: TimePeriod;\n}\n\nexport interface MetricsStartEndListOptions extends MetricsListOptions {\n    /**\n     * Start date\n     */\n    start: Date;\n    /**\n     * End date\n     */\n    end: Date;\n}\n\nexport interface MetricsPeriodListOptions extends MetricsListOptions {\n    /**\n     * Fetch data for this period until now\n     */\n    period: TimePeriod;\n}\n"],"sourceRoot":"../../src"}